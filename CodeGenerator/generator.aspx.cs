using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Web;
using System.Web.Script.Serialization;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.IO;
using System.Collections;


public partial class generatoraspx : System.Web.UI.Page
{
    List<ApiItem> apiItems; // json api mappings will be stored here
    StreamWriter log; // general debug related txt log file
    Hashtable typeMappings; // maps HighChart types to C# types, where possible
    Hashtable propertyTypeMappings; // maps HighChart types to C# types, for specific properties that cannot be autogenerated
    Hashtable defaultValueMappings; // maps default values from javascript defaults to C# defaults
    List<string> excludedProperties; // properties that do not need to be ported to the server-side wrapper

    const int PROPERTY_NESTED_LEVELS = 5;
    const string ROOT_CLASS = "HighCharts";

    //const string ROOT_CLASS = "HighStock";

    protected override void OnInit(EventArgs e)
    {
        apiItems = new List<ApiItem>();
        log = new StreamWriter(Server.MapPath("~/log.txt"));
        typeMappings = new Hashtable();
        propertyTypeMappings = new Hashtable();
        defaultValueMappings = new Hashtable();
        excludedProperties = new List<string>();

        InitTypeMappings();
        InitPropertyMappings();
        InitDefaultValueMappings();
        InitExcludedProperties();

        base.OnInit(e);
    }

    protected void Page_Load(object sender, EventArgs e)
    {
        ParseItems();
        PrintRootItems();

        GenerateClass(new ApiItem { Title = ROOT_CLASS, FullName = ROOT_CLASS });
        for (int i = 0; i < PROPERTY_NESTED_LEVELS; i++)
        {
            GenerateClassesForLevel(i);
        }

        log.Close();
    }

    private void ParseItems()
    {
        JavaScriptSerializer jsonSerializer = new JavaScriptSerializer();

        string jsonAPI = File.ReadAllText(Server.MapPath("~/api.json"));
        //string jsonAPI = File.ReadAllText(Server.MapPath("~/highstock.json"));
        object[] jsonObject = jsonSerializer.Deserialize<object[]>(jsonAPI);

        foreach (Dictionary<string, object> item in jsonObject)
        {
            List<string> parents = new List<string>();
            if (item["parent"] != null)
            {
                parents = item["parent"].ToString().Split('-').OfType<string>().ToList();
            }
            
            ApiItem apiItem = new ApiItem
            {
                Title = item["title"].ToString(),
                Parent = item["parent"] as string,
                FullName = item["fullname"].ToString(),
                IsParent = (bool)item["isParent"],
                ReturnType = item["returnType"] as string,
                Description = (String.IsNullOrEmpty(item["description"] as string)) ? "" : item["description"] as string,
                Defaults = item["defaults"] == null ? null : item["defaults"] as string, 
                Values = item["values"] == null ? null : item["values"] as string[],

                Parents = parents
            };

            if (apiItem.ReturnType != null && apiItem.ReturnType == "" && apiItem.IsParent == false)
                continue;
            
            apiItems.Add(apiItem);
        }
    }

    private void PrintItems()
    {
        foreach (ApiItem item in apiItems)
        {
            string parentsString = "";
            foreach (string parent in item.Parents)
            {
                parentsString += parent + "-";
            }

            propertyLabel.Text += item.Title + "<br/>";
        }
    }

    private void PrintRootItems()
    {
        foreach (ApiItem item in apiItems)
        {
            if (item.Parents.Count == 0)
            {
                propertyLabel.Text += item.FullName + " : " + item.ReturnType + "<br/>";
            }
        }
    }  
    

    private void PrintApiItems(List<ApiItem> theItems)
    {
        foreach (ApiItem item in theItems)
        {
            propertyLabel.Text += item.FullName + "<br/>";
        }
    }

    private void GenerateClass(ApiItem item)
    {
        string className = item.Title;
        string codeTemplate = File.ReadAllText(Server.MapPath("~/CodeTemplates/Class.tpl"));
        string propertyTemplate = File.ReadAllText(Server.MapPath("~/CodeTemplates/Property.tpl"));        
        string properties = "";
        string defaultValues = "";
        string hashtableComparers = "";
        List<ApiItem> children;

        if (item.Title == ROOT_CLASS)
            children = FindRootChildren();
        else
            children = FindImmediateChildren(item);

        foreach (ApiItem child in children)
        {           
            string propertyName = FirstCharToUpper(child.Title);
            if (excludedProperties.Contains(propertyName) && child.IsParent == false)
                continue;
            if (child == item)
                continue;

            string formattedProperty = FormatProperty(propertyTemplate, child);
            string formattedDefaultProperty = FormatDefaultProperty(propertyName, child);
            string formattedComparer = FormatPropertyComparer(propertyName, child);

            if (child.ReturnType != null && child.ReturnType.Contains('|'))
            {
                log.WriteLine(child.FullName + " " + child.ReturnType);
                log.WriteLine(" ");
                log.WriteLine(child.Description
                                            .Replace("\r", "")
                                            .Replace("\t", "")
                                            .Replace("\n", ""));           
               
                
                log.WriteLine(" ");
                log.WriteLine("************************************");
                log.WriteLine(" ");
            }

            properties += formattedProperty;
            defaultValues += formattedDefaultProperty;
            hashtableComparers += formattedComparer;
        }

        codeTemplate = codeTemplate
                        .Replace("{HighTemplate.ConstrutorInitializers}", defaultValues)
                        .Replace("{HighTemplate.Properties}", properties)
                        .Replace("{HighTemplate.HashtableInit}", hashtableComparers)
                        .Replace("{HighTemplate.ClassName}", GetClassNameFromItem(item));

        string fileName = Server.MapPath("~/CodeGeneration/" + GetClassNameFromItem(item) + ".cs");

        File.WriteAllText(fileName, codeTemplate);
    }

    private string GetClassNameFromItem(ApiItem item)
    {
        string[] parts = item.FullName.Split('.');
        string result = "";

        foreach (string part in parts)
        {
            result += FirstCharToUpper(part);
        }

        return result;
    }

    private string FormatProperty(string propertyTemplate, ApiItem child)
    {
        string propertyName = FirstCharToUpper(child.Title);
        string returnType = GetPropertyReturnType(child, propertyName);

        return propertyTemplate
         .Replace("{HighTemplate.Name}", propertyName)
         .Replace("{HighTemplate.Type}", returnType)
         .Replace("{HighTemplate.Comment}", child.Description
                                             .Replace("\r", "")
                                             .Replace("\t", "")
                                             .Replace("\n", ""));
    }

    private string GetPropertyReturnType(ApiItem child, string propertyName)
    {
        string returnType = child.IsParent ? propertyName : child.ReturnType;

        if (propertyTypeMappings[propertyName] != null)
            return propertyTypeMappings[propertyName].ToString();
        if (typeMappings[returnType] != null)
            return typeMappings[returnType].ToString();
        if (child.IsParent)
            returnType = GetClassNameFromItem(child);

        return returnType;
    }

    private string FormatDefaultProperty(string propertyName, ApiItem child)
    {
        return String.Format("{0} = {1} = {2};\n\t\t\t", propertyName, propertyName + "_DefaultValue", MapDefaultValue(child));
    }

    private string FormatPropertyComparer(string propertyName, ApiItem child)
    {
        string simplePropertyFormat = "if ({0} != {1}) h.Add(\"{2}\",{0});\n\t\t\t";
        string complexPropertyFormat = "if ({0}.IsDirty()) h.Add(\"{1}\",{0}.ToHashtable());\n\t\t\t";

        if (propertyName == "Series" || propertyName == "Data")
            return "";

        if (child.IsParent)
            return String.Format(complexPropertyFormat, propertyName, FirstCharToLower(propertyName));
        else
            return String.Format(simplePropertyFormat, propertyName, propertyName + "_DefaultValue", FirstCharToLower(propertyName));
    }

    private void GenerateClassesForLevel(int level)
    {
        foreach (ApiItem item in apiItems)
        {
            if (item.Parents.Count == level && item.IsParent)
            {
                GenerateClass(item);
            }
        }
    }

    private List<ApiItem> FindImmediateChildren(ApiItem rootItem)
    {
        List<ApiItem> children = new List<ApiItem>();

        foreach (ApiItem item in apiItems)
        {
            int lastIndex = item.FullName.LastIndexOf('.');
            string parent = item.FullName;

            if (lastIndex > 0)
                parent = item.FullName.Substring(0, lastIndex);            
            
            if (parent == rootItem.FullName)
            {
                children.Add(item);
            }
        }

        return children;
    }

    private List<ApiItem> FindRootChildren()
    {
        List<ApiItem> children = new List<ApiItem>();
        foreach (ApiItem item in apiItems)
        {
            if (item.Parents.Count == 0)
            {
                children.Add(item);
            }
        }

        return children;
    }

    private void InitTypeMappings()
    {
        typeMappings.Add("String", "string");
        typeMappings.Add("Number", "double?");
        typeMappings.Add("Boolean", "bool?");
        typeMappings.Add("Function", "string");
        typeMappings.Add("Color", "string");
        typeMappings.Add("CSSObject", "NameValueCollection");
        typeMappings.Add("Array<Color>", "List<string>");
        typeMappings.Add("Number|String", "string");
        typeMappings.Add("String|Number", "string");
        typeMappings.Add("Array<String>", "List<string>"); 
        typeMappings.Add("Array<Number>", "List<double>"); 
    }

    private void InitPropertyMappings()
    {
        propertyTypeMappings.Add("Shadow", "Shadow");
        propertyTypeMappings.Add("PlotShadow", "Shadow");
        propertyTypeMappings.Add("Animation", "Animation");
        propertyTypeMappings.Add("PointPlacement", "PointPlacement");
        propertyTypeMappings.Add("Center", "new string[]");
        propertyTypeMappings.Add("Position", "NameValueCollection");
        propertyTypeMappings.Add("Attr", "NameValueCollection");
        propertyTypeMappings.Add("Stack", "string");
        propertyTypeMappings.Add("Background", "List<Background>");
        propertyTypeMappings.Add("MenuItems", "List<MenuItem>");
        propertyTypeMappings.Add("Crosshairs", "List<Crosshair>");
        propertyTypeMappings.Add("Stops", "List<Stop>");
        propertyTypeMappings.Add("RenderTo", "string");
        propertyTypeMappings.Add("Series", "List<Series>");
        propertyTypeMappings.Add("Data", "List<SeriesData>");
        //propertyTypeMappings.Add("Drilldown.Series", "List<Series>");
    }

    private void InitDefaultValueMappings()
    {
        defaultValueMappings.Add("Shadow", "new Shadow() { Enabled = false }");
        defaultValueMappings.Add("PlotShadow", "new Shadow() { Enabled = false }");
        defaultValueMappings.Add("Animation", "new Animation() { Enabled = true }");
        defaultValueMappings.Add("PointPlacement", "PointPlacement.Null");
        defaultValueMappings.Add("Colors", "new List<string>()");
        defaultValueMappings.Add("Series", "new List<Series>()");
        defaultValueMappings.Add("Data", "new List<SeriesData>()");
        defaultValueMappings.Add("Center", "new string[] { null, null }");
        defaultValueMappings.Add("Position", "new NameValueCollection()");
    }

    private void InitExcludedProperties()
    {
        excludedProperties.Add("Series");
        excludedProperties.Add("Spacing");
        excludedProperties.Add("Date");
    }


    private static string FirstCharToUpper(string input)
    {
        if (String.IsNullOrEmpty(input))
            throw new ArgumentException("String is empty");
        
        return input.First().ToString().ToUpper() + input.Substring(1);
    }

    private static string FirstCharToLower(string input)
    {
        if (String.IsNullOrEmpty(input))
            throw new ArgumentException("String is empty");

        return input.First().ToString().ToLower() + input.Substring(1);
    }


    public string MapDefaultValue(ApiItem item)
    {
        string defaults = item.Defaults;
        if (defaultValueMappings[FirstCharToUpper(item.Title)] != null)
        {
            defaults = defaultValueMappings[FirstCharToUpper(item.Title)].ToString();
        }

        if (!item.IsParent)
        {
            if (!String.IsNullOrEmpty(item.Defaults))
            {
                if (item.ReturnType == "String" ||
                    item.ReturnType == "Function" ||
                    item.ReturnType == "Color" ||
                    item.ReturnType == "String|Number" ||
                    item.ReturnType == "Number|String")
                {
                    return '"' + defaults.Replace("\"", "'") + '"';
                }
                if (item.ReturnType == "Array<String>")
                {
                    return "new List<string> " + item.Defaults
                                        .Replace("[", "{")
                                        .Replace("]", "}");
                }
                if ((propertyTypeMappings[FirstCharToUpper(item.Title)] != null &&
                    propertyTypeMappings[FirstCharToUpper(item.Title)].ToString() == "NameValueCollection") ||
                    (typeMappings[(item.ReturnType)] != null &&
                    typeMappings[(item.ReturnType)].ToString() == "NameValueCollection"))
                {
                    string result = "new NameValueCollection" + "{" + item.Defaults
                                                        .Replace(",", "},{")
                                                        .Replace(":", ",") + "}";
                    if (item.Title == "position")
                        result = result.Replace("0", "\"0\"");

                    return result;
                }
                if (item.ReturnType == "Number" && defaults == "undefined")
                    return "null";
            }
            else
            {
                if (item.ReturnType == "Number")
                    return "null";
            }

            if (defaults == "")
                return "\"\"";
            if (defaults == null)
                return "null";
        }
        else
        {
            //return String.Format("new {0}()", FirstCharToUpper(item.Title));
            if (defaultValueMappings[FirstCharToUpper(item.Title)] != null)
            {
                return defaultValueMappings[FirstCharToUpper(item.Title)].ToString();
            }
            return String.Format("new {0}()", GetClassNameFromItem(item));
            
        }

        return defaults;
    }

    public class ApiItem
    {
        public string FullName { get; set; }
        public string Title { get; set; }
        public string Parent { get; set; }
        public bool IsParent { get; set; }
        public string ReturnType { get; set; }
        public string Description { get; set; }
        public string Defaults { get; set; }
        public string [] Values { get; set; }

        // auxialiary and no part of the API
        public List<string> Parents { get; set; }
    }
}
