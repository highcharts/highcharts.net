{
	"doclet": {
		"description": "Copyright (c) Highsoft AS. All rights reserved.",
		"kind": "global",
		"name": ""
	},
	"meta": {
		"branch": "master",
		"commit": "7c5431802",
		"date": "Wed Dec 19 2018 11:29:12 GMT+0100 (CET)",
		"files": [
			{
				"path": "code/highcharts.src.js",
				"line": 0
			},
			{
				"path": "code/highcharts-3d.src.js",
				"line": 0
			},
			{
				"path": "code/highcharts-more.src.js",
				"line": 0
			},
			{
				"path": "code/modules/accessibility.src.js",
				"line": 0
			},
			{
				"path": "code/modules/arrow-symbols.src.js",
				"line": 0
			},
			{
				"path": "code/modules/boost.src.js",
				"line": 0
			},
			{
				"path": "code/modules/boost-canvas.src.js",
				"line": 0
			},
			{
				"path": "code/modules/broken-axis.src.js",
				"line": 0
			},
			{
				"path": "code/modules/bullet.src.js",
				"line": 0
			},
			{
				"path": "code/modules/current-date-indicator.src.js",
				"line": 0
			},
			{
				"path": "code/modules/data.src.js",
				"line": 0
			},
			{
				"path": "code/modules/drag-panes.src.js",
				"line": 0
			},
			{
				"path": "code/modules/draggable-points.src.js",
				"line": 0
			},
			{
				"path": "code/modules/drilldown.src.js",
				"line": 0
			},
			{
				"path": "code/modules/export-data.src.js",
				"line": 0
			},
			{
				"path": "code/modules/exporting.src.js",
				"line": 0
			},
			{
				"path": "code/modules/funnel.src.js",
				"line": 0
			},
			{
				"path": "code/modules/gantt.src.js",
				"line": 0
			},
			{
				"path": "code/modules/grid-axis.src.js",
				"line": 0
			},
			{
				"path": "code/modules/heatmap.src.js",
				"line": 0
			},
			{
				"path": "code/modules/histogram-bellcurve.src.js",
				"line": 0
			},
			{
				"path": "code/modules/item-series.src.js",
				"line": 0
			},
			{
				"path": "code/modules/map.src.js",
				"line": 0
			},
			{
				"path": "code/modules/map-parser.src.js",
				"line": 0
			},
			{
				"path": "code/modules/no-data-to-display.src.js",
				"line": 0
			},
			{
				"path": "code/modules/offline-exporting.src.js",
				"line": 0
			},
			{
				"path": "code/modules/oldie.src.js",
				"line": 0
			},
			{
				"path": "code/modules/overlapping-datalabels.src.js",
				"line": 0
			},
			{
				"path": "code/modules/parallel-coordinates.src.js",
				"line": 0
			},
			{
				"path": "code/modules/pareto.src.js",
				"line": 0
			},
			{
				"path": "code/modules/pathfinder.src.js",
				"line": 0
			},
			{
				"path": "code/modules/pattern-fill.src.js",
				"line": 0
			},
			{
				"path": "code/modules/sankey.src.js",
				"line": 0
			},
			{
				"path": "code/modules/series-label.src.js",
				"line": 0
			},
			{
				"path": "code/modules/solid-gauge.src.js",
				"line": 0
			},
			{
				"path": "code/modules/static-scale.src.js",
				"line": 0
			},
			{
				"path": "code/modules/stock.src.js",
				"line": 0
			},
			{
				"path": "code/modules/stock-tools.src.js",
				"line": 0
			},
			{
				"path": "code/modules/streamgraph.src.js",
				"line": 0
			},
			{
				"path": "code/modules/sunburst.src.js",
				"line": 0
			},
			{
				"path": "code/modules/tilemap.src.js",
				"line": 0
			},
			{
				"path": "code/modules/treegrid.src.js",
				"line": 0
			},
			{
				"path": "code/modules/treemap.src.js",
				"line": 0
			},
			{
				"path": "code/modules/variable-pie.src.js",
				"line": 0
			},
			{
				"path": "code/modules/variwide.src.js",
				"line": 0
			},
			{
				"path": "code/modules/vector.src.js",
				"line": 0
			},
			{
				"path": "code/modules/windbarb.src.js",
				"line": 0
			},
			{
				"path": "code/modules/wordcloud.src.js",
				"line": 0
			},
			{
				"path": "code/indicators/indicators.src.js",
				"line": 0
			},
			{
				"path": "code/indicators/acceleration-bands.src.js",
				"line": 0
			},
			{
				"path": "code/indicators/accumulation-distribution.src.js",
				"line": 0
			},
			{
				"path": "code/indicators/ao.src.js",
				"line": 0
			},
			{
				"path": "code/indicators/apo.src.js",
				"line": 0
			},
			{
				"path": "code/indicators/aroon-oscillator.src.js",
				"line": 0
			},
			{
				"path": "code/indicators/aroon.src.js",
				"line": 0
			},
			{
				"path": "code/indicators/atr.src.js",
				"line": 0
			},
			{
				"path": "code/indicators/bollinger-bands.src.js",
				"line": 0
			},
			{
				"path": "code/indicators/cci.src.js",
				"line": 0
			},
			{
				"path": "code/indicators/chaikin.src.js",
				"line": 0
			},
			{
				"path": "code/indicators/cmf.src.js",
				"line": 0
			},
			{
				"path": "code/indicators/dema.src.js",
				"line": 0
			},
			{
				"path": "code/indicators/dpo.src.js",
				"line": 0
			},
			{
				"path": "code/indicators/ema.src.js",
				"line": 0
			},
			{
				"path": "code/indicators/ichimoku-kinko-hyo.src.js",
				"line": 0
			},
			{
				"path": "code/indicators/keltner-channels.src.js",
				"line": 0
			},
			{
				"path": "code/indicators/macd.src.js",
				"line": 0
			},
			{
				"path": "code/indicators/mfi.src.js",
				"line": 0
			},
			{
				"path": "code/indicators/momentum.src.js",
				"line": 0
			},
			{
				"path": "code/indicators/natr.src.js",
				"line": 0
			},
			{
				"path": "code/indicators/pivot-points.src.js",
				"line": 0
			},
			{
				"path": "code/indicators/ppo.src.js",
				"line": 0
			},
			{
				"path": "code/indicators/price-channel.src.js",
				"line": 0
			},
			{
				"path": "code/indicators/price-envelopes.src.js",
				"line": 0
			},
			{
				"path": "code/indicators/psar.src.js",
				"line": 0
			},
			{
				"path": "code/indicators/roc.src.js",
				"line": 0
			},
			{
				"path": "code/indicators/rsi.src.js",
				"line": 0
			},
			{
				"path": "code/indicators/stochastic.src.js",
				"line": 0
			},
			{
				"path": "code/indicators/supertrend.src.js",
				"line": 0
			},
			{
				"path": "code/indicators/tema.src.js",
				"line": 0
			},
			{
				"path": "code/indicators/trix.src.js",
				"line": 0
			},
			{
				"path": "code/indicators/volume-by-price.src.js",
				"line": 0
			},
			{
				"path": "code/indicators/vwap.src.js",
				"line": 0
			},
			{
				"path": "code/indicators/williams-r.src.js",
				"line": 0
			},
			{
				"path": "code/indicators/wma.src.js",
				"line": 0
			},
			{
				"path": "code/indicators/zigzag.src.js",
				"line": 0
			}
		],
		"version": "7.0.1"
	},
	"children": [
		{
			"doclet": {
				"name": "GlobalSVGElement",
				"description": "Reference to the global SVGElement class as a workaround for a name conflict\nin the Highcharts namespace.",
				"kind": "typedef",
				"see": [
					"https://developer.mozilla.org/en-US/docs/Web/API/SVGElement"
				],
				"isGlobal": true,
				"types": [
					"global.SVGElement"
				]
			},
			"meta": {
				"files": [
					{
						"path": "code/highcharts.src.js",
						"line": 29
					}
				]
			}
		},
		{
			"doclet": {
				"name": "Highcharts",
				"description": "The Highcharts object is the placeholder for all other members, and various\nutility functions. The most important member of the namespace would be the\nchart constructor.",
				"kind": "namespace",
				"isGlobal": true
			},
			"meta": {
				"files": [
					{
						"path": "code/highcharts.src.js",
						"line": 0
					},
					{
						"path": "code/highcharts-3d.src.js",
						"line": 0
					},
					{
						"path": "code/highcharts-more.src.js",
						"line": 0
					},
					{
						"path": "code/modules/accessibility.src.js",
						"line": 0
					},
					{
						"path": "code/modules/arrow-symbols.src.js",
						"line": 0
					},
					{
						"path": "code/modules/boost.src.js",
						"line": 0
					},
					{
						"path": "code/modules/boost-canvas.src.js",
						"line": 0
					},
					{
						"path": "code/modules/broken-axis.src.js",
						"line": 0
					},
					{
						"path": "code/modules/bullet.src.js",
						"line": 0
					},
					{
						"path": "code/modules/current-date-indicator.src.js",
						"line": 0
					},
					{
						"path": "code/modules/data.src.js",
						"line": 0
					},
					{
						"path": "code/modules/drag-panes.src.js",
						"line": 0
					},
					{
						"path": "code/modules/draggable-points.src.js",
						"line": 0
					},
					{
						"path": "code/modules/drilldown.src.js",
						"line": 0
					},
					{
						"path": "code/modules/export-data.src.js",
						"line": 0
					},
					{
						"path": "code/modules/exporting.src.js",
						"line": 0
					},
					{
						"path": "code/modules/funnel.src.js",
						"line": 0
					},
					{
						"path": "code/modules/gantt.src.js",
						"line": 0
					},
					{
						"path": "code/modules/grid-axis.src.js",
						"line": 0
					},
					{
						"path": "code/modules/heatmap.src.js",
						"line": 0
					},
					{
						"path": "code/modules/histogram-bellcurve.src.js",
						"line": 0
					},
					{
						"path": "code/modules/item-series.src.js",
						"line": 0
					},
					{
						"path": "code/modules/map.src.js",
						"line": 0
					},
					{
						"path": "code/modules/map-parser.src.js",
						"line": 0
					},
					{
						"path": "code/modules/no-data-to-display.src.js",
						"line": 0
					},
					{
						"path": "code/modules/offline-exporting.src.js",
						"line": 0
					},
					{
						"path": "code/modules/oldie.src.js",
						"line": 0
					},
					{
						"path": "code/modules/overlapping-datalabels.src.js",
						"line": 0
					},
					{
						"path": "code/modules/parallel-coordinates.src.js",
						"line": 0
					},
					{
						"path": "code/modules/pareto.src.js",
						"line": 0
					},
					{
						"path": "code/modules/pathfinder.src.js",
						"line": 0
					},
					{
						"path": "code/modules/pattern-fill.src.js",
						"line": 0
					},
					{
						"path": "code/modules/sankey.src.js",
						"line": 0
					},
					{
						"path": "code/modules/series-label.src.js",
						"line": 0
					},
					{
						"path": "code/modules/solid-gauge.src.js",
						"line": 0
					},
					{
						"path": "code/modules/static-scale.src.js",
						"line": 0
					},
					{
						"path": "code/modules/stock.src.js",
						"line": 0
					},
					{
						"path": "code/modules/stock-tools.src.js",
						"line": 0
					},
					{
						"path": "code/modules/streamgraph.src.js",
						"line": 0
					},
					{
						"path": "code/modules/sunburst.src.js",
						"line": 0
					},
					{
						"path": "code/modules/tilemap.src.js",
						"line": 0
					},
					{
						"path": "code/modules/treegrid.src.js",
						"line": 0
					},
					{
						"path": "code/modules/treemap.src.js",
						"line": 0
					},
					{
						"path": "code/modules/variable-pie.src.js",
						"line": 0
					},
					{
						"path": "code/modules/variwide.src.js",
						"line": 0
					},
					{
						"path": "code/modules/vector.src.js",
						"line": 0
					},
					{
						"path": "code/modules/windbarb.src.js",
						"line": 0
					},
					{
						"path": "code/modules/wordcloud.src.js",
						"line": 0
					},
					{
						"path": "code/indicators/indicators.src.js",
						"line": 0
					},
					{
						"path": "code/indicators/acceleration-bands.src.js",
						"line": 0
					},
					{
						"path": "code/indicators/accumulation-distribution.src.js",
						"line": 0
					},
					{
						"path": "code/indicators/ao.src.js",
						"line": 0
					},
					{
						"path": "code/indicators/apo.src.js",
						"line": 0
					},
					{
						"path": "code/indicators/aroon-oscillator.src.js",
						"line": 0
					},
					{
						"path": "code/indicators/aroon.src.js",
						"line": 0
					},
					{
						"path": "code/indicators/atr.src.js",
						"line": 0
					},
					{
						"path": "code/indicators/bollinger-bands.src.js",
						"line": 0
					},
					{
						"path": "code/indicators/cci.src.js",
						"line": 0
					},
					{
						"path": "code/indicators/chaikin.src.js",
						"line": 0
					},
					{
						"path": "code/indicators/cmf.src.js",
						"line": 0
					},
					{
						"path": "code/indicators/dema.src.js",
						"line": 0
					},
					{
						"path": "code/indicators/dpo.src.js",
						"line": 0
					},
					{
						"path": "code/indicators/ema.src.js",
						"line": 0
					},
					{
						"path": "code/indicators/ichimoku-kinko-hyo.src.js",
						"line": 0
					},
					{
						"path": "code/indicators/keltner-channels.src.js",
						"line": 0
					},
					{
						"path": "code/indicators/macd.src.js",
						"line": 0
					},
					{
						"path": "code/indicators/mfi.src.js",
						"line": 0
					},
					{
						"path": "code/indicators/momentum.src.js",
						"line": 0
					},
					{
						"path": "code/indicators/natr.src.js",
						"line": 0
					},
					{
						"path": "code/indicators/pivot-points.src.js",
						"line": 0
					},
					{
						"path": "code/indicators/ppo.src.js",
						"line": 0
					},
					{
						"path": "code/indicators/price-channel.src.js",
						"line": 0
					},
					{
						"path": "code/indicators/price-envelopes.src.js",
						"line": 0
					},
					{
						"path": "code/indicators/psar.src.js",
						"line": 0
					},
					{
						"path": "code/indicators/roc.src.js",
						"line": 0
					},
					{
						"path": "code/indicators/rsi.src.js",
						"line": 0
					},
					{
						"path": "code/indicators/stochastic.src.js",
						"line": 0
					},
					{
						"path": "code/indicators/supertrend.src.js",
						"line": 0
					},
					{
						"path": "code/indicators/tema.src.js",
						"line": 0
					},
					{
						"path": "code/indicators/trix.src.js",
						"line": 0
					},
					{
						"path": "code/indicators/volume-by-price.src.js",
						"line": 0
					},
					{
						"path": "code/indicators/vwap.src.js",
						"line": 0
					},
					{
						"path": "code/indicators/williams-r.src.js",
						"line": 0
					},
					{
						"path": "code/indicators/wma.src.js",
						"line": 0
					},
					{
						"path": "code/indicators/zigzag.src.js",
						"line": 0
					}
				]
			},
			"children": [
				{
					"doclet": {
						"name": "Highcharts.AjaxSettings",
						"description": "",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/data.src.js",
								"line": 30
							},
							{
								"path": "code/modules/export-data.src.js",
								"line": 30
							},
							{
								"path": "code/modules/map-parser.src.js",
								"line": 29
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.AjaxSettings.data",
								"description": "The payload to send.",
								"kind": "member",
								"types": [
									"object"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/data.src.js",
										"line": 30
									},
									{
										"path": "code/modules/export-data.src.js",
										"line": 30
									},
									{
										"path": "code/modules/map-parser.src.js",
										"line": 29
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AjaxSettings.dataType",
								"description": "The data type expected.",
								"kind": "member",
								"types": [
									"\"json\"",
									"\"xml\"",
									"\"text\"",
									"\"octet\""
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/data.src.js",
										"line": 30
									},
									{
										"path": "code/modules/export-data.src.js",
										"line": 30
									},
									{
										"path": "code/modules/map-parser.src.js",
										"line": 29
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AjaxSettings.error",
								"description": "Function to call on error.",
								"kind": "member",
								"types": [
									"function"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/data.src.js",
										"line": 30
									},
									{
										"path": "code/modules/export-data.src.js",
										"line": 30
									},
									{
										"path": "code/modules/map-parser.src.js",
										"line": 29
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AjaxSettings.headers",
								"description": "The headers; keyed on header name.",
								"kind": "member",
								"types": [
									"object"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/data.src.js",
										"line": 30
									},
									{
										"path": "code/modules/export-data.src.js",
										"line": 30
									},
									{
										"path": "code/modules/map-parser.src.js",
										"line": 29
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AjaxSettings.success",
								"description": "Function to call on success.",
								"kind": "member",
								"types": [
									"function"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/data.src.js",
										"line": 30
									},
									{
										"path": "code/modules/export-data.src.js",
										"line": 30
									},
									{
										"path": "code/modules/map-parser.src.js",
										"line": 29
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AjaxSettings.type",
								"description": "The verb to use.",
								"kind": "member",
								"types": [
									"\"get\"",
									"\"post\"",
									"\"update\"",
									"\"delete\""
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/data.src.js",
										"line": 30
									},
									{
										"path": "code/modules/export-data.src.js",
										"line": 30
									},
									{
										"path": "code/modules/map-parser.src.js",
										"line": 29
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AjaxSettings.url",
								"description": "The URL to call.",
								"kind": "member",
								"types": [
									"string"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/data.src.js",
										"line": 30
									},
									{
										"path": "code/modules/export-data.src.js",
										"line": 30
									},
									{
										"path": "code/modules/map-parser.src.js",
										"line": 29
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.AlignObject",
						"description": "Options to align the element relative to the chart or another box.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 3145
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.AlignObject.align",
								"description": "Horizontal alignment. Can be one of `left`, `center` and `right`.",
								"kind": "member",
								"defaultValue": "left",
								"types": [
									"string",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3145
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AlignObject.alignByTranslate",
								"description": "Use the `transform` attribute with translateX and translateY custom\nattributes to align this elements rather than `x` and `y` attributes.",
								"kind": "member",
								"defaultValue": "false",
								"types": [
									"boolean",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3145
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AlignObject.verticalAlign",
								"description": "Vertical alignment. Can be one of `top`, `middle` and `bottom`.",
								"kind": "member",
								"defaultValue": "top",
								"types": [
									"string",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3145
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AlignObject.x",
								"description": "Horizontal pixel offset from alignment.",
								"kind": "member",
								"defaultValue": "0",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3145
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AlignObject.y",
								"description": "Vertical pixel offset from alignment.",
								"kind": "member",
								"defaultValue": "0",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3145
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.AnimationOptionsObject",
						"description": "An animation configuration. Animation configurations can also be defined as\nbooleans, where `false` turns off animation and `true` defaults to a duration\nof 500ms.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 115
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.AnimationOptionsObject.complete",
								"description": "A callback function to exectute when the animation finishes.",
								"kind": "member",
								"types": [
									"function",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 115
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AnimationOptionsObject.duration",
								"description": "The animation duration in milliseconds.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 115
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AnimationOptionsObject.easing",
								"description": "The name of an easing function as defined on the `Math` object.",
								"kind": "member",
								"types": [
									"string",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 115
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AnimationOptionsObject.step",
								"description": "A callback function to execute on each step of each attribute or CSS property\nthat's being animated. The first argument contains information about the\nanimation and progress.",
								"kind": "member",
								"types": [
									"function",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 115
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.Axis",
						"description": "Create a new axis object. Called internally when instanciating a new chart or\nadding axes by {@link Highcharts.Chart#addAxis}.\n\nA chart can have from 0 axes (pie chart) to multiples. In a normal, single\nseries cartesian chart, there is one X axis and one Y axis.\n\nThe X axis or axes are referenced by {@link Highcharts.Chart.xAxis}, which is\nan array of Axis objects. If there is only one axis, it can be referenced\nthrough `chart.xAxis[0]`, and multiple axes have increasing indices. The same\npattern goes for Y axes.\n\nIf you need to get the axes from a series object, use the `series.xAxis` and\n`series.yAxis` properties. These are not arrays, as one series can only be\nassociated to one X and one Y axis.\n\nA third way to reference the axis programmatically is by `id`. Add an `id` in\nthe axis configuration options, and get the axis by\n{@link Highcharts.Chart#get}.\n\nConfiguration options for the axes are given in options.xAxis and\noptions.yAxis.",
						"kind": "class"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 14093
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.Axis.addPlotBand",
								"description": "Add a plot band after render time.",
								"kind": "function",
								"parameters": {
									"options": {
										"description": "A configuration object for the plot band, as defined in\n       [xAxis.plotBands](https://api.highcharts.com/highcharts/xAxis.plotBands).",
										"types": [
											"Highcharts.AxisPlotBandsOptions"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.PlotLineOrBand",
										"undefined"
									],
									"description": "The added plot band."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 21515
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.addPlotLine",
								"description": "Add a plot line after render time.",
								"kind": "function",
								"parameters": {
									"options": {
										"description": "A configuration object for the plot line, as defined in\n       [xAxis.plotLines](https://api.highcharts.com/highcharts/xAxis.plotLines).",
										"types": [
											"Highcharts.AxisPlotLinesOptions"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.PlotLineOrBand",
										"undefined"
									],
									"description": "The added plot line."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 21534
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.addTitle",
								"description": "Adds the title defined in axis.options.title.",
								"kind": "function",
								"parameters": {
									"display": {
										"description": "Whether or not to display the title.",
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 19412
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.chart",
								"description": "The Chart that the axis belongs to.",
								"kind": "member",
								"types": [
									"Highcharts.Chart"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 17020
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.coll",
								"description": "The collection where the axis belongs, for example `xAxis`, `yAxis`\nor `colorAxis`. Corresponds to properties on Chart, for example\n{@link Chart.xAxis}.",
								"kind": "member",
								"types": [
									"string"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 17044
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.constructor",
								"description": "Create a new axis object. Called internally when instanciating a new chart or\nadding axes by {@link Highcharts.Chart#addAxis}.\n\nA chart can have from 0 axes (pie chart) to multiples. In a normal, single\nseries cartesian chart, there is one X axis and one Y axis.\n\nThe X axis or axes are referenced by {@link Highcharts.Chart.xAxis}, which is\nan array of Axis objects. If there is only one axis, it can be referenced\nthrough `chart.xAxis[0]`, and multiple axes have increasing indices. The same\npattern goes for Y axes.\n\nIf you need to get the axes from a series object, use the `series.xAxis` and\n`series.yAxis` properties. These are not arrays, as one series can only be\nassociated to one X and one Y axis.\n\nA third way to reference the axis programmatically is by `id`. Add an `id` in\nthe axis configuration options, and get the axis by\n{@link Highcharts.Chart#get}.\n\nConfiguration options for the axes are given in options.xAxis and\noptions.yAxis.",
								"kind": "constructor",
								"parameters": {
									"chart": {
										"description": "The Chart instance to apply the axis on.",
										"types": [
											"Highcharts.Chart"
										]
									},
									"options": {
										"description": "Axis options.",
										"types": [
											"Highcharts.AxisOptions"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 0
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.crosshair",
								"description": "The processed crosshair options.",
								"kind": "member",
								"types": [
									"boolean",
									"Highcharts.AxisCrosshairOptions"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 17178
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.drawCrosshair",
								"description": "Internal function to draw a crosshair.",
								"kind": "function",
								"fires": [
									"Highcharts.Axis#afterDrawCrosshair",
									"Highcharts.Axis#drawCrosshair"
								],
								"parameters": {
									"e": {
										"description": "The event arguments from the modified pointer event, extended with\n       `chartX` and `chartY`",
										"isOptional": true,
										"types": [
											"Highcharts.PointerEventObject"
										]
									},
									"point": {
										"description": "The Point object if the crosshair snaps to points.",
										"isOptional": true,
										"types": [
											"Highcharts.Point"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 20142
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.getExtremes",
								"description": "Get the current extremes for the axis.",
								"kind": "function",
								"return": {
									"types": [
										"Highcharts.ExtremesObject"
									],
									"description": "An object containing extremes information."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 18977
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.getLinePath",
								"description": "Internal function to get the path for the axis line. Extended for polar\ncharts.",
								"kind": "function",
								"parameters": {
									"lineWidth": {
										"description": "The line width in pixels.",
										"types": [
											"number"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGPathArray"
									],
									"description": "The SVG path definition in array form."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 19680
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.getLinearTickPositions",
								"description": "Internal function to et the tick positions of a linear axis to round\nvalues like whole tens or every five.",
								"kind": "function",
								"parameters": {
									"tickInterval": {
										"description": "The normalized tick interval.",
										"types": [
											"number"
										]
									},
									"min": {
										"description": "Axis minimum.",
										"types": [
											"number"
										]
									},
									"max": {
										"description": "Axis maximum.",
										"types": [
											"number"
										]
									}
								},
								"return": {
									"types": [
										"Array.<number>"
									],
									"description": "An array of axis values where ticks should be placed."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 17659
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.getMinorTickInterval",
								"description": "Resolve the new minorTicks/minorTickInterval options into the legacy\nloosely typed minorTickInterval option.",
								"kind": "function",
								"return": {
									"types": [
										"number",
										"\"auto\"",
										"null"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 17725
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.getMinorTickPositions",
								"description": "Internal function to return the minor tick positions. For logarithmic\naxes, the same logic as for major ticks is reused.",
								"kind": "function",
								"return": {
									"types": [
										"Array.<number>"
									],
									"description": "An array of axis values where ticks should be placed."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 17745
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.getPlotBandPath",
								"description": "Internal function to create the SVG path definition for a plot band.",
								"kind": "function",
								"parameters": {
									"from": {
										"description": "The axis value to start from.",
										"types": [
											"number"
										]
									},
									"to": {
										"description": "The axis value to end on.",
										"types": [
											"number"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGPathArray"
									],
									"description": "The SVG path definition in array form."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 21445
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.getPlotLinePath",
								"description": "Create the path for a plot line that goes from the given value on\nthis axis, across the plot to the opposite side. Also used internally for\ngrid lines and crosshairs.",
								"kind": "function",
								"parameters": {
									"value": {
										"description": "Axis value.",
										"types": [
											"number"
										]
									},
									"lineWidth": {
										"description": "Used for calculation crisp line coordinates.",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"old": {
										"description": "Use old coordinates (for resizing and rescaling).",
										"isOptional": true,
										"types": [
											"boolean"
										]
									},
									"force": {
										"description": "If `false`, the function will return null when it falls outside\n       the axis bounds. If `true`, the function will return a path\n       aligned to the plot area sides if it falls outside. If `pass`, it\n       will return a path outside.",
										"isOptional": true,
										"types": [
											"boolean",
											"string"
										]
									},
									"translatedValue": {
										"description": "If given, return the plot line path of a pixel position on the\n       axis.",
										"isOptional": true,
										"types": [
											"number"
										]
									}
								},
								"return": {
									"types": [
										"Array.<(string|number)>"
									],
									"description": "The SVG path definition for the plot line."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 17571
									}
								]
							},
							"children": [
								{
									"doclet": {
										"name": "Highcharts.Axis.getPlotLinePath.between",
										"description": "Check if x is between a and b. If not, either move to a/b\nor skip, depending on the force parameter.",
										"kind": "function",
										"return": {
											"types": [
												"void"
											]
										}
									},
									"meta": {
										"files": [
											{
												"path": "code/highcharts.src.js",
												"line": 17617
											}
										]
									}
								}
							]
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.getThreshold",
								"description": "Get the zero plane either based on zero or on the min or max value.\nUsed in bar and area plots.",
								"kind": "function",
								"parameters": {
									"threshold": {
										"description": "The threshold in axis values.",
										"types": [
											"number"
										]
									}
								},
								"return": {
									"types": [
										"number"
									],
									"description": "The translated threshold position in terms of pixels, and\n        corrected to stay within the axis bounds."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 19004
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.hasData",
								"description": "Return true if the axis has associated data.",
								"kind": "function",
								"return": {
									"types": [
										"boolean"
									],
									"description": "True if the axis has associated visible series and those series\n        have either valid data points or explicit `min` and `max`\n        settings."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 19390
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.hideCrosshair",
								"description": "Hide the crosshair if visible.",
								"kind": "function",
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 20272
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.horiz",
								"description": "Whether the axis is horizontal.",
								"kind": "member",
								"types": [
									"boolean"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 17028
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.init",
								"description": "Overrideable function to initialize the axis.",
								"kind": "function",
								"see": [
									"{@link Axis}"
								],
								"fires": [
									"Highcharts.Axis#afterInit",
									"Highcharts.Axis#init"
								],
								"parameters": {
									"chart": {
										"types": [
											"Highcharts.Chart"
										]
									},
									"userOptions": {
										"types": [
											"Highcharts.Options"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 17000
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.isXAxis",
								"description": "Whether the axis is the x-axis.",
								"kind": "member",
								"types": [
									"boolean",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 17036
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.max",
								"description": "The maximum value of the axis. In a logarithmic axis, this is the\nlogarithm of the real value, and the real value can be obtained from\n{@link Axis#getExtremes}.",
								"kind": "member",
								"types": [
									"number",
									"null"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 17158
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.min",
								"description": "The minimum value of the axis. In a logarithmic axis, this is the\nlogarithm of the real value, and the real value can be obtained from\n{@link Axis#getExtremes}.",
								"kind": "member",
								"types": [
									"number",
									"null"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 17168
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.remove",
								"description": "Remove the axis from the chart.",
								"kind": "function",
								"parameters": {
									"redraw": {
										"description": "Whether to redraw the chart following the remove.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 36737
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.removePlotBand",
								"description": "Remove a plot band by its id.",
								"kind": "function",
								"parameters": {
									"id": {
										"description": "The plot band's `id` as given in the original configuration\n       object or in the `addPlotBand` option.",
										"types": [
											"string"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 21617
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.removePlotLine",
								"description": "Remove a plot line by its id.",
								"kind": "function",
								"parameters": {
									"id": {
										"description": "The plot line's `id` as given in the original configuration\n       object or in the `addPlotLine` option.",
										"types": [
											"string"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 21635
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.renderLine",
								"description": "Render the axis line. Called internally when rendering and redrawing the\naxis.",
								"kind": "function",
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 19724
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.renderMinorTick",
								"description": "Render a minor tick into the given position. If a minor tick already\nexists in this position, move it.",
								"kind": "function",
								"parameters": {
									"pos": {
										"description": "The position in axis values.",
										"types": [
											"number"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 19806
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.renderTick",
								"description": "Render a major tick into the given position. If a tick already exists\nin this position, move it.",
								"kind": "function",
								"parameters": {
									"pos": {
										"description": "The position in axis values.",
										"types": [
											"number"
										]
									},
									"i": {
										"description": "The tick index.",
										"types": [
											"number"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 19831
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.reversed",
								"description": "Whether the axis is reversed. Based on the `axis.reversed`,\noption, but inverted charts have reversed xAxis by default.",
								"kind": "member",
								"types": [
									"boolean"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 17086
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.series",
								"description": "All series associated to the axis.",
								"kind": "member",
								"types": [
									"Array.<Highcharts.Series>"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 17203
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.setCategories",
								"description": "Set new axis categories and optionally redraw.",
								"kind": "function",
								"parameters": {
									"categories": {
										"description": "The new categories.",
										"types": [
											"Array.<string>"
										]
									},
									"redraw": {
										"description": "Whether to redraw the chart.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 36800
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.setCompare",
								"description": "Highstock only. Set the compare mode on all series belonging to an Y axis\nafter render time.",
								"kind": "function",
								"see": [
									"[series.plotOptions.compare](https://api.highcharts.com/highstock/series.plotOptions.compare)"
								],
								"parameters": {
									"compare": {
										"description": "The compare mode. Can be one of `null`, `\"value\"` or `\"percent\"`.",
										"types": [
											"string"
										]
									},
									"redraw": {
										"description": "Whether to redraw the chart or to wait for a later call to\n       {@link Chart#redraw}.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/stock.src.js",
										"line": 10618
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.setDataGrouping",
								"description": "Highstock only. Force data grouping on all the axis' series.",
								"kind": "function",
								"products": [
									"highstock"
								],
								"parameters": {
									"dataGrouping": {
										"description": "A `dataGrouping` configuration. Use `false` to disable data grouping\n       dynamically.",
										"isOptional": true,
										"types": [
											"boolean",
											"Highcharts.PlotSeriesDataGroupingOptions"
										]
									},
									"redraw": {
										"description": "Whether to redraw the chart or wait for a later call to\n       {@link Chart#redraw}.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/stock.src.js",
										"line": 2423
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.setExtremes",
								"description": "Set the minimum and maximum of the axes after render time. If the\n`startOnTick` and `endOnTick` options are true, the minimum and maximum\nvalues are rounded off to the nearest tick. To prevent this, these\noptions can be set to false before calling setExtremes. Also, setExtremes\nwill not allow a range lower than the `minRange` option, which by default\nis the range of five points.",
								"kind": "function",
								"fires": [
									"Highcharts.Axis#setExtremes"
								],
								"parameters": {
									"newMin": {
										"description": "The new minimum value.",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"newMax": {
										"description": "The new maximum value.",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"redraw": {
										"description": "Whether to redraw the chart or wait for an explicit call to\n       {@link Highcharts.Chart#redraw}",
										"isOptional": true,
										"types": [
											"boolean"
										]
									},
									"animation": {
										"description": "Enable or modify animations.",
										"isOptional": true,
										"types": [
											"boolean",
											"Highcharts.AnimationOptionsObject"
										]
									},
									"eventArguments": {
										"description": "Arguments to be accessed in event handler.",
										"isOptional": true,
										"types": [
											"*"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 18815
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.setParallelPosition",
								"description": "Set predefined left+width and top+height (inverted) for yAxes. This\nmethod modifies options param.",
								"kind": "function",
								"parameters": {
									"axisPosition": {
										"description": "['left', 'width', 'height', 'top'] or\n        ['top', 'height', 'width', 'left'] for an inverted chart.",
										"types": [
											"Array.<string>"
										]
									},
									"options": {
										"description": "{@link Highcharts.Axis#options}.",
										"types": [
											"Highcharts.AxisOptions"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/parallel-coordinates.src.js",
										"line": 313
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.setTickPositions",
								"description": "Now we have computed the normalized tickInterval, get the tick positions",
								"kind": "function",
								"fires": [
									"Highcharts.Axis#afterSetTickPositions"
								],
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 18421
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.setTitle",
								"description": "Update the axis title by options after render time.",
								"kind": "function",
								"parameters": {
									"titleOptions": {
										"description": "The additional title options.",
										"types": [
											"Highcharts.XAxisTitleOptions",
											"Highcharts.YAxisTitleOptions",
											"Highcharts.ZAxisTitleOptions"
										]
									},
									"redraw": {
										"description": "Whether to redraw the chart after setting the title.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 36782
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.side",
								"description": "The side on which the axis is rendered. 0 is top, 1 is right, 2 is\nbottom and 3 is left.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 17058
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.toPixels",
								"description": "Translate a value in terms of axis units into pixels within the chart.",
								"kind": "function",
								"parameters": {
									"value": {
										"description": "A value in terms of axis units.",
										"types": [
											"number"
										]
									},
									"paneCoordinates": {
										"description": "Whether to return the pixel coordinate relative to the chart or\n       just the axis/pane itself.",
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"number"
									],
									"description": "Pixel position of the value on the chart or axis."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 17525
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.toValue",
								"description": "Translate a pixel position along the axis to a value in terms of axis\nunits.",
								"kind": "function",
								"parameters": {
									"pixel": {
										"description": "The pixel value coordinate.",
										"types": [
											"number"
										]
									},
									"paneCoordiantes": {
										"description": "Whether the input pixel is relative to the chart or just the\n       axis/pane itself.",
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"number"
									],
									"description": "The axis value."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 17545
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.update",
								"description": "Update an axis object with a new set of options. The options are merged\nwith the existing options, so only new or altered options need to be\nspecified.",
								"kind": "function",
								"parameters": {
									"options": {
										"description": "The new options that will be merged in with existing options on\n       the axis.",
										"types": [
											"Highcharts.XAxisOptions",
											"Highcharts.YAxisOptions",
											"Highcharts.ZAxisOptions"
										]
									},
									"redraw": {
										"description": "Whether to redraw the chart after the axis is altered. If doing\n       more operations on the chart, it is a good idea to set redraw to\n       false and call {@link Chart#redraw} after.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 36686
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.AxisCrosshairOptions",
						"description": "Options for crosshairs on axes.",
						"kind": "typedef",
						"types": [
							"Highcharts.XAxisCrosshairOptions",
							"Highcharts.YAxisCrosshairOptions"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 13920
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.AxisEventCallbackFunction",
						"description": "",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"this": {
								"types": [
									"Highcharts.Axis"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 13914
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.AxisLabelsFormatterContextObject",
						"description": "",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 13926
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.AxisLabelsFormatterContextObject.axis",
								"description": "",
								"kind": "member",
								"types": [
									"Highcharts.Axis"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 13926
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AxisLabelsFormatterContextObject.chart",
								"description": "",
								"kind": "member",
								"types": [
									"Highcharts.Chart"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 13926
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AxisLabelsFormatterContextObject.isFirst",
								"description": "",
								"kind": "member",
								"types": [
									"boolean"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 13926
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AxisLabelsFormatterContextObject.isLast",
								"description": "",
								"kind": "member",
								"types": [
									"boolean"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 13926
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AxisLabelsFormatterContextObject.value",
								"description": "",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 13926
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.AxisOptions",
						"description": "Options for axes.",
						"kind": "typedef",
						"types": [
							"Highcharts.XAxisOptions",
							"Highcharts.YAxisOptions",
							"Highcharts.ZAxisOptions"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 13945
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.AxisPlotBandsLabelOptions",
						"description": "Options for plot band labels on axes.",
						"kind": "typedef",
						"types": [
							"Highcharts.XAxisPlotBandsLabelOptions",
							"Highcharts.YAxisPlotBandsLabelOptions",
							"Highcharts.ZAxisPlotBandsLabelOptions"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 20603
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.AxisPlotBandsOptions",
						"description": "Options for plot bands on axes.",
						"kind": "typedef",
						"types": [
							"Highcharts.XAxisPlotBandsOptions",
							"Highcharts.YAxisPlotBandsOptions",
							"Highcharts.ZAxisPlotBandsOptions"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 20597
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.AxisPlotLinesLabelOptions",
						"description": "Options for plot line labels on axes.",
						"kind": "typedef",
						"types": [
							"Highcharts.XAxisPlotLinesLabelOptions",
							"Highcharts.YAxisPlotLinesLabelOptions",
							"Highcharts.ZAxisPlotLinesLabelOptions"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 20615
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.AxisPlotLinesOptions",
						"description": "Options for plot lines on axes.",
						"kind": "typedef",
						"types": [
							"Highcharts.XAxisPlotLinesOptions",
							"Highcharts.YAxisPlotLinesOptions",
							"Highcharts.ZAxisPlotLinesOptions"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 20609
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.AxisPointBreakEventCallbackFunction",
						"description": "",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"this": {
								"types": [
									"Highcharts.Axis"
								]
							},
							"event": {
								"types": [
									"Highcharts.AxisPointBreakEventObject"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 13988
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.AxisPointBreakEventObject",
						"description": "",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 13996
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.AxisPointBreakEventObject.brk",
								"description": "",
								"kind": "member",
								"types": [
									"Highcharts.Dictionary.<number>"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 13996
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AxisPointBreakEventObject.point",
								"description": "",
								"kind": "member",
								"types": [
									"Highcharts.Point"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 13996
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AxisPointBreakEventObject.preventDefault",
								"description": "",
								"kind": "member",
								"types": [
									"function"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 13996
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AxisPointBreakEventObject.target",
								"description": "",
								"kind": "member",
								"types": [
									"Highcharts.SVGElement"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 13996
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AxisPointBreakEventObject.type",
								"description": "",
								"kind": "member",
								"types": [
									"\"pointBreak\"",
									"\"pointInBreak\""
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 13996
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.AxisSetExtremesEventCallbackFunction",
						"description": "",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"this": {
								"types": [
									"Highcharts.Axis"
								]
							},
							"event": {
								"types": [
									"Highcharts.AxisSetExtremesEventObject"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 14015
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.AxisSetExtremesEventObject",
						"description": "",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 14023
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.AxisSetExtremesEventObject.dataMax",
								"description": "",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 14023
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AxisSetExtremesEventObject.dataMin",
								"description": "",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 14023
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AxisSetExtremesEventObject.max",
								"description": "",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 14023
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AxisSetExtremesEventObject.min",
								"description": "",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 14023
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AxisSetExtremesEventObject.preventDefault",
								"description": "",
								"kind": "member",
								"types": [
									"function"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 14023
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AxisSetExtremesEventObject.target",
								"description": "",
								"kind": "member",
								"types": [
									"Highcharts.SVGElement"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 14023
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AxisSetExtremesEventObject.trigger",
								"description": "",
								"kind": "member",
								"types": [
									"string"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 14023
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AxisSetExtremesEventObject.type",
								"description": "",
								"kind": "member",
								"types": [
									"\"setExtremes\""
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 14023
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AxisSetExtremesEventObject.userMax",
								"description": "",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 14023
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AxisSetExtremesEventObject.userMin",
								"description": "",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 14023
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.AxisTickPositionerCallbackFunction",
						"description": "",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"this": {
								"types": [
									"Highcharts.Axis"
								]
							}
						},
						"return": {
							"types": [
								"Array.<number>"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 14057
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.BBoxObject",
						"description": "Bounding box of an element.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 3187
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.BBoxObject.height",
								"description": "Height of the bounding box.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3187
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.BBoxObject.width",
								"description": "Width of the bounding box.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3187
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.BBoxObject.x",
								"description": "Horizontal position of the bounding box.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3187
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.BBoxObject.y",
								"description": "Vertical position of the bounding box.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3187
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.CSSObject",
						"description": "A style object with camel case property names to define visual appearance of\na SVG element or HTML element. The properties can be whatever styles are\nsupported on the given SVG or HTML element.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 141
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.CSSObject.[key:string]",
								"description": "",
								"kind": "member",
								"types": [
									"boolean",
									"number",
									"string",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 141
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.CSSObject.background",
								"description": "Background style for the element.",
								"kind": "member",
								"types": [
									"string",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 141
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.CSSObject.backgroundColor",
								"description": "Background color of the element.",
								"kind": "member",
								"types": [
									"Highcharts.ColorString",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 141
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.CSSObject.border",
								"description": "Border style for the element.",
								"kind": "member",
								"types": [
									"string",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 141
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.CSSObject.borderRadius",
								"description": "Radius of the element border.",
								"kind": "member",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 141
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.CSSObject.color",
								"description": "Color used in the element. The \"contrast\" option is a Highcharts custom\nproperty that results in black or white, depending on the background of the\nelement.",
								"kind": "member",
								"types": [
									"\"contrast\"",
									"Highcharts.ColorString",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 141
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.CSSObject.cursor",
								"description": "Style of the mouse cursor when resting over the element.",
								"kind": "member",
								"types": [
									"Highcharts.CursorType",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 141
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.CSSObject.fontFamily",
								"description": "Font family of the element text. Multiple values have to be in decreasing\npreference order and separated by comma.",
								"kind": "member",
								"types": [
									"string",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 141
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.CSSObject.fontSize",
								"description": "Font size of the element text.",
								"kind": "member",
								"types": [
									"string",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 141
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.CSSObject.fontWeight",
								"description": "Font weight of the element text.",
								"kind": "member",
								"types": [
									"string",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 141
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.CSSObject.height",
								"description": "Height of the element.",
								"kind": "member",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 141
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.CSSObject.lineWidth",
								"description": "Width of the element border.",
								"kind": "member",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 141
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.CSSObject.opacity",
								"description": "Opacity of the element.",
								"kind": "member",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 141
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.CSSObject.padding",
								"description": "Space around the element content.",
								"kind": "member",
								"types": [
									"string",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 141
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.CSSObject.pointerEvents",
								"description": "Behaviour of the element when the mouse cursor rests over it.",
								"kind": "member",
								"types": [
									"string",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 141
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.CSSObject.position",
								"description": "Positioning of the element.",
								"kind": "member",
								"types": [
									"string",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 141
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.CSSObject.textAlign",
								"description": "Alignment of the element text.",
								"kind": "member",
								"types": [
									"string",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 141
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.CSSObject.textDecoration",
								"description": "Additional decoration of the element text.",
								"kind": "member",
								"types": [
									"string",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 141
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.CSSObject.textOutline",
								"description": "Outline style of the element text.",
								"kind": "member",
								"types": [
									"string",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 141
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.CSSObject.textOverflow",
								"description": "Line break style of the element text. Highcharts SVG elements support\n`ellipsis` when a `width` is set.",
								"kind": "member",
								"types": [
									"string",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 141
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.CSSObject.top",
								"description": "Top spacing of the element relative to the parent element.",
								"kind": "member",
								"types": [
									"string",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 141
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.CSSObject.transition",
								"description": "Animated transition of selected element properties.",
								"kind": "member",
								"types": [
									"string",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 141
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.CSSObject.whiteSpace",
								"description": "Line break style of the element text.",
								"kind": "member",
								"types": [
									"string",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 141
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.CSSObject.width",
								"description": "Width of the element.",
								"kind": "member",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 141
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.Chart",
						"description": "The Chart class. The recommended constructor is {@link Highcharts#chart}.",
						"kind": "class"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 26276
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.Chart.addAxis",
								"description": "Add an axis to the chart after render time. Note that this method should\nnever be used when adding data synchronously at chart render time, as it\nadds expense to the calculations and rendering. When adding data at the\nsame time as the chart is initialized, add the axis as a configuration\noption instead.",
								"kind": "function",
								"parameters": {
									"options": {
										"description": "The axis options.",
										"types": [
											"Highcharts.XAxisOptions",
											"Highcharts.YAxisOptions",
											"Highcharts.ZAxisOptions"
										]
									},
									"isX": {
										"description": "Whether it is an X axis or a value axis.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									},
									"redraw": {
										"description": "Whether to redraw the chart after adding.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									},
									"animation": {
										"description": "Whether and how to apply animation in the redraw.",
										"isOptional": true,
										"types": [
											"boolean",
											"Highcharts.AnimationOptionsObject"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.Axis"
									],
									"description": "The newly generated Axis object."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 35651
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.addCredits",
								"description": "Set a new credits label for the chart.",
								"kind": "function",
								"parameters": {
									"options": {
										"description": "A configuration object for the new credits.",
										"types": [
											"Highcharts.CreditsOptions"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 28213
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.addSeries",
								"description": "Add a series to the chart after render time. Note that this method should\nnever be used when adding data synchronously at chart render time, as it\nadds expense to the calculations and rendering. When adding data at the\nsame time as the chart is initialized, add the series as a configuration\noption instead. With multiple axes, the `offset` is dynamically adjusted.",
								"kind": "function",
								"fires": [
									"Highcharts.Chart#addSeries",
									"Highcharts.Chart#afterAddSeries"
								],
								"parameters": {
									"options": {
										"description": "The config options for the series.",
										"types": [
											"Highcharts.SeriesOptionsType"
										]
									},
									"redraw": {
										"description": "Whether to redraw the chart after adding.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									},
									"animation": {
										"description": "Whether to apply animation, and optionally animation\n       configuration.",
										"isOptional": true,
										"types": [
											"boolean",
											"Highcharts.AnimationOptionsObject"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.Series"
									],
									"description": "The newly created series object."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 35597
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.addSeriesAsDrilldown",
								"description": "Add a series to the chart as drilldown from a specific point in the parent\nseries. This method is used for async drilldown, when clicking a point in a\nseries should result in loading and displaying a more high-resolution series.\nWhen not async, the setup is simpler using the\n[drilldown.series](https://api.highcharts.com/highcharts/drilldown.series)\noptions structure.",
								"kind": "function",
								"parameters": {
									"point": {
										"description": "The point from which the drilldown will start.",
										"types": [
											"Highcharts.Point"
										]
									},
									"options": {
										"description": "The series options for the new, detailed series.",
										"types": [
											"Highcharts.SeriesOptionsType"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/drilldown.src.js",
										"line": 480
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.axes",
								"description": "All the axes in the chart.",
								"kind": "member",
								"see": [
									"Highcharts.Chart.xAxis",
									"Highcharts.Chart.yAxis"
								],
								"types": [
									"Array.<Highcharts.Axis>"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 26451
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.chartHeight",
								"description": "The current pixel height of the chart.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 27158
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.chartWidth",
								"description": "The current pixel width of the chart.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 27148
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.collectionsWithUpdate",
								"description": "These collections (arrays) implement update() methods with support for\none-to-one option.",
								"kind": "member"
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 35862
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.constructor",
								"description": "The Chart class. The recommended constructor is {@link Highcharts#chart}.",
								"kind": "constructor",
								"parameters": {
									"renderTo": {
										"description": "The DOM element to render to, or its id.",
										"isOptional": true,
										"types": [
											"string",
											"Highcharts.HTMLDOMElement"
										]
									},
									"options": {
										"description": "The chart options structure.",
										"types": [
											"Highcharts.Options"
										]
									},
									"callback": {
										"description": "Function to run when the chart has loaded and and all external images\n       are loaded. Defining a\n       [chart.event.load](https://api.highcharts.com/highcharts/chart.events.load)\n       handler is equivalent.",
										"isOptional": true,
										"types": [
											"Highcharts.ChartCallbackFunction"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 0
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.container",
								"description": "The containing HTML element of the chart. The container is\ndynamically inserted into the element given as the `renderTo`\nparameter in the {@link Highcharts#chart} constructor.",
								"kind": "member",
								"types": [
									"Highcharts.HTMLDOMElement"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 27349
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.credits",
								"description": "The chart's credits label. The label has an `update` method that\nallows setting new options as per the\n[credits options set](https://api.highcharts.com/highcharts/credits).",
								"kind": "member",
								"types": [
									"Highcharts.SVGElement"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 28230
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.data",
								"description": "The data parser for this chart.",
								"kind": "member",
								"types": [
									"Highcharts.Data",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/data.src.js",
										"line": 2329
									},
									{
										"path": "code/modules/map-parser.src.js",
										"line": 2328
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.destroy",
								"description": "Remove the chart and purge memory. This method is called internally\nbefore adding a second chart into the same container, as well as on\nwindow unload to prevent leaks.",
								"kind": "function",
								"fires": [
									"Highcharts.Chart#destroy"
								],
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 28271
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.drillUp",
								"description": "When the chart is drilled down to a child series, calling `chart.drillUp()`\nwill drill up to the parent series. Requires the drilldown module.",
								"kind": "function",
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/drilldown.src.js",
										"line": 689
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.exportChart",
								"description": "Exporting module required. Submit an SVG version of the chart to a server\nalong with some parameters for conversion.",
								"kind": "function",
								"parameters": {
									"exportingOptions": {
										"description": "Exporting options in addition to those defined in\n       [exporting](https://api.highcharts.com/highcharts/exporting).",
										"types": [
											"Highcharts.ExportingOptions"
										]
									},
									"chartOptions": {
										"description": "Additional chart options for the exported chart. For example a\n       different background color can be added here, or `dataLabels` for\n       export only.",
										"types": [
											"Highcharts.Options"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/exporting.src.js",
										"line": 1271
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.exportChartLocal",
								"description": "Exporting and offline-exporting modules required. Export a chart to an image\nlocally in the user's browser. Requires the regular exporting module.",
								"kind": "function",
								"parameters": {
									"exportingOptions": {
										"description": "Exporting options, the same as in\n        {@link Highcharts.Chart#exportChart}.",
										"types": [
											"Highcharts.ExportingOptions"
										]
									},
									"chartOptions": {
										"description": "Additional chart options for the exported chart. For example a\n        different background color can be added here, or `dataLabels`\n        for export only.",
										"types": [
											"Highcharts.Options"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/offline-exporting.src.js",
										"line": 664
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.fromLatLonToPoint",
								"description": "Highmaps only. Get chart coordinates from latitude/longitude. Returns an\nobject with x and y values corresponding to the `xAxis` and `yAxis`.",
								"kind": "function",
								"parameters": {
									"latLon": {
										"description": "Coordinates.",
										"types": [
											"Highcharts.MapLatLonObject"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.MapCoordinateObject"
									],
									"description": "X and Y coordinates in terms of chart axis values."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/map.src.js",
										"line": 6237
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.fromPointToLatLon",
								"description": "Highmaps only. Calculate latitude/longitude values for a point. Returns an\nobject with the numeric properties `lat` and `lon`.",
								"kind": "function",
								"parameters": {
									"point": {
										"description": "A `Point` instance or anything containing `x` and `y` properties with\n       numeric values.",
										"types": [
											"Highcharts.Point",
											"Highcharts.MapCoordinateObject"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.MapLatLonObject"
									],
									"description": "An object with `lat` and `lon` properties."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/map.src.js",
										"line": 6191
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.get",
								"description": "Get an axis, series or point object by `id` as given in the configuration\noptions. Returns `undefined` if no item is found.",
								"kind": "function",
								"parameters": {
									"id": {
										"description": "The id as given in the configuration options.",
										"types": [
											"string"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.Axis",
										"Highcharts.Series",
										"Highcharts.Point",
										"undefined"
									],
									"description": "The retrieved item."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 26822
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.getCSV",
								"description": "Export-data module required. Returns the current chart data as a CSV string.",
								"kind": "function",
								"parameters": {
									"useLocalDecimalPoint": {
										"description": "Whether to use the local decimal point as detected from the browser.\n       This makes it easier to export data to Excel in the same locale as the\n       user is.",
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"string"
									],
									"description": "CSV representation of the data"
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/export-data.src.js",
										"line": 758
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.getChartHTML",
								"description": "Return the unfiltered innerHTML of the chart container. Used as hook for\nplugins. In styled mode, it also takes care of inlining CSS style rules.",
								"kind": "function",
								"see": [
									"Chart#getSVG"
								],
								"return": {
									"types": [
										"string"
									],
									"description": "The unfiltered SVG of the chart."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/exporting.src.js",
										"line": 1049
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.getChartSize",
								"description": "Internal function to get the chart width and height according to options\nand container size. Sets\n{@link Chart.chartWidth} and\n{@link Chart.chartHeight}.",
								"kind": "function",
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 27125
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.getDataRows",
								"description": "Export-data module required. Returns a two-dimensional array containing the\ncurrent chart data.",
								"kind": "function",
								"parameters": {
									"multiLevelHeaders": {
										"description": "Use multilevel headers for the rows by default. Adds an extra row with\n       top level headers. If a custom columnHeaderFormatter is defined, this\n       can override the behavior.",
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"Array.<Array.<(number|string)>>"
									],
									"description": "The current chart data"
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/export-data.src.js",
										"line": 498
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.getFilename",
								"description": "Get the default file name used for exported charts. By default it creates\na file name based on the chart title.",
								"kind": "function",
								"return": {
									"types": [
										"string"
									],
									"description": "A file name without extension."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/exporting.src.js",
										"line": 1237
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.getSVG",
								"description": "Return an SVG representation of the chart.",
								"kind": "function",
								"fires": [
									"Highcharts.Chart#getSVG"
								],
								"parameters": {
									"chartOptions": {
										"description": "Additional chart options for the generated SVG representation. For\n       collections like `xAxis`, `yAxis` or `series`, the additional\n       options is either merged in to the orininal item of the same\n       `id`, or to the first item if a common id is not found.",
										"types": [
											"Highcharts.Options"
										]
									}
								},
								"return": {
									"types": [
										"string"
									],
									"description": "The SVG representation of the rendered chart."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/exporting.src.js",
										"line": 1068
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.getSelectedPoints",
								"description": "Returns an array of all currently selected points in the chart. Points\ncan be selected by clicking or programmatically by the\n{@link Highcharts.Point#select}\nfunction.",
								"kind": "function",
								"return": {
									"types": [
										"Array.<Highcharts.Point>"
									],
									"description": "The currently selected points."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 26901
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.getSelectedSeries",
								"description": "Returns an array of all currently selected series in the chart. Series\ncan be selected either programmatically by the\n{@link Highcharts.Series#select}\nfunction or by checking the checkbox next to the legend item if\n[series.showCheckBox](https://api.highcharts.com/highcharts/plotOptions.series.showCheckbox)\nis true.",
								"kind": "function",
								"return": {
									"types": [
										"Array.<Highcharts.Series>"
									],
									"description": "The currently selected series."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 26926
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.getTable",
								"description": "Export-data module required. Build a HTML table with the chart's current\ndata.",
								"kind": "function",
								"parameters": {
									"useLocalDecimalPoint": {
										"description": "Whether to use the local decimal point as detected from the browser.\n       This makes it easier to export data to Excel in the same locale as the\n       user is.",
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"string"
									],
									"description": "HTML representation of the data."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/export-data.src.js",
										"line": 816
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.hasParallelCoordinates",
								"description": "Flag used in parallel coordinates plot to check if chart has ||-coords\n(parallel coords).",
								"kind": "member",
								"types": [
									"boolean"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/parallel-coordinates.src.js",
										"line": 146
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.hideLoading",
								"description": "Hide the loading layer.",
								"kind": "function",
								"see": [
									"Highcharts.Chart#showLoading"
								],
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 35780
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.init",
								"description": "Overridable function that initializes the chart. The constructor's\narguments are passed on directly.",
								"kind": "function",
								"fires": [
									"Highcharts.Chart#init",
									"Highcharts.Chart#afterInit"
								],
								"parameters": {
									"userOptions": {
										"description": "Custom options.",
										"types": [
											"Highcharts.Options"
										]
									},
									"callback": {
										"description": "Function to run when the chart has loaded and and all external\n       images are loaded.",
										"isOptional": true,
										"types": [
											"function"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 26374
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.isChartSeriesBoosting",
								"description": "Returns true if the chart is in series boost mode.",
								"kind": "function",
								"parameters": {
									"chart": {
										"description": "the chart to check",
										"types": [
											"Highcharts.Chart"
										]
									}
								},
								"return": {
									"types": [
										"boolean"
									],
									"description": "true if the chart is in series boost mode"
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/boost.src.js",
										"line": 598
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.isInsidePlot",
								"description": "Check whether a given point is within the plot area.",
								"kind": "function",
								"parameters": {
									"plotX": {
										"description": "Pixel x relative to the plot area.",
										"types": [
											"number"
										]
									},
									"plotY": {
										"description": "Pixel y relative to the plot area.",
										"types": [
											"number"
										]
									},
									"inverted": {
										"description": "Whether the chart is inverted.",
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"boolean"
									],
									"description": "Returns true if the given point is inside the plot area."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 26591
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.langFormat",
								"description": "Apply context to a format string from lang options of the chart.",
								"kind": "function",
								"parameters": {
									"langKey": {
										"description": "Key (using dot notation) into lang option structure.",
										"types": [
											"string"
										]
									},
									"context": {
										"description": "Context to apply to the format string.",
										"types": [
											"Highcharts.Dictionary.<*>"
										]
									}
								},
								"return": {
									"types": [
										"string"
									],
									"description": "The formatted string."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/accessibility.src.js",
										"line": 284
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.legend",
								"description": "The overview of the chart's series.",
								"kind": "member",
								"types": [
									"Highcharts.Legend"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 28127
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.mapZoom",
								"description": "Highmaps only. Zoom in or out of the map. See also {@link Point#zoomTo}.\nSee {@link Chart#fromLatLonToPoint} for how to get the `centerX` and\n`centerY` parameters for a geographic location.",
								"kind": "function",
								"parameters": {
									"howMuch": {
										"description": "How much to zoom the map. Values less than 1 zooms in. 0.5 zooms\n       in to half the current view. 2 zooms to twice the current view. If\n       omitted, the zoom is reset.",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"centerX": {
										"description": "The X axis position to center around if available space.",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"centerY": {
										"description": "The Y axis position to center around if available space.",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"mouseX": {
										"description": "Fix the zoom to this position if possible. This is used for\n       example in mousewheel events, where the area under the mouse\n       should be fixed as we zoom in.",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"mouseY": {
										"description": "Fix the zoom to this position if possible.",
										"isOptional": true,
										"types": [
											"number"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/map.src.js",
										"line": 1621
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.openInCloud",
								"description": "Experimental function to send a chart's config to the Cloud for editing.\n\nLimitations\n- All functions (formatters and callbacks) are removed since they're not\n JSON.",
								"kind": "function",
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/export-data.src.js",
										"line": 1095
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.options",
								"description": "The options structure for the chart. It contains members for\nthe sub elements like series, legend, tooltip etc.",
								"kind": "member",
								"types": [
									"Highcharts.Options"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 26442
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.plotHeight",
								"description": "The current height of the plot area in pixels.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 27724
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.plotLeft",
								"description": "The current left position of the plot area in pixels.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 27697
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.plotTop",
								"description": "The current top position of the plot area in pixels.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 27705
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.plotWidth",
								"description": "The current width of the plot area in pixels.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 27713
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.pointer",
								"description": "The Pointer that keeps track of mouse and touch interaction.",
								"kind": "member",
								"types": [
									"Highcharts.Pointer"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 28405
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.print",
								"description": "Exporting module required. Clears away other elements in the page and\nprints the chart as it is displayed. By default, when the exporting\nmodule is enabled, a context button with a drop down menu in the upper\nright corner accesses this function.",
								"kind": "function",
								"fires": [
									"Highcharts.Chart#beforePrint",
									"Highcharts.Chart#afterPrint"
								],
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/exporting.src.js",
										"line": 1314
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.propsRequireDirtyBox",
								"description": "These properties cause isDirtyBox to be set to true when updating. Can be\nextended from plugins.",
								"kind": "member"
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 35820
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.propsRequireUpdateSeries",
								"description": "These properties cause all series to be updated when updating. Can be\nextended from plugins.",
								"kind": "member"
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 35847
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.redraw",
								"description": "Redraw the chart after changes have been done to the data, axis extremes\nchart size or chart elements. All methods for updating axes, series or\npoints have a parameter for redrawing the chart. This is `true` by\ndefault. But in many cases you want to do more than one operation on the\nchart before redrawing, for example add a number of points. In those\ncases it is a waste of resources to redraw the chart for each new point\nadded. So you add the points and call `chart.redraw()` after.",
								"kind": "function",
								"fires": [
									"Highcharts.Chart#afterSetExtremes",
									"Highcharts.Chart#beforeRedraw",
									"Highcharts.Chart#predraw",
									"Highcharts.Chart#redraw",
									"Highcharts.Chart#render",
									"Highcharts.Chart#updatedData"
								],
								"parameters": {
									"animation": {
										"description": "If or how to apply animation to the redraw.",
										"isOptional": true,
										"types": [
											"boolean",
											"Highcharts.AnimationOptionsObject"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 26618
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.reflow",
								"description": "Reflows the chart to its container. By default, the chart reflows\nautomatically to its container following a `window.resize` event, as per\nthe [chart.reflow](https://api.highcharts/highcharts/chart.reflow)\noption. However, there are no reliable events for div resize, so if the\ncontainer is resized without a window resize event, this must be called\nexplicitly.",
								"kind": "function",
								"parameters": {
									"e": {
										"description": "Event arguments. Used primarily when the function is called\n       internally as a response to window resize.",
										"isOptional": true,
										"types": [
											"global.Event"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 27478
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.renderer",
								"description": "The renderer instance of the chart. Each chart instance has only one\nassociated renderer.",
								"kind": "member",
								"types": [
									"Highcharts.SVGRenderer"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 27373
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.series",
								"description": "All the current series in the chart.",
								"kind": "member",
								"types": [
									"Array.<Highcharts.Series>"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 26462
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.setClassName",
								"description": "Set the {@link Chart.container|chart container's} class name, in\naddition to `highcharts-container`.",
								"kind": "function",
								"parameters": {
									"className": {
										"types": [
											"string"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 27246
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.setSize",
								"description": "Resize the chart to a given width and height. In order to set the width\nonly, the height argument may be skipped. To set the height only, pass\n`undefined` for the width.",
								"kind": "function",
								"fires": [
									"Highcharts.Chart#endResize",
									"Highcharts.Chart#resize"
								],
								"parameters": {
									"width": {
										"description": "The new pixel width of the chart. Since v4.2.6, the argument can\n       be `undefined` in order to preserve the current value (when\n       setting height only), or `null` to adapt to the width of the\n       containing element.",
										"isOptional": true,
										"types": [
											"number",
											"null"
										]
									},
									"height": {
										"description": "The new pixel height of the chart. Since v4.2.6, the argument can\n       be `undefined` in order to preserve the current value, or `null`\n       in order to adapt to the height of the containing element.",
										"isOptional": true,
										"types": [
											"number",
											"null"
										]
									},
									"animation": {
										"description": "Whether and how to apply animation.",
										"isOptional": true,
										"types": [
											"Highcharts.AnimationOptionsObject"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 27575
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.setSubtitle",
								"description": "Shortcut to set the subtitle options. This can also be done from {@link Chart#update} or {@link Chart#setTitle}.",
								"kind": "function",
								"parameters": {
									"options": {
										"description": "New subtitle options. The subtitle text itself is set by the\n       `options.text` property.",
										"types": [
											"Highcharts.SubtitleOptions"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 36130
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.setTitle",
								"description": "Set a new title or subtitle for the chart.",
								"kind": "function",
								"parameters": {
									"titleOptions": {
										"description": "New title options. The title text itself is set by the\n       `titleOptions.text` property.",
										"types": [
											"Highcharts.TitleOptions"
										]
									},
									"subtitleOptions": {
										"description": "New subtitle options. The subtitle text itself is set by the\n       `subtitleOptions.text` property.",
										"types": [
											"Highcharts.SubtitleOptions"
										]
									},
									"redraw": {
										"description": "Whether to redraw the chart or wait for a later call to\n       `chart.redraw()`.",
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 26948
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.showLoading",
								"description": "Dim the chart and show a loading text or symbol. Options for the loading\nscreen are defined in {@link\nhttps://api.highcharts.com/highcharts/loading|the loading options}.",
								"kind": "function",
								"parameters": {
									"str": {
										"description": "An optional text to show in the loading label instead of the\n       default one. The default text is set in\n       [lang.loading](http://api.highcharts.com/highcharts/lang.loading).",
										"types": [
											"string"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 35700
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.styledMode",
								"description": "Whether the chart is in styled mode, meaning all presentatinoal\nattributes are avoided.",
								"kind": "member",
								"types": [
									"boolean"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 26484
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.subtitle",
								"description": "The chart subtitle. The subtitle has an `update` method that\nallows modifying the options directly or indirectly via\n`chart.update`.",
								"kind": "member",
								"types": [
									"Highcharts.SubtitleObject"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 27012
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.time",
								"description": "The `Time` object associated with the chart. Since v6.0.5,\ntime settings can be applied individually for each chart. If\nno individual settings apply, the `Time` object is shared by\nall instances.",
								"kind": "member",
								"types": [
									"Highcharts.Time"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 26470
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.title",
								"description": "The chart title. The title has an `update` method that allows\nmodifying the options directly or indirectly via\n`chart.update`.",
								"kind": "member",
								"types": [
									"Highcharts.TitleObject"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 27000
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.tooltip",
								"description": "Tooltip object for points of series.",
								"kind": "member",
								"types": [
									"Highcharts.Tooltip"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 23074
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.transformFromLatLon",
								"description": "Highmaps only. Get point from latitude and longitude using specified\ntransform definition.",
								"kind": "function",
								"parameters": {
									"latLon": {
										"description": "A latitude/longitude object.",
										"types": [
											"Highcharts.MapLatLonObject"
										]
									},
									"transform": {
										"description": "The transform definition to use as explained in the\n       {@link https://www.highcharts.com/docs/maps/latlon|documentation}.",
										"types": [
											"object"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.MapCoordinateObject"
									],
									"description": "An object with `x` and `y` properties."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/map.src.js",
										"line": 6079
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.transformToLatLon",
								"description": "Highmaps only. Get latLon from point using specified transform definition.\nThe method returns an object with the numeric properties `lat` and `lon`.",
								"kind": "function",
								"parameters": {
									"point": {
										"description": "A `Point` instance, or any object containing the properties `x` and\n       `y` with numeric values.",
										"types": [
											"Highcharts.Point",
											"Highcharts.MapCoordinateObject"
										]
									},
									"transform": {
										"description": "The transform definition to use as explained in the\n       {@link https://www.highcharts.com/docs/maps/latlon|documentation}.",
										"types": [
											"object"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.MapLatLonObject"
									],
									"description": "An object with `lat` and `lon` properties."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/map.src.js",
										"line": 6133
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.update",
								"description": "A generic function to update any element of the chart. Elements can be\nenabled and disabled, moved, re-styled, re-formatted etc.\n\nA special case is configuration objects that take arrays, for example\n[xAxis](https://api.highcharts.com/highcharts/xAxis),\n[yAxis](https://api.highcharts.com/highcharts/yAxis) or\n[series](https://api.highcharts.com/highcharts/series). For these\ncollections, an `id` option is used to map the new option set to an\nexisting object. If an existing object of the same id is not found, the\ncorresponding item is updated. So for example, running `chart.update`\nwith a series item without an id, will cause the existing chart's series\nwith the same index in the series array to be updated. When the\n`oneToOne` parameter is true, `chart.update` will also take care of\nadding and removing items from the collection. Read more under the\nparameter description below.\n\nSee also the\n[responsive option set](https://api.highcharts.com/highcharts/responsive).\nSwitching between `responsive.rules` basically runs `chart.update` under\nthe hood.",
								"kind": "function",
								"fires": [
									"Highcharts.Chart#update",
									"Highcharts.Chart#afterUpdate"
								],
								"parameters": {
									"options": {
										"description": "A configuration object for the new chart options.",
										"types": [
											"Highcharts.Options"
										]
									},
									"redraw": {
										"description": "Whether to redraw the chart.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									},
									"oneToOne": {
										"description": "When `true`, the `series`, `xAxis` and `yAxis` collections will\n       be updated one to one, and items will be either added or removed\n       to match the new updated options. For example, if the chart has\n       two series and we call `chart.update` with a configuration\n       containing three series, one will be added. If we call\n       `chart.update` with one series, one will be removed. Setting an\n       empty `series` array will remove all series, but leaving out the\n       `series` property will leave all series untouched. If the series\n       have id's, the new series options will be matched by id, and the\n       remaining ones removed.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									},
									"animation": {
										"description": "Whether to apply animation, and optionally animation\n       configuration.",
										"isOptional": true,
										"types": [
											"boolean",
											"Highcharts.AnimationOptionsObject"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 35871
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.viewData",
								"description": "Export-data module required. View the data in a table below the chart.",
								"kind": "function",
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/export-data.src.js",
										"line": 1075
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.xAxis",
								"description": "A collection of the X axes in the chart.",
								"kind": "member",
								"types": [
									"Array.<Highcharts.Axis>"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 26509
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.yAxis",
								"description": "A collection of the Y axes in the chart.",
								"kind": "member",
								"types": [
									"Array.<Highcharts.Axis>"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 26517
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.zoomOut",
								"description": "Zoom the chart out after a user has zoomed in. See also\n[Axis.setExtremes](/class-reference/Highcharts.Axis#setExtremes).",
								"kind": "function",
								"fires": [
									"Highcharts.Chart#selection"
								],
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 42713
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.ChartCallbackFunction",
						"description": "Callback for chart constructors.",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"chart": {
								"description": "Created chart.",
								"types": [
									"Highcharts.Chart"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 26193
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.ChartSelectionCallbackFunction",
						"description": "Gets fired when an area of the chart has been selected. The default action\nfor the selection event is to zoom the chart to the selected area. It can be\nprevented by calling `event.preventDefault()` or return false.",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"event": {
								"description": "Event informations",
								"types": [
									"global.Event"
								]
							}
						},
						"return": {
							"types": [
								"boolean",
								"undefined"
							],
							"description": "Return false to prevent the default action, usually zoom."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 9624
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.ClipRectElement",
						"description": "A clipping rectangle that can be applied to one or more {@link SVGElement}\ninstances. It is instanciated with the {@link SVGRenderer#clipRect} function\nand applied with the {@link SVGElement#clip} function.",
						"kind": "typedef",
						"types": [
							"Highcharts.SVGElement"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 3213
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.ColorString",
						"description": "A valid color to be parsed and handled by Highcharts. Highcharts internally\nsupports hex colors like `#ffffff`, rgb colors like `rgb(255,255,255)` and\nrgba colors like `rgba(255,255,255,1)`. Other colors may be supported by the\nbrowsers and displayed correctly, but Highcharts is not able to process them\nand apply concepts like opacity and brightening.",
						"kind": "typedef",
						"types": [
							"string"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 2842
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.CursorType",
						"description": "All possible cursor styles.",
						"kind": "typedef",
						"types": [
							"\"alias\"",
							"\"all-scroll\"",
							"\"auto\"",
							"\"cell\"",
							"\"col-resize\"",
							"\"context-menu\"",
							"\"copy\"",
							"\"crosshair\"",
							"\"default\"",
							"\"e-resize\"",
							"\"ew-resize\"",
							"\"grab\"",
							"\"grabbing\"",
							"\"help\"",
							"\"move\"",
							"\"n-resize\"",
							"\"ne-resize\"",
							"\"nesw-resize\"",
							"\"no-drop\"",
							"\"none\"",
							"\"not-allowed\"",
							"\"ns-resize\"",
							"\"nw-resize\"",
							"\"nwse-resize\"",
							"\"pointer\"",
							"\"progress\"",
							"\"row-resize\"",
							"\"s-resize\"",
							"\"se-resize\"",
							"\"sw-resize\"",
							"\"text\"",
							"\"vertical-text\"",
							"\"w-resize\"",
							"\"wait\"",
							"\"zoom-in\"",
							"\"zoom-out\""
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 254
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.Data",
						"description": "The Data class",
						"kind": "class"
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/data.src.js",
								"line": 632
							},
							{
								"path": "code/modules/map-parser.src.js",
								"line": 631
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.Data.complete",
								"description": "If a complete callback function is provided in the options, interpret the\ncolumns into a Highcharts options object.",
								"kind": "function",
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/data.src.js",
										"line": 2093
									},
									{
										"path": "code/modules/map-parser.src.js",
										"line": 2092
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Data.constructor",
								"description": "The Data class",
								"kind": "constructor",
								"parameters": {
									"dataOptions": {
										"types": [
											"Highcharts.DataOptions"
										]
									},
									"chartOptions": {
										"isOptional": true,
										"types": [
											"Highcharts.Options"
										]
									},
									"chart": {
										"isOptional": true,
										"types": [
											"Highcharts.Chart"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/data.src.js",
										"line": 0
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Data.constructor",
								"description": "The Data class",
								"kind": "constructor",
								"parameters": {
									"dataOptions": {
										"types": [
											"Highcharts.DataOptions"
										]
									},
									"chartOptions": {
										"isOptional": true,
										"types": [
											"Highcharts.Options"
										]
									},
									"chart": {
										"isOptional": true,
										"types": [
											"Highcharts.Chart"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/map-parser.src.js",
										"line": 0
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Data.dateFormats",
								"description": "A collection of available date formats, extendable from the outside to\nsupport custom date formats.",
								"kind": "member",
								"types": [
									"Highcharts.Dictionary.<Highcharts.DataDateFormatObject>"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/data.src.js",
										"line": 1890
									},
									{
										"path": "code/modules/map-parser.src.js",
										"line": 1889
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Data.fetchLiveData",
								"description": "Fetch or refetch live data",
								"kind": "function",
								"return": {
									"types": [
										"string"
									],
									"description": "The first URL that was tried."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/data.src.js",
										"line": 1441
									},
									{
										"path": "code/modules/map-parser.src.js",
										"line": 1440
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Data.getColumnDistribution",
								"description": "Get the column distribution. For example, a line series takes a single\ncolumn for Y values. A range series takes two columns for low and high\nvalues respectively, and an OHLC series takes four columns.",
								"kind": "function",
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/data.src.js",
										"line": 737
									},
									{
										"path": "code/modules/map-parser.src.js",
										"line": 736
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Data.parseCSV",
								"description": "Parse a CSV input string",
								"kind": "function",
								"parameters": {
									"inOptions": {
										"types": [
											"Highcharts.DataOptions"
										]
									}
								},
								"return": {
									"types": [
										"Array.<Array.<*>>"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/map-parser.src.js",
										"line": 875
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Data.parseCSV",
								"description": "Parse a CSV input string",
								"kind": "function",
								"parameters": {
									"inOptions": {
										"types": [
											"Highcharts.DataOptions"
										]
									}
								},
								"return": {
									"types": [
										"Array.<Array.<*>>"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/data.src.js",
										"line": 876
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Data.parseColumn",
								"description": "Parse a single column. Set properties like .isDatetime and .isNumeric.",
								"kind": "function",
								"parameters": {
									"column": {
										"description": "Column to parse",
										"types": [
											"Array.<*>"
										]
									},
									"col": {
										"description": "Column index",
										"types": [
											"number"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/data.src.js",
										"line": 1755
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Data.parseColumn",
								"description": "Parse a single column. Set properties like .isDatetime and .isNumeric.",
								"kind": "function",
								"parameters": {
									"column": {
										"description": "Column to parse",
										"types": [
											"Array.<*>"
										]
									},
									"col": {
										"description": "Column index",
										"types": [
											"number"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/map-parser.src.js",
										"line": 1754
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Data.parseDate",
								"description": "Parse a date and return it as a number. Overridable through\n`options.parseDate`.",
								"kind": "function",
								"parameters": {
									"val": {
										"types": [
											"string"
										]
									}
								},
								"return": {
									"types": [
										"global.Date"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/map-parser.src.js",
										"line": 1941
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Data.parseDate",
								"description": "Parse a date and return it as a number. Overridable through\n`options.parseDate`.",
								"kind": "function",
								"parameters": {
									"val": {
										"types": [
											"string"
										]
									}
								},
								"return": {
									"types": [
										"global.Date"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/data.src.js",
										"line": 1942
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Data.parseGoogleSpreadsheet",
								"description": "Parse a Google spreadsheet.",
								"kind": "function",
								"return": {
									"types": [
										"boolean"
									],
									"description": "Always returns false, because it is an intermediate fetch."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/data.src.js",
										"line": 1554
									},
									{
										"path": "code/modules/map-parser.src.js",
										"line": 1553
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Data.parseTable",
								"description": "Parse a HTML table",
								"kind": "function",
								"return": {
									"types": [
										"Array.<Array.<*>>"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/data.src.js",
										"line": 1388
									},
									{
										"path": "code/modules/map-parser.src.js",
										"line": 1387
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Data.parseTypes",
								"description": "Parse numeric cells in to number types and date types in to true dates.",
								"kind": "function",
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/data.src.js",
										"line": 1740
									},
									{
										"path": "code/modules/map-parser.src.js",
										"line": 1739
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Data.parsed",
								"description": "A hook for working directly on the parsed columns",
								"kind": "function",
								"return": {
									"types": [
										"*"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/data.src.js",
										"line": 2045
									},
									{
										"path": "code/modules/map-parser.src.js",
										"line": 2044
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Data.rowsToColumns",
								"description": "Reorganize rows into columns.",
								"kind": "function",
								"parameters": {
									"rows": {
										"types": [
											"Array.<Array.<*>>"
										]
									}
								},
								"return": {
									"types": [
										"Array.<Array.<*>>"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/map-parser.src.js",
										"line": 2012
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Data.rowsToColumns",
								"description": "Reorganize rows into columns.",
								"kind": "function",
								"parameters": {
									"rows": {
										"types": [
											"Array.<Array.<*>>"
										]
									}
								},
								"return": {
									"types": [
										"Array.<Array.<*>>"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/data.src.js",
										"line": 2013
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Data.trim",
								"description": "Trim a string from whitespaces.",
								"kind": "function",
								"parameters": {
									"str": {
										"description": "String to trim",
										"types": [
											"string"
										]
									},
									"inside": {
										"description": "Remove all spaces between numbers.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"string"
									],
									"description": "Trimed string"
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/map-parser.src.js",
										"line": 1709
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Data.trim",
								"description": "Trim a string from whitespaces.",
								"kind": "function",
								"parameters": {
									"str": {
										"description": "String to trim",
										"types": [
											"string"
										]
									},
									"inside": {
										"description": "Remove all spaces between numbers.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"string"
									],
									"description": "Trimed string"
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/data.src.js",
										"line": 1710
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Data.update",
								"description": "Updates the chart with new data options.",
								"kind": "function",
								"parameters": {
									"options": {
										"types": [
											"Highcharts.DataOptions"
										]
									},
									"redraw": {
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/data.src.js",
										"line": 2263
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Data.update",
								"description": "Updates the chart with new data options.",
								"kind": "function",
								"parameters": {
									"options": {
										"types": [
											"Highcharts.DataOptions"
										]
									},
									"redraw": {
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/map-parser.src.js",
										"line": 2262
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.DataBeforeParseCallbackFunction",
						"description": "Callback function to modify the CSV before parsing it by the data module.",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"csv": {
								"description": "The CSV to modify.",
								"types": [
									"string"
								]
							}
						},
						"return": {
							"types": [
								"string"
							],
							"description": "The CSV to parse."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/data.src.js",
								"line": 154
							},
							{
								"path": "code/modules/map-parser.src.js",
								"line": 153
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.DataCompleteCallbackFunction",
						"description": "Callback function that gets called after parsing data.",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"chartOptions": {
								"description": "The chart options that were used.",
								"types": [
									"Highcharts.ChartOptions"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/data.src.js",
								"line": 166
							},
							{
								"path": "code/modules/map-parser.src.js",
								"line": 165
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.DataDateFormatCallbackFunction",
						"description": "Callback function that returns the correspondig Date object to a match.",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"match": {
								"types": [
									"Array.<number>"
								]
							}
						},
						"return": {
							"types": [
								"global.Date"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/data.src.js",
								"line": 175
							},
							{
								"path": "code/modules/map-parser.src.js",
								"line": 174
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.DataDateFormatObject",
						"description": "Structure for alternative date formats to parse.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/data.src.js",
								"line": 185
							},
							{
								"path": "code/modules/map-parser.src.js",
								"line": 184
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.DataDateFormatObject.alternative",
								"description": "",
								"kind": "member",
								"types": [
									"string",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/data.src.js",
										"line": 185
									},
									{
										"path": "code/modules/map-parser.src.js",
										"line": 184
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.DataDateFormatObject.parser",
								"description": "",
								"kind": "member",
								"types": [
									"Highcharts.DataDateFormatCallbackFunction"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/data.src.js",
										"line": 185
									},
									{
										"path": "code/modules/map-parser.src.js",
										"line": 184
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.DataDateFormatObject.regex",
								"description": "",
								"kind": "member",
								"types": [
									"global.RegExp"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/data.src.js",
										"line": 185
									},
									{
										"path": "code/modules/map-parser.src.js",
										"line": 184
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.DataParseDateCallbackFunction",
						"description": "Callback function to parse string representations of dates into\nJavaScript timestamps (milliseconds since 1.1.1970).",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"dateValue": {
								"types": [
									"string"
								]
							}
						},
						"return": {
							"types": [
								"number"
							],
							"description": "Timestamp (milliseconds since 1.1.1970) as integer for Date class."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/data.src.js",
								"line": 200
							},
							{
								"path": "code/modules/map-parser.src.js",
								"line": 199
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.DataParsedCallbackFunction",
						"description": "Callback function to access the parsed columns, the two-dimentional\ninput data array directly, before they are interpreted into series\ndata and categories.",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"columns": {
								"description": "The parsed columns by the data module.",
								"types": [
									"Array.<Array.<*>>"
								]
							}
						},
						"return": {
							"types": [
								"boolean",
								"undefined"
							],
							"description": "Return `false` to stop completion, or call `this.complete()` to\n        continue async."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/data.src.js",
								"line": 212
							},
							{
								"path": "code/modules/map-parser.src.js",
								"line": 211
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.Dictionary<T>",
						"description": "Generic dictionary in TypeScript notation.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 260
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.Dictionary<T>.[key:string]",
								"description": "",
								"kind": "member",
								"types": [
									"T"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 260
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.DrilldownCallbackFunction",
						"description": "Gets fired when a drilldown point is clicked, before the new series is added.\nNote that when clicking a category label to trigger multiple series\ndrilldown, one `drilldown` event is triggered per point in the category.",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"this": {
								"description": "The chart where the event occurs.",
								"types": [
									"Highcharts.Chart"
								]
							},
							"e": {
								"description": "The drilldown event.",
								"types": [
									"Highcharts.DrilldownEventObject"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/drilldown.src.js",
								"line": 30
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.DrilldownEventObject",
						"description": "The event arguments when a drilldown point is clicked.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/drilldown.src.js",
								"line": 44
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.DrilldownEventObject.category",
								"description": "If a category label was clicked, which index.",
								"kind": "member",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/drilldown.src.js",
										"line": 44
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.DrilldownEventObject.originalEvent",
								"description": "The original browser event (usually click) that triggered the drilldown.",
								"kind": "member",
								"types": [
									"global.Event",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/drilldown.src.js",
										"line": 44
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.DrilldownEventObject.point",
								"description": "The originating point.",
								"kind": "member",
								"types": [
									"Highcharts.Point"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/drilldown.src.js",
										"line": 44
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.DrilldownEventObject.points",
								"description": "If a category label was clicked, this array holds all points corresponing to\nthe category. Otherwise it is set to false.",
								"kind": "member",
								"types": [
									"boolean",
									"Array.<Highcharts.Point>",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/drilldown.src.js",
										"line": 44
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.DrilldownEventObject.preventDefault",
								"description": "Prevents the default behaviour of the event.",
								"kind": "member",
								"types": [
									"function"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/drilldown.src.js",
										"line": 44
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.DrilldownEventObject.seriesOptions",
								"description": "Options for the new series. If the event is utilized for async drilldown, the\nseriesOptions are not added, but rather loaded async.",
								"kind": "member",
								"types": [
									"Highcharts.SeriesOptionsType",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/drilldown.src.js",
										"line": 44
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.DrilldownEventObject.target",
								"description": "The event target.",
								"kind": "member",
								"types": [
									"Highcharts.Chart"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/drilldown.src.js",
										"line": 44
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.DrilldownEventObject.type",
								"description": "The event type.",
								"kind": "member",
								"types": [
									"\"drilldown\""
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/drilldown.src.js",
										"line": 44
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.DrillupAllCallbackFunction",
						"description": "This gets fired after all the series have been drilled up. This is especially\nusefull in a chart with multiple drilldown series.",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"this": {
								"description": "The chart where the event occurs.",
								"types": [
									"Highcharts.Chart"
								]
							},
							"e": {
								"description": "The final drillup event.",
								"types": [
									"Highcharts.DrillupAllEventObject"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/drilldown.src.js",
								"line": 84
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.DrillupAllEventObject",
						"description": "The event arguments when all the series have been drilled up.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/drilldown.src.js",
								"line": 97
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.DrillupAllEventObject.preventDefault",
								"description": "Prevents the default behaviour of the event.",
								"kind": "member",
								"types": [
									"function"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/drilldown.src.js",
										"line": 97
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.DrillupAllEventObject.target",
								"description": "The event target.",
								"kind": "member",
								"types": [
									"Highcharts.Chart"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/drilldown.src.js",
										"line": 97
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.DrillupAllEventObject.type",
								"description": "The event type.",
								"kind": "member",
								"types": [
									"\"drillupall\""
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/drilldown.src.js",
										"line": 97
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.DrillupCallbackFunction",
						"description": "Gets fired when drilling up from a drilldown series.",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"this": {
								"description": "The chart where the event occurs.",
								"types": [
									"Highcharts.Chart"
								]
							},
							"e": {
								"description": "The drillup event.",
								"types": [
									"Highcharts.DrillupEventObject"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/drilldown.src.js",
								"line": 115
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.DrillupEventObject",
						"description": "The event arguments when drilling up from a drilldown series.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/drilldown.src.js",
								"line": 127
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.DrillupEventObject.preventDefault",
								"description": "Prevents the default behaviour of the event.",
								"kind": "member",
								"types": [
									"function"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/drilldown.src.js",
										"line": 127
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.DrillupEventObject.seriesOptions",
								"description": "Options for the new series.",
								"kind": "member",
								"types": [
									"Highcharts.SeriesOptionsType",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/drilldown.src.js",
										"line": 127
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.DrillupEventObject.target",
								"description": "The event target.",
								"kind": "member",
								"types": [
									"Highcharts.Chart"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/drilldown.src.js",
										"line": 127
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.DrillupEventObject.type",
								"description": "The event type.",
								"kind": "member",
								"types": [
									"\"drillup\""
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/drilldown.src.js",
										"line": 127
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.EventCallbackFunction<T>",
						"description": "The function callback to execute when the event is fired. The `this` context\ncontains the instance, that fired the event.",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"this": {
								"types": [
									"T"
								]
							},
							"eventArguments": {
								"description": "Event arguments.",
								"isOptional": true,
								"types": [
									"Highcharts.Dictionary.<*>"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 269
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.EventOptionsObject",
						"description": "The event options for adding function callback.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 281
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.EventOptionsObject.order",
								"description": "The order the event handler should be called. This opens for having one\nhandler be called before another, independent of in which order they were\nadded.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 281
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.ExportingErrorCallbackFunction",
						"description": "Function to call if the offline-exporting module fails to export a chart on\nthe client side.",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"options": {
								"description": "The exporting options.",
								"types": [
									"Highcharts.ExportingOptions"
								]
							},
							"err": {
								"description": "The error from the module.",
								"types": [
									"global.Error"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/exporting.src.js",
								"line": 30
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.ExportingMenuObject",
						"description": "Definition for a menu item in the context menu.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/exporting.src.js",
								"line": 43
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.ExportingMenuObject.onclick",
								"description": "The click handler for the menu item.",
								"kind": "member",
								"types": [
									"function",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/exporting.src.js",
										"line": 43
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.ExportingMenuObject.separator",
								"description": "Indicates a separator line instead of an item.",
								"kind": "member",
								"types": [
									"boolean",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/exporting.src.js",
										"line": 43
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.ExportingMenuObject.text",
								"description": "The text for the menu item.",
								"kind": "member",
								"types": [
									"string",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/exporting.src.js",
										"line": 43
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.ExportingMenuObject.textKey",
								"description": "If internationalization is required, the key to a language string.",
								"kind": "member",
								"types": [
									"string",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/exporting.src.js",
										"line": 43
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.ExtremesObject",
						"description": "The returned object literal from the {@link Highcharts.Axis#getExtremes}\nfunction.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 13951
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.ExtremesObject.dataMax",
								"description": "The maximum value of the axis' associated series.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 13951
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.ExtremesObject.dataMin",
								"description": "The minimum value of the axis' associated series.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 13951
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.ExtremesObject.max",
								"description": "The maximum axis value, either automatic or set manually. If the `max` option\nis not set, `maxPadding` is 0 and `endOnTick` is false, this value will be\nthe same as `dataMax`.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 13951
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.ExtremesObject.min",
								"description": "The minimum axis value, either automatic or set manually. If the `min` option\nis not set, `minPadding` is 0 and `startOnTick` is false, this value will be\nthe same as `dataMin`.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 13951
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.ExtremesObject.userMax",
								"description": "The user defined maximum, either from the `max` option or from a zoom or\n`setExtremes` action.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 13951
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.ExtremesObject.userMin",
								"description": "The user defined minimum, either from the `min` option or from a zoom or\n`setExtremes` action.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 13951
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.FontMetricsObject",
						"description": "The font metrics.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 3230
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.FontMetricsObject.b",
								"description": "The baseline relative to the top of the box.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3230
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.FontMetricsObject.f",
								"description": "The font size.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3230
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.FontMetricsObject.h",
								"description": "The line height.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3230
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.FormatterCallbackFunction<T>",
						"description": "Formats data as a string. Usually the data is accessible throught the `this`\nkeyword.",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"this": {
								"types": [
									"T"
								]
							}
						},
						"return": {
							"types": [
								"string"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 293
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.GradientColorObject",
						"description": "Gradient options instead of a solid color.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 3251
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.GradientColorObject.linearGradient",
								"description": "Holds an object that defines the start position and the end position relative\nto the shape.",
								"kind": "member",
								"types": [
									"Highcharts.LinearGradientColorObject",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3251
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.GradientColorObject.radialGradient",
								"description": "Holds an object that defines the center position and the radius.",
								"kind": "member",
								"types": [
									"Highcharts.RadialGradientColorObject",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3251
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.GradientColorObject.stops",
								"description": "The first item in each tuple is the position in the gradient, where 0 is the\nstart of the gradient and 1 is the end of the gradient. Multiple stops can be\napplied. The second item is the color for each stop. This color can also be\ngiven in the rgba format.",
								"kind": "member",
								"types": [
									"Array.<Array.<number, Highcharts.ColorString>>",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3251
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.HTMLAttributes",
						"description": "An object of key-value pairs for HTML attributes.",
						"kind": "typedef",
						"types": [
							"Highcharts.Dictionary.<(boolean|number|string)>"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 304
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.HTMLDOMElement",
						"description": "An HTML DOM element. The type is a reference to the regular HTMLElement in\nthe global scope.",
						"kind": "typedef",
						"see": [
							"https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement"
						],
						"types": [
							"global.HTMLElement"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 310
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.LabelIntersectBoxObject",
						"description": "Containing the position of a box that should be avoided by labels.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/series-label.src.js",
								"line": 27
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.LabelIntersectBoxObject.bottom",
								"description": "",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/series-label.src.js",
										"line": 27
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.LabelIntersectBoxObject.left",
								"description": "",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/series-label.src.js",
										"line": 27
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.LabelIntersectBoxObject.right",
								"description": "",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/series-label.src.js",
										"line": 27
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.LabelIntersectBoxObject.top",
								"description": "",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/series-label.src.js",
										"line": 27
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.Legend",
						"description": "The overview of the chart's series. The legend object is instanciated\ninternally in the chart constructor, and is available from the `chart.legend`\nproperty. Each chart has only one legend.",
						"kind": "class"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 24829
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.Legend.allItems",
								"description": "All items for the legend, which is an array of series for most series\nand an array of points for pie series and its derivatives.",
								"kind": "member",
								"types": [
									"Array.<(Highcharts.Point|Highcharts.Series)>"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 25673
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Legend.box",
								"description": "SVG element of the legend box.",
								"kind": "member",
								"types": [
									"Highcharts.SVGElement"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 25703
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Legend.chart",
								"description": "Chart of this legend.",
								"kind": "member",
								"types": [
									"Highcharts.Chart"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 24863
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Legend.constructor",
								"description": "The overview of the chart's series. The legend object is instanciated\ninternally in the chart constructor, and is available from the `chart.legend`\nproperty. Each chart has only one legend.",
								"kind": "constructor",
								"parameters": {
									"chart": {
										"description": "The chart instance.",
										"types": [
											"Highcharts.Chart"
										]
									},
									"options": {
										"description": "Legend options.",
										"types": [
											"Highcharts.LegendOptions"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 0
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Legend.group",
								"description": "SVG group of the legend.",
								"kind": "member",
								"types": [
									"Highcharts.SVGElement"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 25640
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Legend.options",
								"description": "Legend options.",
								"kind": "member",
								"types": [
									"Highcharts.LegendOptions"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 24909
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Legend.setText",
								"description": "Set the legend item text.",
								"kind": "function",
								"parameters": {
									"item": {
										"description": "The item for which to update the text in the legend.",
										"types": [
											"Highcharts.Point",
											"Highcharts.Series"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 25225
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Legend.title",
								"description": "SVG element of the legend title.",
								"kind": "member",
								"types": [
									"Highcharts.SVGElement"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 25191
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Legend.update",
								"description": "Update the legend with new options. Equivalent to running `chart.update`\nwith a legend configuration option.",
								"kind": "function",
								"fires": [
									"Highcharts.Legends#afterUpdate"
								],
								"parameters": {
									"options": {
										"description": "Legend options.",
										"types": [
											"Highcharts.LegendOptions"
										]
									},
									"redraw": {
										"description": "Whether to redraw the chart after the axis is altered. If doing\n       more operations on the chart, it is a good idea to set redraw to\n       false and call {@link Chart#redraw} after.\n       Whether to redraw the chart.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 24935
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.LegendBubbleLegendFormatterContextObject",
						"description": "",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts-more.src.js",
								"line": 4567
							},
							{
								"path": "code/modules/map.src.js",
								"line": 3477
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.LegendBubbleLegendFormatterContextObject.center",
								"description": "The center y position of the range.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts-more.src.js",
										"line": 4567
									},
									{
										"path": "code/modules/map.src.js",
										"line": 3477
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.LegendBubbleLegendFormatterContextObject.radius",
								"description": "The radius of the bubble range.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts-more.src.js",
										"line": 4567
									},
									{
										"path": "code/modules/map.src.js",
										"line": 3477
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.LegendBubbleLegendFormatterContextObject.value",
								"description": "The bubble value.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts-more.src.js",
										"line": 4567
									},
									{
										"path": "code/modules/map.src.js",
										"line": 3477
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.LinearGradientColorObject",
						"description": "Defines the start position and the end position for a gradient relative\nto the shape. Start position (x1, y1) and end position (x2, y2) are relative\nto the shape, where 0 means top/left and 1 is bottom/right.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 3288
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.LinearGradientColorObject.x1",
								"description": "Start horizontal position of the gradient. Float ranges 0-1.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3288
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.LinearGradientColorObject.x2",
								"description": "End horizontal position of the gradient. Float ranges 0-1.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3288
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.LinearGradientColorObject.y1",
								"description": "Start vertical position of the gradient. Float ranges 0-1.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3288
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.LinearGradientColorObject.y2",
								"description": "End vertical position of the gradient. Float ranges 0-1.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3288
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.MapCoordinateObject",
						"description": "Result object of a map transformation.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/map.src.js",
								"line": 6025
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.MapCoordinateObject.x",
								"description": "X coordinate on the map.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/map.src.js",
										"line": 6025
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.MapCoordinateObject.y",
								"description": "Y coordinate on the map.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/map.src.js",
										"line": 6025
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.MapDataObject",
						"description": "Map data object.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/map.src.js",
								"line": 1869
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.MapDataObject.name",
								"description": "The name of the data.",
								"kind": "member",
								"types": [
									"string",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/map.src.js",
										"line": 1869
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.MapDataObject.path",
								"description": "The SVG path.",
								"kind": "member",
								"types": [
									"Highcharts.SVGPathArray"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/map.src.js",
										"line": 1869
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.MapDataObject.properties",
								"description": "The GeoJSON meta data.",
								"kind": "member",
								"types": [
									"object",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/map.src.js",
										"line": 1869
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.MapLatLonObject",
						"description": "A latitude/longitude object.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/map.src.js",
								"line": 6011
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.MapLatLonObject.lat",
								"description": "The latitude.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/map.src.js",
										"line": 6011
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.MapLatLonObject.lon",
								"description": "The longitude.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/map.src.js",
										"line": 6011
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.NormalizedIntervalObject",
						"description": "Normalized interval.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 8746
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.NormalizedIntervalObject.count",
								"description": "The count.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 8746
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.NormalizedIntervalObject.unitRange",
								"description": "The interval in axis values (ms).",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 8746
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.ObjectEachCallbackFunction",
						"description": "The iterator callback.",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"value": {
								"description": "The property value.",
								"types": [
									"*"
								]
							},
							"key": {
								"description": "The property key.",
								"types": [
									"string"
								]
							},
							"obj": {
								"description": "The object that objectEach is being applied to.",
								"types": [
									"*"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 319
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.OffsetObject",
						"description": "An object containing `left` and `top` properties for the position in the\npage.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 334
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.OffsetObject.left",
								"description": "Left distance to the page border.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 334
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.OffsetObject.top",
								"description": "Top distance to the page border.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 334
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.PatternObject",
						"description": "Holds a pattern definition.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/pattern-fill.src.js",
								"line": 89
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.PatternObject.animation",
								"description": "Animation options for the image pattern loading.",
								"kind": "member",
								"types": [
									"boolean",
									"Highcharts.AnimationOptionsObject",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/pattern-fill.src.js",
										"line": 89
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PatternObject.pattern",
								"description": "Pattern options",
								"kind": "member",
								"types": [
									"Highcharts.PatternOptionsObject"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/pattern-fill.src.js",
										"line": 89
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.PatternOptionsObject",
						"description": "Pattern options",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/pattern-fill.src.js",
								"line": 32
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.PatternOptionsObject.aspectRatio",
								"description": "For automatically calculated width and height on images, it is possible to\nset an aspect ratio. The image will be zoomed to fill the bounding box,\nmaintaining the aspect ratio defined.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/pattern-fill.src.js",
										"line": 32
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PatternOptionsObject.color",
								"description": "Pattern color, used as default path stroke.",
								"kind": "member",
								"types": [
									"Highcharts.ColorString"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/pattern-fill.src.js",
										"line": 32
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PatternOptionsObject.height",
								"description": "Analogous to pattern.width.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/pattern-fill.src.js",
										"line": 32
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PatternOptionsObject.id",
								"description": "ID to assign to the pattern. This is automatically computed if not added, and\nidentical patterns are reused. To refer to an existing pattern for a\nHighcharts color, use `color: \"url(#pattern-id)\"`.",
								"kind": "member",
								"types": [
									"string"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/pattern-fill.src.js",
										"line": 32
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PatternOptionsObject.image",
								"description": "URL to an image to use as the pattern.",
								"kind": "member",
								"types": [
									"string"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/pattern-fill.src.js",
										"line": 32
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PatternOptionsObject.opacity",
								"description": "Opacity of the pattern as a float value from 0 to 1.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/pattern-fill.src.js",
										"line": 32
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PatternOptionsObject.path",
								"description": "Either an SVG path as string, or an object. As an object, supply the path\nstring in the `path.d` property. Other supported properties are standard SVG\nattributes like `path.stroke` and `path.fill`. If a path is supplied for the\npattern, the `image` property is ignored.",
								"kind": "member",
								"types": [
									"string",
									"Highcharts.SVGAttributes"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/pattern-fill.src.js",
										"line": 32
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PatternOptionsObject.with",
								"description": "Width of the pattern. For images this is automatically set to the width of\nthe element bounding box if not supplied. For non-image patterns the default\nis 32px. Note that automatic resizing of image patterns to fill a bounding\nbox dynamically is only supported for patterns with an automatically\ncalculated ID.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/pattern-fill.src.js",
										"line": 32
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PatternOptionsObject.x",
								"description": "Horizontal offset of the pattern. Defaults to 0.",
								"kind": "member",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/pattern-fill.src.js",
										"line": 32
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PatternOptionsObject.y",
								"description": "Vertical offset of the pattern. Defaults to 0.",
								"kind": "member",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/pattern-fill.src.js",
										"line": 32
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.PlotLineOrBand",
						"description": "The object wrapper for plot lines and plot bands",
						"kind": "class"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 20631
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.PlotLineOrBand.constructor",
								"description": "The object wrapper for plot lines and plot bands",
								"kind": "constructor",
								"parameters": {
									"axis": {
										"types": [
											"Highcharts.Axis"
										]
									},
									"options": {
										"types": [
											"Highcharts.AxisPlotLinesOptions",
											"Highcharts.AxisPlotBandsOptions"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 0
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PlotLineOrBand.destroy",
								"description": "Remove the plot line or band.",
								"kind": "function",
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 20881
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PlotLineOrBand.label",
								"description": "SVG element of the label.",
								"kind": "member",
								"types": [
									"Highcharts.SVGElement"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 20842
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PlotLineOrBand.svgElement",
								"description": "SVG element of the plot line or band.",
								"kind": "member",
								"types": [
									"Highcharts.SVGElement"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 20731
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.Point",
						"description": "The Point object. The point objects are generated from the `series.data`\nconfiguration objects or raw numbers. They can be accessed from the\n`Series.points` array. Other ways to instantiate points are through {@link Highcharts.Series#addPoint} or {@link Highcharts.Series#setData}.",
						"kind": "class"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 28798
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.Point.color",
								"description": "The point's current color.",
								"kind": "member",
								"types": [
									"Highcharts.ColorString",
									"Highcharts.GradientColorObject",
									"Highcharts.PatternObject"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 28847
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Point.colorIndex",
								"description": "The point's current color index, used in styled mode instead of\n`color`. The color index is inserted in class names used for styling.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 28877
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Point.dataGroup",
								"description": "Highstock only. If a point object is created by data\ngrouping, it doesn't reflect actual points in the raw data.\nIn this case, the `dataGroup` property holds information\nthat points back to the raw data.\n\n- `dataGroup.start` is the index of the first raw data point\nin the group.\n- `dataGroup.length` is the amount of points in the group.",
								"kind": "member",
								"products": [
									"highstock"
								],
								"types": [
									"Highcharts.SVGElement",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 32979
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Point.getClassName",
								"description": "Get the CSS class names for individual points. Used internally where the\nreturned value is set on every point.",
								"kind": "function",
								"return": {
									"types": [
										"string"
									],
									"description": "The class names."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 29090
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Point.getLabelConfig",
								"description": "Return the configuration hash needed for the data label and tooltip\nformatters.",
								"kind": "function",
								"return": {
									"types": [
										"Highcharts.PointLabelObject"
									],
									"description": "Abstract object used in formatters and formats."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 29230
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Point.getZone",
								"description": "In a series with `zones`, return the zone that the point belongs to.",
								"kind": "function",
								"return": {
									"types": [
										"Highcharts.PlotSeriesZonesOptions"
									],
									"description": "The zone item."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 29111
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Point.haloPath",
								"description": "Get the path definition for the halo, which is usually a shadow-like\ncircle around the currently hovered point.",
								"kind": "function",
								"parameters": {
									"size": {
										"description": "The radius of the circular halo.",
										"types": [
											"number"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGPathArray"
									],
									"description": "The path definition."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 43229
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Point.init",
								"description": "Initialize the point. Called internally based on the `series.data`\noption.",
								"kind": "function",
								"fires": [
									"Highcharts.Point#afterInit"
								],
								"parameters": {
									"series": {
										"description": "The series object containing this point.",
										"types": [
											"Highcharts.Series"
										]
									},
									"options": {
										"description": "The data in either number, array or object format.",
										"types": [
											"number",
											"object",
											"Array.<(number|string)>",
											"null"
										]
									},
									"x": {
										"description": "Optionally, the X value of the point.",
										"isOptional": true,
										"types": [
											"number"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.Point"
									],
									"description": "The Point instance."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 28810
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Point.onMouseOut",
								"description": "Runs on mouse out from the point. Called internally from mouse and touch\nevents.",
								"kind": "function",
								"fires": [
									"Highcharts.Point#mouseOut"
								],
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 42986
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Point.onMouseOver",
								"description": "Runs on mouse over the point. Called internally from mouse and touch\nevents.",
								"kind": "function",
								"parameters": {
									"e": {
										"description": "The event arguments.",
										"types": [
											"Highcharts.PointerEventObject"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 42965
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Point.options",
								"description": "The point's options as applied in the initial configuration, or\nextended through `Point.update`.",
								"kind": "member",
								"types": [
									"object"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 28918
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Point.optionsToObject",
								"description": "Transform number or array configs into objects. Used internally to unify\nthe different configuration formats for points. For example, a simple\nnumber `10` in a line series will be transformed to `{ y: 10 }`, and an\narray config like `[1, 10]` in a scatter series will be transformed to\n`{ x: 1, y: 10 }`.",
								"kind": "function",
								"parameters": {
									"options": {
										"description": "The input option.",
										"types": [
											"number",
											"object",
											"Array.<(number|string)>",
											"null"
										]
									}
								},
								"return": {
									"types": [
										"object"
									],
									"description": "Transformed options."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 29017
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Point.properties",
								"description": "In Highmaps, when data is loaded from GeoJSON, the GeoJSON\nitem's properies are copied over here.",
								"kind": "member",
								"types": [
									"*"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/map.src.js",
										"line": 6384
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Point.remove",
								"description": "Remove a point and optionally redraw the series and if necessary the axes",
								"kind": "function",
								"parameters": {
									"redraw": {
										"description": "Whether to redraw the chart or wait for an explicit call. When\n       doing more operations on the chart, for example running\n       `point.remove()` in a loop, it is best practice to set `redraw`\n       to false and call `chart.redraw()` after.",
										"types": [
											"boolean"
										]
									},
									"animation": {
										"description": "Whether to apply animation, and optionally animation\n       configuration.",
										"isOptional": true,
										"types": [
											"boolean",
											"Highcharts.AnimationOptionsObject"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 36255
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Point.select",
								"description": "Toggle the selection status of a point.",
								"kind": "function",
								"see": [
									"Highcharts.Chart#getSelectedPoints"
								],
								"fires": [
									"Highcharts.Point#select",
									"Highcharts.Point#unselect"
								],
								"parameters": {
									"selected": {
										"description": "When `true`, the point is selected. When `false`, the point is\n       unselected. When `null` or `undefined`, the selection state is\n       toggled.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									},
									"accumulate": {
										"description": "When `true`, the selection is added to other selected points.\n       When `false`, other selected points are deselected. Internally in\n       Highcharts, when\n       [allowPointSelect](http://api.highcharts.com/highcharts/plotOptions.series.allowPointSelect)\n       is `true`, selected points are accumulated on Control, Shift or\n       Cmd clicking the point.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 42889
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Point.selected",
								"description": "Whether the point is selected or not.",
								"kind": "member",
								"see": [
									"Point#select",
									"Chart#getSelectedPoints"
								],
								"types": [
									"boolean"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 42932
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Point.series",
								"description": "The series object associated with the point.",
								"kind": "member",
								"types": [
									"Highcharts.Series"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 28839
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Point.setNestedProperty",
								"description": "Set a value in an object, on the property defined by key. The key\nsupports nested properties using dot notation. The function modifies the\ninput object and does not make a copy.",
								"kind": "function",
								"parameters": {
									"object": {
										"description": "The object to set the value on.",
										"types": [
											"object"
										]
									},
									"value": {
										"description": "The value to set.",
										"types": [
											"*"
										]
									},
									"key": {
										"description": "Key to the property to set.",
										"types": [
											"string"
										]
									}
								},
								"return": {
									"types": [
										"object"
									],
									"description": "The modified object."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 28984
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Point.setState",
								"description": "Set the point's state.",
								"kind": "function",
								"fires": [
									"Highcharts.Point#afterSetState"
								],
								"parameters": {
									"state": {
										"description": "The new state, can be one of `''` (an empty string), `hover` or\n       `select`.",
										"isOptional": true,
										"types": [
											"string"
										]
									},
									"move": {
										"description": "State for animation.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 43027
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Point.tooltipFormatter",
								"description": "Extendable method for formatting each point's tooltip line.",
								"kind": "function",
								"parameters": {
									"pointFormat": {
										"description": "The point format.",
										"types": [
											"string"
										]
									}
								},
								"return": {
									"types": [
										"string"
									],
									"description": "A string to be concatenated in to the common tooltip text."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 29253
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Point.update",
								"description": "Update point with new options (typically x/y data) and optionally redraw\nthe series.",
								"kind": "function",
								"fires": [
									"Highcharts.Point#update"
								],
								"parameters": {
									"options": {
										"description": "The point options. Point options are handled as described under\n       the `series.type.data` item for each series type. For example\n       for a line series, if options is a single number, the point will\n       be given that number as the marin y value. If it is an array, it\n       will be interpreted as x and y values respectively. If it is an\n       object, advanced options are applied.",
										"types": [
											"number",
											"object",
											"Array.<(number|string)>",
											"null"
										]
									},
									"redraw": {
										"description": "Whether to redraw the chart after the point is updated. If doing\n       more operations on the chart, it is best practice to set\n       `redraw` to false and call `chart.redraw()` after.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									},
									"animation": {
										"description": "Whether to apply animation, and optionally animation\n       configuration.",
										"isOptional": true,
										"types": [
											"boolean",
											"Highcharts.AnimationOptionsObject"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 36149
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Point.visible",
								"description": "For certain series types, like pie charts, where individual points can\nbe shown or hidden.",
								"kind": "member",
								"types": [
									"boolean"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 29351
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Point.x",
								"description": "The x value of the point.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 28957
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Point.y",
								"description": "The y value of the point.",
								"kind": "member",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 28937
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Point.zoomTo",
								"description": "Highmaps only. Zoom in on the point using the global animation.",
								"kind": "function",
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/map.src.js",
										"line": 2926
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.PointLabelObject",
						"description": "Configuration hash for the data label and tooltip formatters.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 28738
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.PointLabelObject.color",
								"description": "The point's current color.",
								"kind": "member",
								"types": [
									"Highcharts.ColorString",
									"Highcharts.GradientColorObject",
									"Highcharts.PatternObject"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 28738
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PointLabelObject.colorIndex",
								"description": "The point's current color index, used in styled mode instead of `color`. The\ncolor index is inserted in class names used for styling.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 28738
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PointLabelObject.key",
								"description": "The name of the related point.",
								"kind": "member",
								"types": [
									"number",
									"string"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 28738
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PointLabelObject.percentage",
								"description": "The percentage for related points in a stacked series or pies.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 28738
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PointLabelObject.point",
								"description": "The related point.",
								"kind": "member",
								"types": [
									"Highcharts.Point"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 28738
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PointLabelObject.series",
								"description": "The related series.",
								"kind": "member",
								"types": [
									"Highcharts.Series"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 28738
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PointLabelObject.total",
								"description": "The total of values in either a stack for stacked series, or a pie in a pie\nseries.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 28738
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PointLabelObject.x",
								"description": "For categorized axes this property holds the category name for the point. For\nother axes it holds the X value.",
								"kind": "member",
								"types": [
									"number",
									"string"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 28738
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PointLabelObject.y",
								"description": "The y value of the point.",
								"kind": "member",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 28738
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.Pointer",
						"description": "The mouse and touch tracker object. Each {@link Chart} item has one\nassosiated Pointer item that can be accessed from the {@link Chart.pointer}\nproperty.",
						"kind": "class"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 23027
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.Pointer.constructor",
								"description": "The mouse and touch tracker object. Each {@link Chart} item has one\nassosiated Pointer item that can be accessed from the {@link Chart.pointer}\nproperty.",
								"kind": "constructor",
								"parameters": {
									"chart": {
										"description": "The Chart instance.",
										"types": [
											"Highcharts.Chart"
										]
									},
									"options": {
										"description": "The root options object. The pointer uses options from the chart and\n       tooltip structures.",
										"types": [
											"Highcharts.Options"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 0
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Pointer.destroy",
								"description": "Destroys the Pointer object and disconnects DOM events.",
								"kind": "function",
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 24194
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Pointer.findNearestKDPoints",
								"description": "Finds the closest point to a set of coordinates, using the k-d-tree\nalgorithm.",
								"kind": "function",
								"parameters": {
									"series": {
										"description": "All the series to search in.",
										"types": [
											"Array.<Highcharts.Series>"
										]
									},
									"shared": {
										"description": "Whether it is a shared tooltip or not.",
										"types": [
											"boolean"
										]
									},
									"coordinates": {
										"description": "Chart coordinates of the pointer.",
										"types": [
											"Highcharts.PointerCoordinatesObject"
										]
									}
								},
								"return": {
									"types": [
										"Point",
										"undefined"
									],
									"description": "The point closest to given coordinates."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 23176
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Pointer.getCoordinates",
								"description": "Get the click position in terms of axis values.",
								"kind": "function",
								"parameters": {
									"e": {
										"description": "Pointer event, extended with `chartX` and `chartY` properties.",
										"types": [
											"Highcharts.PointerEventObject"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.PointerAxisCoordinatesObject"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 23149
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Pointer.inClass",
								"description": "Utility to detect whether an element has, or has a parent with, a\nspecificclass name. Used on detection of tracker objects and on deciding\nwhether hovering the tooltip should cause the active series to mouse out.",
								"kind": "function",
								"parameters": {
									"element": {
										"description": "The element to investigate.",
										"types": [
											"Highcharts.SVGDOMElement",
											"Highcharts.HTMLDOMElement"
										]
									},
									"className": {
										"description": "The class name to look for.",
										"types": [
											"string"
										]
									}
								},
								"return": {
									"types": [
										"boolean"
									],
									"description": "True if either the element or one of its parents has the given\n        class name."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 24033
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Pointer.normalize",
								"description": "Takes a browser event object and extends it with custom Highcharts\nproperties `chartX` and `chartY` in order to work on the internal\ncoordinate system.",
								"kind": "function",
								"parameters": {
									"e": {
										"description": "Event object in standard browsers.",
										"types": [
											"global.Event"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.PointerEventObject"
									],
									"description": "A browser event with extended properties `chartX` and `chartY`."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 23117
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Pointer.reset",
								"description": "Reset the tracking by hiding the tooltip, the hover series state and the\nhover point",
								"kind": "function",
								"parameters": {
									"allowMove": {
										"description": "Instead of destroying the tooltip altogether, allow moving it if\n       possible.",
										"types": [
											"boolean"
										]
									},
									"delay": {
										"types": [
											"number"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 23532
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.PointerAxisCoordinateObject",
						"description": "One position in relation to an axis.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 22918
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.PointerAxisCoordinateObject.axis",
								"description": "Related axis.",
								"kind": "member",
								"types": [
									"Highcharts.Axis"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 22918
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PointerAxisCoordinateObject.value",
								"description": "Axis value.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 22918
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.PointerAxisCoordinatesObject",
						"description": "Positions in terms of axis values.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 22934
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.PointerAxisCoordinatesObject.xAxis",
								"description": "Positions on the x-axis.",
								"kind": "member",
								"types": [
									"Array.<Highcharts.PointerAxisCoordinateObject>"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 22934
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PointerAxisCoordinatesObject.yAxis",
								"description": "Positions on the y-axis.",
								"kind": "member",
								"types": [
									"Array.<Highcharts.PointerAxisCoordinateObject>"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 22934
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.PointerCoordinatesObject",
						"description": "Pointer coordinates.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 22948
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.PointerCoordinatesObject.chartX",
								"description": "",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 22948
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PointerCoordinatesObject.chartY",
								"description": "",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 22948
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.PointerEventObject",
						"description": "A native browser mouse or touch event, extended with position information\nrelative to the {@link Chart.container}.",
						"kind": "interface",
						"types": [
							"global.PointerEvent"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 22960
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.PointerEventObject.chartX",
								"description": "The X coordinate of the pointer interaction relative to the chart.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 22960
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PointerEventObject.chartY",
								"description": "The Y coordinate of the pointer interaction relative to the chart.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 22960
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.PositionObject",
						"description": "An object containing `x` and `y` properties for the position of an element.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 349
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.PositionObject.x",
								"description": "X position of the element.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 349
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PositionObject.y",
								"description": "Y position of the element.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 349
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.RadialGradientColorObject",
						"description": "Defines the center position and the radius for a gradient.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 3316
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.RadialGradientColorObject.cx",
								"description": "Center horizontal position relative to the shape. Float ranges 0-1.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3316
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.RadialGradientColorObject.cy",
								"description": "Center vertical position relative to the shape. Float ranges 0-1.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3316
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.RadialGradientColorObject.r",
								"description": "Radius relative to the shape. Float ranges 0-1.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3316
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.RangeSelectorClickCallbackFunction",
						"description": "Callback function to react on button clicks.",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"e": {
								"description": "Event arguments.",
								"types": [
									"global.Event"
								]
							},
							"Return": {
								"description": "false to cancel the default button event.",
								"types": [
									"boolean",
									"undefined"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/stock.src.js",
								"line": 7740
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.RangeSelectorParseCallbackFunction",
						"description": "Callback function to parse values entered in the input boxes and return a\nvalid JavaScript time as milliseconds since 1970.",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"value": {
								"description": "Input value to parse.",
								"types": [
									"string"
								]
							}
						},
						"return": {
							"types": [
								"number"
							],
							"description": "Parsed JavaScript time value."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/stock.src.js",
								"line": 7752
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.RectangleObject",
						"description": "A rectangle.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 3337
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.RectangleObject.height",
								"description": "Height of the rectangle.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3337
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.RectangleObject.width",
								"description": "Width of the rectangle.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3337
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.RectangleObject.x",
								"description": "Horizontal position of the rectangle.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3337
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.RectangleObject.y",
								"description": "Vertical position of the rectangle.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3337
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.RelativeSize",
						"description": "If a number is given, it defines the pixel length. If a percentage string is\ngiven, like for example `'50%'`, the setting defines a length relative to a\nbase size, for example the size of a container.",
						"kind": "typedef",
						"types": [
							"number",
							"string"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 363
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.ResponsiveCallbackFunction",
						"description": "A callback function to gain complete control on when the responsive rule\napplies.",
						"kind": "typedef",
						"types": [
							"function"
						],
						"return": {
							"types": [
								"boolean"
							],
							"description": "Return `true` if it applies."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 43585
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.SVGAttributes",
						"description": "An object of key-value pairs for SVG attributes. Attributes in Highcharts\nelements for the most parts correspond to SVG, but some are specific to\nHighcharts, like `zIndex`, `rotation`, `rotationOriginX`,\n`rotationOriginY`, `translateX`, `translateY`, `scaleX` and `scaleY`. SVG\nattributes containing a hyphen are _not_ camel-cased, they should be\nquoted to preserve the hyphen.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 371
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.SVGAttributes.[key:string]",
								"description": "",
								"kind": "member",
								"types": [
									"boolean",
									"number",
									"string",
									"Array.<(number|string)>",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 371
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGAttributes.d",
								"description": "",
								"kind": "member",
								"types": [
									"string",
									"Highcharts.SVGPathArray",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 371
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGAttributes.inverted",
								"description": "",
								"kind": "member",
								"types": [
									"boolean",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 371
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGAttributes.matrix",
								"description": "",
								"kind": "member",
								"types": [
									"Array.<number>",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 371
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGAttributes.rotation",
								"description": "",
								"kind": "member",
								"types": [
									"string",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 371
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGAttributes.rotationOriginX",
								"description": "",
								"kind": "member",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 371
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGAttributes.rotationOriginY",
								"description": "",
								"kind": "member",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 371
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGAttributes.scaleX",
								"description": "",
								"kind": "member",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 371
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGAttributes.scaleY",
								"description": "",
								"kind": "member",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 371
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGAttributes.stroke",
								"description": "",
								"kind": "member",
								"types": [
									"Highcharts.ColorString",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 371
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGAttributes.translateX",
								"description": "",
								"kind": "member",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 371
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGAttributes.translateY",
								"description": "",
								"kind": "member",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 371
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGAttributes.zIndex",
								"description": "",
								"kind": "member",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 371
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.SVGDOMElement",
						"description": "An SVG DOM element. The type is a reference to the regular SVGElement in the\nglobal scope.",
						"kind": "typedef",
						"see": [
							"https://developer.mozilla.org/en-US/docs/Web/API/SVGElement"
						],
						"types": [
							"globals.GlobalSVGElement"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 429
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.SVGDefinitionObject",
						"description": "Serialized form of an SVG definition, including children. Some key\nproperty names are reserved: tagName, textContent, and children.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 3404
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.SVGDefinitionObject.[key:string]",
								"description": "",
								"kind": "member",
								"types": [
									"number",
									"string",
									"Array.<Highcharts.SVGDefinitionObject>",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3404
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGDefinitionObject.children",
								"description": "",
								"kind": "member",
								"types": [
									"Array.<Highcharts.SVGDefinitionObject>",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3404
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGDefinitionObject.tagName",
								"description": "",
								"kind": "member",
								"types": [
									"string",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3404
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGDefinitionObject.textContent",
								"description": "",
								"kind": "member",
								"types": [
									"string",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3404
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.SVGElement",
						"description": "The SVGElement prototype is a JavaScript wrapper for SVG elements used in the\nrendering layer of Highcharts. Combined with the {@link Highcharts.SVGRenderer} object, these prototypes allow freeform annotation\nin the charts or even in HTML pages without instanciating a chart. The\nSVGElement can also wrap HTML labels, when `text` or `label` elements are\ncreated with the `useHTML` parameter.\n\nThe SVGElement instances are created through factory functions on the {@link Highcharts.SVGRenderer} object, like {@link Highcharts.SVGRenderer#rect|\nrect}, {@link Highcharts.SVGRenderer#path|path}, {@link\nHighcharts.SVGRenderer#text|text}, {@link Highcharts.SVGRenderer#label|\nlabel}, {@link Highcharts.SVGRenderer#g|g} and more.",
						"kind": "class"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 3518
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.SVGElement.add",
								"description": "Add the element to the DOM. All elements must be added this way.",
								"kind": "function",
								"parameters": {
									"parent": {
										"description": "The parent item to add it to. If undefined, the element is added\n       to the {@link Highcharts.SVGRenderer.box}.",
										"isOptional": true,
										"types": [
											"Highcharts.SVGElement",
											"Highcharts.SVGDOMElement"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGElement"
									],
									"description": "Returns the SVGElement for chaining."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 4955
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGElement.addClass",
								"description": "Add a class name to an element.",
								"kind": "function",
								"parameters": {
									"className": {
										"description": "The new class name to add.",
										"types": [
											"string"
										]
									},
									"replace": {
										"description": "When true, the existing class name(s) will be overwritten with\n       the new one. When false, the new one is added.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGElement"
									],
									"description": "Return the SVG element for chainability."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 4076
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGElement.align",
								"description": "Align the element relative to the chart or another box.",
								"kind": "function",
								"parameters": {
									"alignOptions": {
										"description": "The alignment options. The function can be called without this\n       parameter in order to re-align an element after the box has been\n       updated.",
										"isOptional": true,
										"types": [
											"Highcharts.AlignObject"
										]
									},
									"alignByTranslate": {
										"description": "Align element by translation.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									},
									"box": {
										"description": "The box to align to, needs a width and height. When the box is a\n       string, it refers to an object in the Renderer. For example, when\n       box is `spacingBox`, it refers to `Renderer.spacingBox` which\n       holds `width`, `height`, `x` and `y` properties.",
										"isOptional": true,
										"types": [
											"string",
											"Highcharts.BBoxObject"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGElement"
									],
									"description": "Returns the SVGElement for chaining."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 4621
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGElement.animate",
								"description": "Animate to given attributes or CSS properties.",
								"kind": "function",
								"parameters": {
									"params": {
										"description": "SVG attributes or CSS to animate.",
										"types": [
											"Highcharts.SVGAttributes"
										]
									},
									"options": {
										"description": "Animation options.",
										"isOptional": true,
										"types": [
											"Highcharts.AnimationOptionsObject"
										]
									},
									"complete": {
										"description": "Function to perform at the end of animation.",
										"isOptional": true,
										"types": [
											"function"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGElement"
									],
									"description": "Returns the SVGElement for chaining."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3589
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGElement.attr",
								"description": "Apply native and custom attributes to the SVG elements.\n\nIn order to set the rotation center for rotation, set x and y to 0 and\nuse `translateX` and `translateY` attributes to position the element\ninstead.\n\nAttributes frequently used in Highcharts are `fill`, `stroke`,\n`stroke-width`.",
								"kind": "function",
								"parameters": {
									"hash": {
										"description": "The native and custom SVG attributes.",
										"isOptional": true,
										"types": [
											"string",
											"Highcharts.SVGAttributes"
										]
									},
									"val": {
										"description": "If the type of the first argument is `string`, the second can be a\n       value, which will serve as a single attribute setter. If the first\n       argument is a string and the second is undefined, the function\n       serves as a getter and the current value of the property is\n       returned.",
										"isOptional": true,
										"types": [
											"string"
										]
									},
									"complete": {
										"description": "A callback function to execute after setting the attributes. This\n       makes the function compliant and interchangeable with the\n       {@link SVGElement#animate} function.",
										"isOptional": true,
										"types": [
											"function"
										]
									},
									"continueAnimation": {
										"description": "Used internally when `.attr` is called as part of an animation\n       step. Otherwise, calling `.attr` for an attribute will stop\n       animation for that attribute.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"number",
										"string",
										"Highcharts.SVGElement"
									],
									"description": "If used as a setter, it returns the current\n        {@link Highcharts.SVGElement} so the calls can be chained. If\n        used as a getter, the current value of the attribute is returned."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3893
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGElement.clip",
								"description": "Apply a clipping rectangle to this element.",
								"kind": "function",
								"parameters": {
									"clipRect": {
										"description": "The clipping rectangle. If skipped, the current clip is removed.",
										"isOptional": true,
										"types": [
											"Highcharts.ClipRectElement"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGElement"
									],
									"description": "Returns the SVG element to allow chaining."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 4177
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGElement.crisp",
								"description": "Calculate the coordinates needed for drawing a rectangle crisply and\nreturn the calculated attributes.",
								"kind": "function",
								"parameters": {
									"rect": {
										"description": "Rectangle to crisp.",
										"types": [
											"Highcharts.RectangleObject"
										]
									},
									"strokeWidth": {
										"description": "The stroke width to consider when computing crisp positioning. It\n       can also be set directly on the rect parameter.",
										"isOptional": true,
										"types": [
											"number"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.RectangleObject"
									],
									"description": "The modified rectangle arguments."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 4197
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGElement.css",
								"description": "Set styles for the element. In addition to CSS styles supported by\nnative SVG and HTML elements, there are also some custom made for\nHighcharts, like `width`, `ellipsis` and `textOverflow` for SVG text\nelements.",
								"kind": "function",
								"parameters": {
									"styles": {
										"description": "The new CSS styles.",
										"types": [
											"Highcharts.CSSObject"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGElement"
									],
									"description": "Return the SVG element for chaining."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 4237
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGElement.destroy",
								"description": "Destroy the element and element wrapper and clear up the DOM and event\nhooks.",
								"kind": "function",
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 5026
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGElement.element",
								"description": "The primary DOM node. Each `SVGElement` instance wraps a main DOM\nnode, but may also represent more nodes.",
								"kind": "member",
								"types": [
									"Highcharts.SVGDOMElement",
									"Highcharts.HTMLDOMElement"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3569
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGElement.fadeIn",
								"description": "A general fadeIn method.",
								"kind": "function",
								"parameters": {
									"animation": {
										"isOptional": true,
										"types": [
											"Highcharts.AnimationOptionsObject"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/drilldown.src.js",
										"line": 458
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGElement.fadeOut",
								"description": "Fade out an element by animating its opacity down to 0, and hide it on\ncomplete. Used internally for the tooltip.",
								"kind": "function",
								"parameters": {
									"duration": {
										"description": "The fade duration in milliseconds.",
										"isOptional": true,
										"types": [
											"number"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 4933
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGElement.getBBox",
								"description": "Get the bounding box (width, height, x and y) for the element. Generally\nused to get rendered text size. Since this is called a lot in charts,\nthe results are cached based on text properties, in order to save DOM\ntraffic. The returned bounding box includes the rotation, so for example\na single text line of rotation 90 will report a greater height, and a\nwidth corresponding to the line-height.",
								"kind": "function",
								"parameters": {
									"reload": {
										"description": "Skip the cache and get the updated DOM bouding box.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									},
									"rot": {
										"description": "Override the element's rotation. This is internally used on axis\n       labels with a value of 0 to find out what the bounding box would\n       be have been if it were not rotated.",
										"isOptional": true,
										"types": [
											"number"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.BBoxObject"
									],
									"description": "The bounding box with `x`, `y`, `width` and `height` properties."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 4712
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGElement.getStyle",
								"description": "Get the computed style. Only in styled mode.",
								"kind": "function",
								"parameters": {
									"prop": {
										"description": "The property name to check for.",
										"types": [
											"string"
										]
									}
								},
								"return": {
									"types": [
										"string"
									],
									"description": "The current computed value."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 4352
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGElement.hasClass",
								"description": "Check if an element has the given class name.",
								"kind": "function",
								"parameters": {
									"className": {
										"description": "The class name to check for.",
										"types": [
											"string"
										]
									}
								},
								"return": {
									"types": [
										"boolean"
									],
									"description": "Whether the class name is found."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 4105
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGElement.hide",
								"description": "Hide the element, equivalent to setting the `visibility` attribute to\n`hidden`.",
								"kind": "function",
								"return": {
									"types": [
										"Highcharts.SVGElement"
									],
									"description": "Returns the SVGElement for chaining."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 4920
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGElement.init",
								"description": "Initialize the SVG element. This function only exists to make the\ninitiation process overridable. It should not be called directly.",
								"kind": "function",
								"parameters": {
									"renderer": {
										"description": "The SVGRenderer instance to initialize to.",
										"types": [
											"Highcharts.SVGRenderer"
										]
									},
									"nodeName": {
										"description": "The SVG node name.",
										"types": [
											"string"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3555
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGElement.invert",
								"description": "Invert a group, rotate and flip. This is used internally on inverted\ncharts, where the points and graphs are drawn as if not inverted, then\nthe series group elements are inverted.",
								"kind": "function",
								"parameters": {
									"inverted": {
										"description": "Whether to invert or not. An inverted shape can be un-inverted by\n       setting it to false.",
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGElement"
									],
									"description": "Return the SVGElement for chaining."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 4519
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGElement.on",
								"description": "Add an event listener. This is a simple setter that replaces all other\nevents of the same type, opposed to the {@link Highcharts#addEvent}\nfunction.",
								"kind": "function",
								"parameters": {
									"eventType": {
										"description": "The event type. If the type is `click`, Highcharts will internally\n       translate it to a `touchstart` event on touch devices, to prevent\n       the browser from waiting for a click event from firing.",
										"types": [
											"string"
										]
									},
									"handler": {
										"description": "The handler callback.",
										"types": [
											"function"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGElement"
									],
									"description": "The SVGElement for chaining."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 4423
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGElement.removeClass",
								"description": "Remove a class name from the element.",
								"kind": "function",
								"parameters": {
									"className": {
										"description": "The class name to remove.",
										"types": [
											"string",
											"RegExp"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGElement"
									],
									"description": "Returns the SVG element for chainability."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 4120
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGElement.renderer",
								"description": "The renderer that the SVGElement belongs to.",
								"kind": "member",
								"types": [
									"Highcharts.SVGRenderer"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3580
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGElement.setRadialReference",
								"description": "Set the coordinates needed to draw a consistent radial gradient across\na shape regardless of positioning inside the chart. Used on pie slices\nto make all the slices have the same radial reference point.",
								"kind": "function",
								"parameters": {
									"coordinates": {
										"description": "The center reference. The format is `[centerX, centerY, diameter]`\n       in pixels.",
										"types": [
											"Array.<number>"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGElement"
									],
									"description": "Returns the SVGElement for chaining."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 4468
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGElement.shadow",
								"description": "Add a shadow to the element. Must be called after the element is added to\nthe DOM. In styled mode, this method is not used, instead use `defs` and\nfilters.",
								"kind": "function",
								"parameters": {
									"shadowOptions": {
										"description": "The shadow options. If `true`, the default options are applied. If\n       `false`, the current shadow will be removed.",
										"types": [
											"boolean",
											"Highcharts.ShadowOptionsObject"
										]
									},
									"group": {
										"description": "The SVG group element where the shadows will be applied. The\n       default is to add it to the same parent as the current element.\n       Internally, this is ised for pie slices, where all the shadows are\n       added to an element behind all the slices.",
										"isOptional": true,
										"types": [
											"Highcharts.SVGElement"
										]
									},
									"cutOff": {
										"description": "Used internally for column shadows.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGElement"
									],
									"description": "Returns the SVGElement for chaining."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 5113
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGElement.show",
								"description": "Show the element after it has been hidden.",
								"kind": "function",
								"parameters": {
									"inherit": {
										"description": "Set the visibility attribute to `inherit` rather than `visible`.\n       The difference is that an element with `visibility=\"visible\"`\n       will be visible even if the parent is hidden.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGElement"
									],
									"description": "Returns the SVGElement for chaining."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 4903
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGElement.strokeWidth",
								"description": "Get the computed stroke width in pixel values. This is used extensively\nwhen drawing shapes to ensure the shapes are rendered crisp and\npositioned correctly relative to each other. Using\n`shape-rendering: crispEdges` leaves us less control over positioning,\nfor example when we want to stack columns next to each other, or position\nthings pixel-perfectly within the plot box.\n\nThe common pattern when placing a shape is:\n- Create the SVGElement and add it to the DOM. In styled mode, it will\n now receive a stroke width from the style sheet. In classic mode we\n will add the `stroke-width` attribute.\n- Read the computed `elem.strokeWidth()`.\n- Place it based on the stroke width.",
								"kind": "function",
								"return": {
									"types": [
										"number"
									],
									"description": "The stroke width in pixels. Even if the given stroke widtch (in\n        CSS or by attributes) is based on `em` or other units, the pixel\n        size is returned."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 4371
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGElement.toFront",
								"description": "Bring the element to the front. Alternatively, a new zIndex can be set.",
								"kind": "function",
								"return": {
									"types": [
										"Highcharts.SVGElement"
									],
									"description": "Returns the SVGElement for chaining."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 4603
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGElement.translate",
								"description": "Move an object and its children by x and y values.",
								"kind": "function",
								"parameters": {
									"x": {
										"description": "The x value.",
										"types": [
											"number"
										]
									},
									"y": {
										"description": "The y value.",
										"types": [
											"number"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 4501
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.SVGPathArray",
						"description": "Array of path commands, that will go into the `d` attribute of an SVG\nelement.",
						"kind": "typedef",
						"types": [
							"Array.<(number|Highcharts.SVGPathCommand)>"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 438
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.SVGPathCommand",
						"description": "Possible path commands in a SVG path array.",
						"kind": "typedef",
						"values": "[\"a\",\"c\",\"h\",\"l\",\"m\",\"q\",\"s\",\"t\",\"v\",\"z\",\"A\",\"C\",\"H\",\"L\",\"M\",\"Q\",\"S\",\"T\",\"V\",\"Z\"]",
						"types": [
							"string"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 445
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.SVGRenderer",
						"description": "Allows direct access to the Highcharts rendering layer in order to draw\nprimitive shapes like circles, rectangles, paths or text directly on a chart,\nor independent from any chart. The SVGRenderer represents a wrapper object\nfor SVG in modern browsers. Through the VMLRenderer, part of the `oldie.js`\nmodule, it also brings vector graphics to IE <= 8.\n\nAn existing chart's renderer can be accessed through {@link Chart.renderer}.\nThe renderer can also be used completely decoupled from a chart.",
						"kind": "class"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 5595
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.Element",
								"description": "A pointer to the renderer's associated Element class. The VMLRenderer\nwill have a pointer to VMLElement here.",
								"kind": "member",
								"types": [
									"Highcharts.SVGElement"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 5637
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.arc",
								"description": "Draw and return an arc. Overloaded function that takes arguments object.",
								"kind": "function",
								"parameters": {
									"attribs": {
										"description": "Initial SVG attributes.",
										"types": [
											"Highcharts.SVGAttributes"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGElement"
									],
									"description": "The generated wrapper element."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 6861
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.arc",
								"description": "Draw and return an arc.",
								"kind": "function",
								"parameters": {
									"x": {
										"description": "Center X position.",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"y": {
										"description": "Center Y position.",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"r": {
										"description": "The outer radius of the arc.",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"innerR": {
										"description": "Inner radius like used in donut charts.",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"start": {
										"description": "The starting angle of the arc in radians, where 0 is to the right\n        and `-Math.PI/2` is up.",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"end": {
										"description": "The ending angle of the arc in radians, where 0 is to the right\n       and `-Math.PI/2` is up.",
										"isOptional": true,
										"types": [
											"number"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGElement"
									],
									"description": "The generated wrapper element."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 6861
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.box",
								"description": "The root `svg` node of the renderer.",
								"kind": "member",
								"types": [
									"Highcharts.SVGDOMElement"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 5717
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.boxWrapper",
								"description": "The wrapper for the root `svg` node of the renderer.",
								"kind": "member",
								"types": [
									"Highcharts.SVGElement"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 5724
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.button",
								"description": "Create a button with preset states.",
								"kind": "function",
								"parameters": {
									"text": {
										"description": "The text or HTML to draw.",
										"types": [
											"string"
										]
									},
									"x": {
										"description": "The x position of the button's left side.",
										"types": [
											"number"
										]
									},
									"y": {
										"description": "The y position of the button's top side.",
										"types": [
											"number"
										]
									},
									"callback": {
										"description": "The function to execute on button click or touch.",
										"types": [
											"function"
										]
									},
									"normalState": {
										"description": "SVG attributes for the normal state.",
										"isOptional": true,
										"types": [
											"Highcharts.SVGAttributes"
										]
									},
									"hoverState": {
										"description": "SVG attributes for the hover state.",
										"isOptional": true,
										"types": [
											"Highcharts.SVGAttributes"
										]
									},
									"pressedState": {
										"description": "SVG attributes for the pressed state.",
										"isOptional": true,
										"types": [
											"Highcharts.SVGAttributes"
										]
									},
									"disabledState": {
										"description": "SVG attributes for the disabled state.",
										"isOptional": true,
										"types": [
											"Highcharts.SVGAttributes"
										]
									},
									"shape": {
										"description": "The shape type.",
										"isOptional": true,
										"types": [
											"Highcharts.SymbolKey"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGElement"
									],
									"description": "The button element."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 6569
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.circle",
								"description": "Draw a circle, wraps the SVG `circle` element.",
								"kind": "function",
								"parameters": {
									"x": {
										"description": "The center x position.",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"y": {
										"description": "The center y position.",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"r": {
										"description": "The radius.",
										"isOptional": true,
										"types": [
											"number"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGElement"
									],
									"description": "The generated wrapper element."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 6815
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.circle",
								"description": "Draw a circle, wraps the SVG `circle` element.",
								"kind": "function",
								"parameters": {
									"attribs": {
										"description": "The initial attributes.",
										"isOptional": true,
										"types": [
											"Highcharts.SVGAttributes"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGElement"
									],
									"description": "The generated wrapper element."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 6815
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.clipRect",
								"description": "Define a clipping rectangle. The clipping rectangle is later applied\nto {@link SVGElement} objects through the {@link SVGElement#clip}\nfunction.",
								"kind": "function",
								"parameters": {
									"id": {
										"types": [
											"string"
										]
									},
									"x": {
										"types": [
											"number"
										]
									},
									"y": {
										"types": [
											"number"
										]
									},
									"width": {
										"types": [
											"number"
										]
									},
									"height": {
										"types": [
											"number"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.ClipRectElement"
									],
									"description": "A clipping rectangle."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 7561
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.constructor",
								"description": "Allows direct access to the Highcharts rendering layer in order to draw\nprimitive shapes like circles, rectangles, paths or text directly on a chart,\nor independent from any chart. The SVGRenderer represents a wrapper object\nfor SVG in modern browsers. Through the VMLRenderer, part of the `oldie.js`\nmodule, it also brings vector graphics to IE <= 8.\n\nAn existing chart's renderer can be accessed through {@link Chart.renderer}.\nThe renderer can also be used completely decoupled from a chart.",
								"kind": "constructor",
								"parameters": {
									"container": {
										"description": "Where to put the SVG in the web page.",
										"types": [
											"Highcharts.HTMLDOMElement"
										]
									},
									"width": {
										"description": "The width of the SVG.",
										"types": [
											"number"
										]
									},
									"height": {
										"description": "The height of the SVG.",
										"types": [
											"number"
										]
									},
									"forExport": {
										"description": "Whether the rendered content is intended for export.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									},
									"allowHTML": {
										"description": "Whether the renderer is allowed to include HTML text, which will be\n       projected on top of the SVG.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 0
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.createElement",
								"description": "Create a wrapper for an SVG element. Serves as a factory for\n{@link SVGElement}, but this function is itself mostly called from\nprimitive factories like {@link SVGRenderer#path}, {@link SVGRenderer#rect} or {@link SVGRenderer#text}.",
								"kind": "function",
								"parameters": {
									"nodeName": {
										"description": "The node name, for example `rect`, `g` etc.",
										"types": [
											"string"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGElement"
									],
									"description": "The generated SVGElement."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 5946
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.crispLine",
								"description": "Make a straight line crisper by not spilling out to neighbour pixels.",
								"kind": "function",
								"parameters": {
									"points": {
										"description": "The original points on the format `['M', 0, 0, 'L', 100, 0]`.",
										"types": [
											"Highcharts.SVGPathArray"
										]
									},
									"width": {
										"description": "The width of the line.",
										"types": [
											"number"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGPathArray"
									],
									"description": "The original points array, but modified to render crisply."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 6743
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.definition",
								"description": "General method for adding a definition to the SVG `defs` tag. Can be used\nfor gradients, fills, filters etc. Styled mode only. A hook for adding\ngeneral definitions to the SVG's defs tag. Definitions can be referenced\nfrom the CSS by its `id`. Read more in\n[gradients, shadows and patterns](https://www.highcharts.com/docs/chart-design-and-style/gradients-shadows-and-patterns).\nStyled mode only.",
								"kind": "function",
								"parameters": {
									"def": {
										"description": "A serialized form of an SVG definition, including children.",
										"types": [
											"Highcharts.SVGDefinitionObject"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGElement"
									],
									"description": "The inserted node."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 5805
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.defs",
								"description": "A pointer to the `defs` node of the root SVG.",
								"kind": "member",
								"types": [
									"Highcharts.SVGElement"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 5760
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.destroy",
								"description": "Destroys the renderer and its allocated members.",
								"kind": "function",
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 5915
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.draw",
								"description": "Dummy function for plugins, called every time the renderer is updated.\nPrior to Highcharts 5, this was used for the canvg renderer.",
								"kind": "function",
								"isDeprecated": true,
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 5966
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.escapes",
								"description": "A collection of characters mapped to HTML entities. When `useHTML` on an\nelement is true, these entities will be rendered correctly by HTML. In\nthe SVG pseudo-HTML, they need to be unescaped back to simple characters,\nso for example `&lt;` will render as `<`.",
								"kind": "member",
								"types": [
									"Highcharts.Dictionary.<string>"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 6137
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.fontMetrics",
								"description": "Utility to return the baseline offset and total line height from the font\nsize.",
								"kind": "function",
								"parameters": {
									"fontSize": {
										"description": "The current font size to inspect. If not given, the font size\n       will be found from the DOM element.",
										"isOptional": true,
										"types": [
											"string"
										]
									},
									"elem": {
										"description": "The element to inspect for a current font size.",
										"isOptional": true,
										"types": [
											"Highcharts.SVGElement",
											"Highcharts.SVGDOMElement"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.FontMetricsObject"
									],
									"description": "The font metrics."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 7683
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.g",
								"description": "Create and return an svg group element. Child\n{@link Highcharts.SVGElement} objects are added to the group by using the\ngroup as the first parameter in {@link Highcharts.SVGElement#add|add()}.",
								"kind": "function",
								"parameters": {
									"name": {
										"description": "The group will be given a class name of `highcharts-{name}`. This\n       can be used for styling and scripting.",
										"isOptional": true,
										"types": [
											"string"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGElement"
									],
									"description": "The generated wrapper element."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 7048
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.getContrast",
								"description": "Returns white for dark colors and black for bright colors.",
								"kind": "function",
								"parameters": {
									"rgba": {
										"description": "The color to get the contrast for.",
										"types": [
											"Highcharts.ColorString"
										]
									}
								},
								"return": {
									"types": [
										"string"
									],
									"description": "The contrast color, either `#000000` or `#FFFFFF`."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 6546
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.image",
								"description": "Display an image.",
								"kind": "function",
								"parameters": {
									"src": {
										"description": "The image source.",
										"types": [
											"string"
										]
									},
									"x": {
										"description": "The X position.",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"y": {
										"description": "The Y position.",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"width": {
										"description": "The image width. If omitted, it defaults to the image file width.",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"height": {
										"description": "The image height. If omitted it defaults to the image file\n       height.",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"onload": {
										"description": "Event handler for image load.",
										"isOptional": true,
										"types": [
											"function"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGElement"
									],
									"description": "The generated wrapper element."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 7067
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.init",
								"description": "Initialize the SVGRenderer. Overridable initiator function that takes\nthe same parameters as the constructor.",
								"kind": "function",
								"parameters": {
									"container": {
										"description": "Where to put the SVG in the web page.",
										"types": [
											"Highcharts.HTMLDOMElement"
										]
									},
									"width": {
										"description": "The width of the SVG.",
										"types": [
											"number"
										]
									},
									"height": {
										"description": "The height of the SVG.",
										"types": [
											"number"
										]
									},
									"forExport": {
										"description": "Whether the rendered content is intended for export.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									},
									"allowHTML": {
										"description": "Whether the renderer is allowed to include HTML text, which will\n       be projected on top of the SVG.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									},
									"styledMode": {
										"description": "Whether the renderer belongs to a chart that is in styled mode.\n       If it does, it will avoid setting presentational attributes in\n       some cases, but not when set explicitly through `.attr` and `.css`\n       etc.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 5648
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.isHidden",
								"description": "Detect whether the renderer is hidden. This happens when one of the\nparent elements has `display: none`. Used internally to detect when we\nneedto render preliminarily in another div to get the text bounding boxes\nright.",
								"kind": "function",
								"return": {
									"types": [
										"boolean"
									],
									"description": "True if it is hidden."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 5900
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.label",
								"description": "Draw a label, which is an extended text element with support for border\nand background. Highcharts creates a `g` element with a text and a `path`\nor `rect` inside, to make it behave somewhat like a HTML div. Border and\nbackground are set through `stroke`, `stroke-width` and `fill` attributes\nusing the {@link Highcharts.SVGElement#attr|attr} method. To update the\ntext after render, run `label.attr({ text: 'New text' })`.",
								"kind": "function",
								"parameters": {
									"str": {
										"description": "The initial text string or (subset) HTML to render.",
										"types": [
											"string"
										]
									},
									"x": {
										"description": "The x position of the label's left side.",
										"types": [
											"number"
										]
									},
									"y": {
										"description": "The y position of the label's top side or baseline, depending on\n       the `baseline` parameter.",
										"types": [
											"number"
										]
									},
									"shape": {
										"description": "The shape of the label's border/background, if any. Defaults to\n       `rect`. Other possible values are `callout` or other shapes\n       defined in {@link Highcharts.SVGRenderer#symbols}.",
										"isOptional": true,
										"types": [
											"string"
										]
									},
									"anchorX": {
										"description": "In case the `shape` has a pointer, like a flag, this is the\n       coordinates it should be pinned to.",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"anchorY": {
										"description": "In case the `shape` has a pointer, like a flag, this is the\n       coordinates it should be pinned to.",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"useHTML": {
										"description": "Wether to use HTML to render the label.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									},
									"baseline": {
										"description": "Whether to position the label relative to the text baseline,\n       like {@link Highcharts.SVGRenderer#text|renderer.text}, or to the\n       upper border of the rectangle.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									},
									"className": {
										"description": "Class name for the group.",
										"isOptional": true,
										"types": [
											"string"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGElement"
									],
									"description": "The generated label."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 7763
									}
								]
							},
							"children": []
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.path",
								"description": "Draw a path, wraps the SVG `path` element.",
								"kind": "function",
								"parameters": {
									"attribs": {
										"description": "The initial attributes.",
										"isOptional": true,
										"types": [
											"Highcharts.SVGAttributes"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGElement"
									],
									"description": "The generated wrapper element."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 6771
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.path",
								"description": "Draw a path, wraps the SVG `path` element.",
								"kind": "function",
								"parameters": {
									"path": {
										"description": "An SVG path definition in array form.",
										"isOptional": true,
										"types": [
											"Highcharts.SVGPathArray"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGElement"
									],
									"description": "The generated wrapper element."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 6771
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.rect",
								"description": "Draw and return a rectangle.",
								"kind": "function",
								"parameters": {
									"attributes": {
										"description": "General SVG attributes for the rectangle.",
										"isOptional": true,
										"types": [
											"Highcharts.SVGAttributes"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGElement"
									],
									"description": "The generated wrapper element."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 6929
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.rect",
								"description": "Draw and return a rectangle.",
								"kind": "function",
								"parameters": {
									"x": {
										"description": "Left position.",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"y": {
										"description": "Top position.",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"width": {
										"description": "Width of the rectangle.",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"height": {
										"description": "Height of the rectangle.",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"r": {
										"description": "Border corner radius.",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"strokeWidth": {
										"description": "A stroke width can be supplied to allow crisp drawing.",
										"isOptional": true,
										"types": [
											"number"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGElement"
									],
									"description": "The generated wrapper element."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 6929
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.setSize",
								"description": "Resize the {@link SVGRenderer#box} and re-align all aligned child\nelements.",
								"kind": "function",
								"parameters": {
									"width": {
										"description": "The new pixel width.",
										"types": [
											"number"
										]
									},
									"height": {
										"description": "The new pixel height.",
										"types": [
											"number"
										]
									},
									"animate": {
										"description": "Whether and how to animate.",
										"isOptional": true,
										"types": [
											"boolean",
											"Highcharts.AnimationOptionsObject"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 7004
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.setStyle",
								"description": "Apply the global style on the renderer, mixed with the default styles.",
								"kind": "function",
								"parameters": {
									"style": {
										"description": "CSS to apply.",
										"types": [
											"Highcharts.CSSObject"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 5888
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.symbol",
								"description": "Draw a symbol out of pre-defined shape paths from\n{@link SVGRenderer#symbols}.\nIt is used in Highcharts for point makers, which cake a `symbol` option,\nand label and button backgrounds like in the tooltip and stock flags.",
								"kind": "function",
								"parameters": {
									"symbol": {
										"description": "The symbol name.",
										"types": [
											"symbol"
										]
									},
									"x": {
										"description": "The X coordinate for the top left position.",
										"types": [
											"number"
										]
									},
									"y": {
										"description": "The Y coordinate for the top left position.",
										"types": [
											"number"
										]
									},
									"width": {
										"description": "The pixel width.",
										"types": [
											"number"
										]
									},
									"height": {
										"description": "The pixel height.",
										"types": [
											"number"
										]
									},
									"options": {
										"description": "Additional options, depending on the actual symbol drawn.",
										"isOptional": true,
										"types": [
											"Highcharts.SymbolOptionsObject"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGElement"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 7157
									}
								]
							},
							"children": [
								{
									"doclet": {
										"name": "Highcharts.SVGRenderer.symbol.centerImage",
										"description": "Set the size and position",
										"kind": "function",
										"return": {
											"types": [
												"void"
											]
										}
									},
									"meta": {
										"files": [
											{
												"path": "code/highcharts.src.js",
												"line": 7252
											}
										]
									}
								}
							]
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.symbols",
								"description": "An extendable collection of functions for defining symbol paths.",
								"kind": "member",
								"types": [
									"Highcharts.SymbolDictionary"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 7348
									}
								]
							},
							"children": [
								{
									"doclet": {
										"name": "Highcharts.SVGRenderer.symbols.callout",
										"description": "Callout shape used for default tooltips, also used for rounded\nrectangles in VML",
										"kind": "function",
										"isStatic": true,
										"return": {
											"types": [
												"void"
											]
										}
									},
									"meta": {
										"files": [
											{
												"path": "code/highcharts.src.js",
												"line": 7459
											}
										]
									}
								}
							]
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.text",
								"description": "Draw text. The text can contain a subset of HTML, like spans and anchors\nand some basic text styling of these. For more advanced features like\nborder and background, use {@link Highcharts.SVGRenderer#label} instead.\nTo update the text after render, run `text.attr({ text: 'New text' })`.",
								"kind": "function",
								"parameters": {
									"str": {
										"description": "The text of (subset) HTML to draw.",
										"types": [
											"string"
										]
									},
									"x": {
										"description": "The x position of the text's lower left corner.",
										"types": [
											"number"
										]
									},
									"y": {
										"description": "The y position of the text's lower left corner.",
										"types": [
											"number"
										]
									},
									"useHTML": {
										"description": "Use HTML to render the text.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGElement"
									],
									"description": "The text object."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 7610
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.SelectDataObject",
						"description": "Axis-specific data of a selection.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 22978
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.SelectDataObject.axis",
								"description": "",
								"kind": "member",
								"types": [
									"Highcharts.Axis"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 22978
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SelectDataObject.max",
								"description": "",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 22978
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SelectDataObject.min",
								"description": "",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 22978
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.SelectEventObject",
						"description": "Object for select events.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 22993
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.SelectEventObject.originalEvent",
								"description": "",
								"kind": "member",
								"types": [
									"global.Event"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 22993
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SelectEventObject.xAxis",
								"description": "",
								"kind": "member",
								"types": [
									"Array.<Highcharts.SelectDataObject>"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 22993
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SelectEventObject.yAxis",
								"description": "",
								"kind": "member",
								"types": [
									"Array.<Highcharts.SelectDataObject>"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 22993
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.Series",
						"description": "This is the base series prototype that all other series types inherit from.\nA new series is initialized either through the\n[series](https://api.highcharts.com/highcharts/series)\noption structure, or after the chart is initialized, through\n{@link Highcharts.Chart#addSeries}.\n\nThe object can be accessed in a number of ways. All series and point event\nhandlers give a reference to the `series` object. The chart object has a\n{@link Highcharts.Chart#series|series} property that is a collection of all\nthe chart's series. The point objects and axis objects also have the same\nreference.\n\nAnother way to reference the series programmatically is by `id`. Add an id\nin the series configuration options, and get the series object by\n{@link Highcharts.Chart#get}.\n\nConfiguration options for the series are given in three levels. Options for\nall series in a chart are given in the\n[plotOptions.series](https://api.highcharts.com/highcharts/plotOptions.series)\nobject. Then options for all series of a specific type\nare given in the plotOptions of that type, for example `plotOptions.line`.\nNext, options for one single series are given in the series array, or as\narguments to `chart.addSeries`.\n\nThe data in the series is stored in various arrays.\n\n- First, `series.options.data` contains all the original config options for\n each point whether added by options or methods like `series.addPoint`.\n\n- Next, `series.data` contains those values converted to points, but in case\n the series data length exceeds the `cropThreshold`, or if the data is\n grouped, `series.data` doesn't contain all the points. It only contains the\n points that have been created on demand.\n\n- Then there's `series.points` that contains all currently visible point\n objects. In case of cropping, the cropped-away points are not part of this\n array. The `series.points` array starts at `series.cropStart` compared to\n `series.data` and `series.options.data`. If however the series data is\n grouped, these can't be correlated one to one.\n\n- `series.xData` and `series.processedXData` contain clean x values,\n equivalent to `series.data` and `series.points`.\n\n- `series.yData` and `series.processedYData` contain clean y values,\n equivalent to `series.data` and `series.points`.",
						"kind": "class"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 29568
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.Series.addPoint",
								"description": "Add a point to the series after render time. The point can be added at\nthe end, or by giving it an X value, to the start or in the middle of the\nseries.",
								"kind": "function",
								"parameters": {
									"options": {
										"description": "The point options. If options is a single number, a point with\n       that y value is appended to the series. If it is an array, it will\n       be interpreted as x and y values respectively. If it is an\n       object, advanced options as outlined under `series.data` are\n       applied.",
										"types": [
											"number",
											"object",
											"Array.<(number|string)>",
											"null"
										]
									},
									"redraw": {
										"description": "Whether to redraw the chart after the point is added. When adding\n       more than one point, it is highly recommended that the redraw\n       option be set to false, and instead {@link Chart#redraw} is\n       explicitly called after the adding of points is finished.\n       Otherwise, the chart will redraw after adding each point.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									},
									"shift": {
										"description": "If true, a point is shifted off the start of the series as one is\n       appended to the end.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									},
									"animation": {
										"description": "Whether to apply animation, and optionally animation\n       configuration.",
										"isOptional": true,
										"types": [
											"boolean",
											"Highcharts.AnimationOptionsObject"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 36288
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.animate",
								"description": "Animate in the series. Called internally twice. First with the `init`\nparameter set to true, which sets up the initial state of the animation.\nThen when ready, it is called with the `init` parameter undefined, in\norder to perform the actual animation. After the second run, the function\nis removed.",
								"kind": "function",
								"parameters": {
									"init": {
										"description": "Initialize the animation.",
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 33440
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.chart",
								"description": "Read only. The chart that the series belongs to.",
								"kind": "member",
								"types": [
									"Highcharts.Chart"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 31900
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.constructor",
								"description": "This is the base series prototype that all other series types inherit from.\nA new series is initialized either through the\n[series](https://api.highcharts.com/highcharts/series)\noption structure, or after the chart is initialized, through\n{@link Highcharts.Chart#addSeries}.\n\nThe object can be accessed in a number of ways. All series and point event\nhandlers give a reference to the `series` object. The chart object has a\n{@link Highcharts.Chart#series|series} property that is a collection of all\nthe chart's series. The point objects and axis objects also have the same\nreference.\n\nAnother way to reference the series programmatically is by `id`. Add an id\nin the series configuration options, and get the series object by\n{@link Highcharts.Chart#get}.\n\nConfiguration options for the series are given in three levels. Options for\nall series in a chart are given in the\n[plotOptions.series](https://api.highcharts.com/highcharts/plotOptions.series)\nobject. Then options for all series of a specific type\nare given in the plotOptions of that type, for example `plotOptions.line`.\nNext, options for one single series are given in the series array, or as\narguments to `chart.addSeries`.\n\nThe data in the series is stored in various arrays.\n\n- First, `series.options.data` contains all the original config options for\n each point whether added by options or methods like `series.addPoint`.\n\n- Next, `series.data` contains those values converted to points, but in case\n the series data length exceeds the `cropThreshold`, or if the data is\n grouped, `series.data` doesn't contain all the points. It only contains the\n points that have been created on demand.\n\n- Then there's `series.points` that contains all currently visible point\n objects. In case of cropping, the cropped-away points are not part of this\n array. The `series.points` array starts at `series.cropStart` compared to\n `series.data` and `series.options.data`. If however the series data is\n grouped, these can't be correlated one to one.\n\n- `series.xData` and `series.processedXData` contain clean x values,\n equivalent to `series.data` and `series.points`.\n\n- `series.yData` and `series.processedYData` contain clean y values,\n equivalent to `series.data` and `series.points`.",
								"kind": "constructor",
								"parameters": {
									"chart": {
										"description": "The chart instance.",
										"types": [
											"Highcharts.Chart"
										]
									},
									"options": {
										"description": "The series options.",
										"types": [
											"Highcharts.SeriesOptionsType",
											"object"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 0
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.data",
								"description": "Read only. An array containing those values converted to points.\nIn case the series data length exceeds the `cropThreshold`, or if the\ndata is grouped, `series.data` doesn't contain all the points. Also,\nin case a series is hidden, the `data` array may be empty. To access\nraw values, `series.options.data` will always be up to date.\n`Series.data` only contains the points that have been created on\ndemand. To modify the data, use {@link Highcharts.Series#setData} or\n{@link Highcharts.Point#update}.",
								"kind": "member",
								"see": [
									"Series.points"
								],
								"types": [
									"Array.<Highcharts.Point>"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 33031
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.drawGraph",
								"description": "Draw the graph. Called internally when rendering line-like series types.\nThe first time it generates the `series.graph` item and optionally other\nseries-wide items like `series.area` for area charts. On subsequent calls\nthese items are updated with new positions and attributes.",
								"kind": "function",
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 33985
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.drawPoints",
								"description": "Draw the markers for line-like series types, and columns or other\ngraphical representation for {@link Point} objects for other series\ntypes. The resulting element is typically stored as\n{@link Point.graphic}, and is created on the first call and updated and\nmoved on subsequent calls.",
								"kind": "function",
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 33501
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.enterBoost",
								"description": "Enter boost mode and apply boost-specific properties.",
								"kind": "function",
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/boost.src.js",
										"line": 3176
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.exitBoost",
								"description": "Exit from boost mode and restore non-boost properties.",
								"kind": "function",
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/boost.src.js",
										"line": 3209
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.getColor",
								"description": "Get the series' color based on either the options or pulled from global\noptions.",
								"kind": "function",
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 32382
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.getExtremes",
								"description": "Calculate Y extremes for the visible data. The result is set as\n`dataMin` and `dataMax` on the Series item.",
								"kind": "function",
								"parameters": {
									"yData": {
										"description": "The data to inspect. Defaults to the current data within the\n       visible range.",
										"isOptional": true,
										"types": [
											"Array.<number>"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 33063
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.getName",
								"description": "Return series name in \"Series {Number}\" format or the one defined by a\nuser. This method can be simply overridden as series name format can\nvary (e.g. technical indicators).",
								"kind": "function",
								"return": {
									"types": [
										"string"
									],
									"description": "The series name."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 32318
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.getPlotBox",
								"description": "Get the translation and scale for the plot area of this series.",
								"kind": "function",
								"return": {
									"types": [
										"Highcharts.SeriesPlotBoxObject"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 34351
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.getPoint",
								"description": "Return a full Point object based on the index.\nThe boost module uses stripped point objects for performance reasons.",
								"kind": "function",
								"parameters": {
									"boostPoint": {
										"description": "A stripped-down point object",
										"types": [
											"object",
											"Highcharts.Point"
										]
									}
								},
								"return": {
									"types": [
										"object"
									],
									"description": "A Point object as per http://api.highcharts.com/highcharts#Point"
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/boost.src.js",
										"line": 2964
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.getSymbol",
								"description": "Get the series' symbol based on either the options or pulled from global\noptions.",
								"kind": "function",
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 32405
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.getValidPoints",
								"description": "Return the series points with null points filtered out.",
								"kind": "function",
								"parameters": {
									"points": {
										"description": "The points to inspect, defaults to {@link Series.points}.",
										"isOptional": true,
										"types": [
											"Array.<Highcharts.Point>"
										]
									},
									"insideOnly": {
										"description": "Whether to inspect only the points that are inside the visible\n       view.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"Array.<Highcharts.Point>"
									],
									"description": "The valid points."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 33331
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.hide",
								"description": "Hide the series if visible. If the {@link\nhttps://api.highcharts.com/highcharts/chart.ignoreHiddenSeries|\nchart.ignoreHiddenSeries} option is true, the chart is redrawn without\nthis series.",
								"kind": "function",
								"fires": [
									"Highcharts.Series#hide"
								],
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 43514
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.markerAttribs",
								"description": "Get non-presentational attributes for a point. Used internally for both\nstyled mode and classic. Can be overridden for different series types.",
								"kind": "function",
								"see": [
									"Series#pointAttribs"
								],
								"parameters": {
									"point": {
										"description": "The Point to inspect.",
										"types": [
											"Highcharts.Point"
										]
									},
									"state": {
										"description": "The state, can be either `hover`, `select` or undefined.",
										"isOptional": true,
										"types": [
											"string"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGAttributes"
									],
									"description": "A hash containing those attributes that are not settable from\n        CSS."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 33621
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.name",
								"description": "The series name as given in the options. Defaults to\n\"Series {n}\".",
								"kind": "member",
								"types": [
									"string"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 31931
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.onMouseOut",
								"description": "Runs on mouse out of the series graphical items.",
								"kind": "function",
								"fires": [
									"Highcharts.Series#mouseOut"
								],
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 43285
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.onMouseOver",
								"description": "Runs on mouse over the series graphical items.",
								"kind": "function",
								"fires": [
									"Highcharts.Series#mouseOver"
								],
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 43257
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.options",
								"description": "Read only. The series' current options. To update, use\n{@link Series#update}.",
								"kind": "member",
								"types": [
									"Highcharts.SeriesOptionsType"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 31917
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.points",
								"description": "An array containing all currently visible point objects. In case of\ncropping, the cropped-away points are not part of this array. The\n`series.points` array starts at `series.cropStart` compared to\n`series.data` and `series.options.data`. If however the series data\nis grouped, these can't be correlated one to one. To\nmodify the data, use {@link Highcharts.Series#setData} or {@link Highcharts.Point#update}.",
								"kind": "member",
								"types": [
									"Array.<Highcharts.Point>"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 33048
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.remove",
								"description": "Remove a series and optionally redraw the chart.",
								"kind": "function",
								"fires": [
									"Highcharts.Series#remove"
								],
								"parameters": {
									"redraw": {
										"description": "Whether to redraw the chart or wait for an explicit call to\n       {@link Highcharts.Chart#redraw}.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									},
									"animation": {
										"description": "Whether to apply animation, and optionally animation\n       configuration.",
										"isOptional": true,
										"types": [
											"boolean",
											"Highcharts.AnimationOptionsObject"
										]
									},
									"withEvent": {
										"description": "Used internally, whether to fire the series `remove` event.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 36477
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.removePoint",
								"description": "Remove a point from the series. Unlike the\n{@link Highcharts.Point#remove} method, this can also be done on a point\nthat is not instanciated because it is outside the view or subject to\nHighstock data grouping.",
								"kind": "function",
								"fires": [
									"Highcharts.Point#remove"
								],
								"parameters": {
									"i": {
										"description": "The index of the point in the {@link Highcharts.Series.data|data}\n       array.",
										"types": [
											"number"
										]
									},
									"redraw": {
										"description": "Whether to redraw the chart after the point is added. When\n       removing more than one point, it is highly recommended that the\n       `redraw` option be set to `false`, and instead {@link\n       Highcharts.Chart#redraw} is explicitly called after the adding of\n       points is finished.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									},
									"animation": {
										"description": "Whether and optionally how the series should be animated.",
										"isOptional": true,
										"types": [
											"boolean",
											"Highcharts.AnimationOptionsObject"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 36406
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.render",
								"description": "Render the graph and markers. Called internally when first rendering and\nlater when redrawing the chart. This function can be extended in plugins,\nbut normally shouldn't be called directly.",
								"kind": "function",
								"fires": [
									"Highcharts.Series#afterRender"
								],
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 34376
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.select",
								"description": "Select or unselect the series. This means its\n{@link Highcharts.Series.selected|selected}\nproperty is set, the checkbox in the legend is toggled and when selected,\nthe series is returned by the\n{@link Highcharts.Chart#getSelectedSeries}\nfunction.",
								"kind": "function",
								"fires": [
									"Highcharts.Series#select",
									"Highcharts.Series#unselect"
								],
								"parameters": {
									"selected": {
										"description": "True to select the series, false to unselect. If undefined, the\n       selection state is toggled.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 43532
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.selected",
								"description": "Read only. The series' selected state as set by {@link Highcharts.Series#select}.",
								"kind": "member",
								"types": [
									"boolean"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 31949
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.setCompare",
								"description": "Highstock only. Set the\n[compare](https://api.highcharts.com/highstock/plotOptions.series.compare)\nmode of the series after render time. In most cases it is more useful running\n{@link Axis#setCompare} on the X axis to update all its series.",
								"kind": "function",
								"parameters": {
									"compare": {
										"description": "Can be one of `null`, `\"percent\"` or `\"value\"`.",
										"types": [
											"string"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/stock.src.js",
										"line": 10494
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.setData",
								"description": "Apply a new set of data to the series and optionally redraw it. The new\ndata array is passed by reference (except in case of `updatePoints`), and\nmay later be mutated when updating the chart data.\n\nNote the difference in behaviour when setting the same amount of points,\nor a different amount of points, as handled by the `updatePoints`\nparameter.",
								"kind": "function",
								"parameters": {
									"data": {
										"description": "Takes an array of data in the same format as described under\n       `series.{type}.data` for the given series type, for example a\n       line series would take data in the form described under\n       [series.line.data](https://api.highcharts.com/highcharts/series.line.data).",
										"types": [
											"Array.<*>"
										]
									},
									"redraw": {
										"description": "Whether to redraw the chart after the series is altered. If doing\n       more operations on the chart, it is a good idea to set redraw to\n       false and call {@link Chart#redraw} after.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									},
									"animation": {
										"description": "When the updated data is the same length as the existing data,\n       points will be updated by default, and animation visualizes how\n       the points are changed. Set false to disable animation, or a\n       configuration object to set duration or easing.",
										"isOptional": true,
										"types": [
											"Highcharts.AnimationOptionsObject"
										]
									},
									"updatePoints": {
										"description": "When this is true, points will be updated instead of replaced\n       whenever possible. This occurs a) when the updated data is the\n       same length as the existing data, b) when points are matched by\n       their id's, or c) when points can be matched by X values. This\n       allows updating with animation and performs better. In this case,\n       the original array is not passed by reference. Set `false` to\n       prevent.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 32550
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.setOptions",
								"description": "Set the series options by merging from the options tree. Called\ninternally on initiating and updating series. This function will not\nredraw the series. For API usage, use {@link Series#update}.",
								"kind": "function",
								"fires": [
									"Highcharts.Series#afterSetOptions"
								],
								"parameters": {
									"itemOptions": {
										"description": "The series options.",
										"types": [
											"Highcharts.SeriesOptionsType"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SeriesOptionsType"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 32210
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.setState",
								"description": "Set the state of the series. Called internally on mouse interaction\noperations, but it can also be called directly to visually\nhighlight a series.",
								"kind": "function",
								"parameters": {
									"state": {
										"description": "Can be either `hover` or undefined to set to normal state.",
										"isOptional": true,
										"types": [
											"string"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 43327
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.setVisible",
								"description": "Show or hide the series.",
								"kind": "function",
								"fires": [
									"Highcharts.Series#hide",
									"Highcharts.Series#show"
								],
								"parameters": {
									"visible": {
										"description": "True to show the series, false to hide. If undefined, the\n       visibility is toggled.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									},
									"redraw": {
										"description": "Whether to redraw the chart after the series is altered. If doing\n       more operations on the chart, it is a good idea to set redraw to\n       false and call {@link Chart#redraw|chart.redraw()} after.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 43412
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.show",
								"description": "Show the series if hidden.",
								"kind": "function",
								"fires": [
									"Highcharts.Series#show"
								],
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 43500
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.translate",
								"description": "Translate data points from raw data values to chart specific positioning\ndata needed later in the `drawPoints` and `drawGraph` functions. This\nfunction can be overridden in plugins and custom series type\nimplementations.",
								"kind": "function",
								"fires": [
									"Highcharts.Series#events:translate"
								],
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 33137
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.type",
								"description": "Read only. The series' type, like \"line\", \"area\", \"column\" etc. The\ntype in the series options anc can be altered using\n{@link Series#update}.",
								"kind": "member",
								"types": [
									"string"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 31908
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.update",
								"description": "Update the series with a new set of options. For a clean and precise\nhandling of new options, all methods and elements from the series are\nremoved, and it is initiated from scratch. Therefore, this method is more\nperformance expensive than some other utility methods like {@link Series#setData} or {@link Series#setVisible}.",
								"kind": "function",
								"fires": [
									"Highcharts.Series#afterUpdate"
								],
								"parameters": {
									"options": {
										"description": "New options that will be merged with the series' existing options.",
										"types": [
											"Highcharts.SeriesOptionsType"
										]
									},
									"redraw": {
										"description": "Whether to redraw the chart after the series is altered. If doing\n       more operations on the chart, it is a good idea to set redraw to\n       false and call {@link Chart#redraw} after.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 36525
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.visible",
								"description": "Read only. The series' visibility state as set by {@link Series#show}, {@link Series#hide}, or in the initial\nconfiguration.",
								"kind": "member",
								"types": [
									"boolean"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 31940
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.xAxis",
								"description": "Read only. The unique xAxis object associated with the\nseries.",
								"kind": "member",
								"types": [
									"Highcharts.Axis"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 32085
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.yAxis",
								"description": "Read only. The unique yAxis object associated with the\nseries.",
								"kind": "member",
								"types": [
									"Highcharts.Axis"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 32092
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.SeriesAfterAnimateCallbackFunction",
						"description": "Function callback when a series has been animated.",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"e": {
								"description": "Event arguments.",
								"types": [
									"Highcharts.SeriesAfterAnimateEventObject"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 29417
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.SeriesAfterAnimateEventObject",
						"description": "Event information regarding completed animation of a series.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 29426
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.SeriesAfterAnimateEventObject.target",
								"description": "Animated series.",
								"kind": "member",
								"types": [
									"Highcharts.Series"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 29426
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SeriesAfterAnimateEventObject.type",
								"description": "Event type.",
								"kind": "member",
								"types": [
									"\"afterAnimate\""
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 29426
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.SeriesCheckboxClickCallbackFunction",
						"description": "Function callback when the checkbox next to the series' name in the legend is\nclicked.",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"e": {
								"description": "Event arguments.",
								"types": [
									"Highcharts.SeriesCheckboxClickEventObject"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 29440
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.SeriesCheckboxClickEventObject",
						"description": "Event information regarding check of a series box.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 29450
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.SeriesCheckboxClickEventObject.checked",
								"description": "Whether the box has been checked.",
								"kind": "member",
								"types": [
									"boolean"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 29450
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SeriesCheckboxClickEventObject.item",
								"description": "Related series.",
								"kind": "member",
								"types": [
									"Highcharts.Series"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 29450
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SeriesCheckboxClickEventObject.target",
								"description": "Related series.",
								"kind": "member",
								"types": [
									"Highcharts.Series"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 29450
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SeriesCheckboxClickEventObject.type",
								"description": "Event type.",
								"kind": "member",
								"types": [
									"\"checkboxClick\""
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 29450
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.SeriesClickCallbackFunction",
						"description": "Function callback when a series is clicked. Return false to cancel toogle\nactions.",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"e": {
								"description": "Event arguments.",
								"types": [
									"Highcharts.SeriesClickEventObject"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 29484
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.SeriesClickEventObject",
						"description": "Common information for a click event on a series.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 29472
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.SeriesClickEventObject.point",
								"description": "Nearest point on the graph.",
								"kind": "member",
								"types": [
									"Highcharts.Point"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 29472
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.SeriesDataLabelsFormatterContextObject",
						"description": "",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 29494
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.SeriesDataLabelsFormatterContextObject.point",
								"description": "",
								"kind": "member",
								"types": [
									"Highcharts.Point"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 29494
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.SeriesPlotBoxObject",
						"description": "Translation and scale for the plot area of a series.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 29501
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.SeriesPlotBoxObject.scaleX",
								"description": "",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 29501
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SeriesPlotBoxObject.scaleY",
								"description": "",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 29501
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SeriesPlotBoxObject.translateX",
								"description": "",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 29501
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SeriesPlotBoxObject.translateY",
								"description": "",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 29501
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.SeriesPointClickCallbackFunction",
						"description": "Function callback when a series point is clicked. Return false to cancel the\naction.",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"e": {
								"description": "Event arguments.",
								"types": [
									"Highcharts.SeriesPointClickEventObject"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 29519
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.SeriesPointClickEventObject",
						"description": "Common information for a click event on a series point.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 29529
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.SeriesPointClickEventObject.point",
								"description": "Clicked point.",
								"kind": "member",
								"types": [
									"Highcharts.Point"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 29529
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.SeriesPointDragCallbackFunction",
						"description": "Function callback to execute while series points are dragged.",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"e": {
								"description": "Event arguments.",
								"types": [
									"Highcharts.SeriesPointDragEventObject"
								]
							}
						},
						"return": {
							"types": [
								"boolean"
							],
							"description": "Return false to stop the default drag action."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/draggable-points.src.js",
								"line": 28
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.SeriesPointDragEventObject",
						"description": "Contains common information for a drag event on series points.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/draggable-points.src.js",
								"line": 40
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.SeriesPointDragEventObject.newPoints",
								"description": "New points during drag.",
								"kind": "member",
								"types": [
									"Highcharts.Dictionary.<Highcharts.SeriesPointDragPointObject>"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/draggable-points.src.js",
										"line": 40
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SeriesPointDragEventObject.origin",
								"description": "Original data.",
								"kind": "member",
								"types": [
									"object"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/draggable-points.src.js",
										"line": 40
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SeriesPointDragEventObject.preventDefault",
								"description": "Prevent default drag action.",
								"kind": "member",
								"types": [
									"function"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/draggable-points.src.js",
										"line": 40
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SeriesPointDragEventObject.target",
								"description": "Target point that caused the event.",
								"kind": "member",
								"types": [
									"Highcharts.Point"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/draggable-points.src.js",
										"line": 40
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SeriesPointDragEventObject.type",
								"description": "Event type.",
								"kind": "member",
								"types": [
									"\"drag\""
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/draggable-points.src.js",
										"line": 40
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.SeriesPointDragPointObject",
						"description": "Contains information about a dragged points new values.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/draggable-points.src.js",
								"line": 66
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.SeriesPointDragPointObject.newValues",
								"description": "New values.",
								"kind": "member",
								"types": [
									"Highcharts.Dictionary.<number>"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/draggable-points.src.js",
										"line": 66
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SeriesPointDragPointObject.point",
								"description": "Dragged point.",
								"kind": "member",
								"types": [
									"Highcharts.Point"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/draggable-points.src.js",
										"line": 66
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.SeriesPointDragStartCallbackFunction",
						"description": "Function callback to execute when a series point is dragged.",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"e": {
								"description": "Event arguments.",
								"types": [
									"Highcharts.SeriesPointDragStartEventObject"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/draggable-points.src.js",
								"line": 80
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.SeriesPointDragStartEventObject",
						"description": "Contains common information for a drag event on series point.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/draggable-points.src.js",
								"line": 89
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.SeriesPointDragStartEventObject.updateProp",
								"description": "Data property being dragged.",
								"kind": "member",
								"types": [
									"Highcharts.Dictionary.<number>"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/draggable-points.src.js",
										"line": 89
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.SeriesPointDropCallbackFunction",
						"description": "Function callback to execute when series points are dropped.",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"e": {
								"description": "Event arguments.",
								"types": [
									"Highcharts.SeriesPointDropEventObject"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/draggable-points.src.js",
								"line": 101
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.SeriesPointDropEventObject",
						"description": "Contains common information for a drop event on series points.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/draggable-points.src.js",
								"line": 110
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.SeriesPointDropEventObject.newPoints",
								"description": "New points after drop.",
								"kind": "member",
								"types": [
									"Highcharts.Dictionary.<Highcharts.SeriesPointDropPointObject>"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/draggable-points.src.js",
										"line": 110
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SeriesPointDropEventObject.numNewPoints",
								"description": "Number of new points.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/draggable-points.src.js",
										"line": 110
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SeriesPointDropEventObject.origin",
								"description": "Original data.",
								"kind": "member",
								"types": [
									"object"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/draggable-points.src.js",
										"line": 110
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SeriesPointDropEventObject.preventDefault",
								"description": "Prevent default drop action.",
								"kind": "member",
								"types": [
									"function"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/draggable-points.src.js",
										"line": 110
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SeriesPointDropEventObject.target",
								"description": "Target point that caused the event.",
								"kind": "member",
								"types": [
									"Highcharts.Point"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/draggable-points.src.js",
										"line": 110
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SeriesPointDropEventObject.type",
								"description": "Event type.",
								"kind": "member",
								"types": [
									"\"drop\""
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/draggable-points.src.js",
										"line": 110
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.SeriesPointDropPointObject",
						"description": "Contains information about a dropped points new values.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/draggable-points.src.js",
								"line": 140
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.SeriesPointDropPointObject.newValues",
								"description": "New values.",
								"kind": "member",
								"types": [
									"Highcharts.Dictionary.<number>"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/draggable-points.src.js",
										"line": 140
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SeriesPointDropPointObject.point",
								"description": "Dragged point.",
								"kind": "member",
								"types": [
									"Highcharts.Point"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/draggable-points.src.js",
										"line": 140
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.ShadowOptionsObject",
						"description": "The shadow options.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 3363
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.ShadowOptionsObject.color",
								"description": "The shadow color.",
								"kind": "member",
								"defaultValue": "#000000",
								"types": [
									"string",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3363
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.ShadowOptionsObject.offsetX",
								"description": "The horizontal offset from the element.",
								"kind": "member",
								"defaultValue": "1",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3363
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.ShadowOptionsObject.offsetY",
								"description": "The vertical offset from the element.",
								"kind": "member",
								"defaultValue": "1",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3363
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.ShadowOptionsObject.opacity",
								"description": "The shadow opacity.",
								"kind": "member",
								"defaultValue": "0.15",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3363
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.ShadowOptionsObject.width",
								"description": "The shadow width or distance from the element.",
								"kind": "member",
								"defaultValue": "3",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3363
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.StockToolsBindingsObject",
						"description": "A config object for bindings in Stock Tools module.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/stock-tools.src.js",
								"line": 33
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.StockToolsBindingsObject.className",
								"description": "ClassName of the element for a binding.",
								"kind": "member",
								"types": [
									"string",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/stock-tools.src.js",
										"line": 33
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.StockToolsBindingsObject.end",
								"description": "Last event to be fired after last step event.",
								"kind": "member",
								"types": [
									"function",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/stock-tools.src.js",
										"line": 33
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.StockToolsBindingsObject.init",
								"description": "Initial event, fired on a button click.",
								"kind": "member",
								"types": [
									"function",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/stock-tools.src.js",
										"line": 33
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.StockToolsBindingsObject.start",
								"description": "Event fired on first click on a chart.",
								"kind": "member",
								"types": [
									"function",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/stock-tools.src.js",
										"line": 33
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.StockToolsBindingsObject.steps",
								"description": "Last event to be fired after last step event. Array of step events to be\ncalled sequentially after each user click.",
								"kind": "member",
								"types": [
									"Array.<function()>",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/stock-tools.src.js",
										"line": 33
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.SubtitleObject",
						"description": "The chart subtitle. The subtitle has an `update` method that\nallows modifying the options directly or indirectly via\n`chart.update`.",
						"kind": "interface",
						"types": [
							"Highcharts.SVGElement"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 26222
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.SubtitleObject.update",
								"description": "Modify options for the subtitle.",
								"kind": "function",
								"parameters": {
									"subtitleOptions": {
										"description": "Options to modify.",
										"types": [
											"Highcharts.SubtitleOptions"
										]
									},
									"redraw": {
										"description": "Whether to redraw the chart after the subtitle is altered. If doing\n       more operations on the chart, it is a good idea to set redraw to false\n       and call {@link Chart#redraw} after.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 26222
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.SymbolDictionary",
						"description": "An extendable collection of functions for defining symbol paths.",
						"kind": "typedef",
						"types": [
							"*"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 3423
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.SymbolDictionary.[key:Highcharts.SymbolKey]",
								"description": "",
								"kind": "member",
								"types": [
									"function",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3423
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.SymbolKey",
						"description": "Can be one of `arc`, `callout`, `circle`, `diamond`, `square`,\n`triangle`, `triangle-down`. Symbols are used internally for point\nmarkers, button and label borders and backgrounds, or custom shapes.\nExtendable by adding to {@link SVGRenderer#symbols}.",
						"kind": "typedef",
						"values": "[\"arc\", \"callout\", \"circle\", \"diamond\", \"square\", \"triangle\",\n            \"triangle-down\"]",
						"types": [
							"string"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 3431
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.SymbolOptionsObject",
						"description": "Additional options, depending on the actual symbol drawn.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 3442
							},
							{
								"path": "code/modules/solid-gauge.src.js",
								"line": 30
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.SymbolOptionsObject.anchorX",
								"description": "The anchor X position for the `callout` symbol. This is where the chevron\npoints to.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3442
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SymbolOptionsObject.anchorY",
								"description": "The anchor Y position for the `callout` symbol. This is where the chevron\npoints to.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3442
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SymbolOptionsObject.end",
								"description": "The end angle of an `arc` symbol.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3442
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SymbolOptionsObject.open",
								"description": "Whether to draw `arc` symbol open or closed.",
								"kind": "member",
								"types": [
									"boolean"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3442
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SymbolOptionsObject.r",
								"description": "The radius of an `arc` symbol, or the border radius for the `callout` symbol.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3442
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SymbolOptionsObject.rounded",
								"description": "Whether to draw rounded edges.",
								"kind": "member",
								"types": [
									"boolean",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/solid-gauge.src.js",
										"line": 30
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SymbolOptionsObject.start",
								"description": "The start angle of an `arc` symbol.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3442
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.Time",
						"description": "The Time class. Time settings are applied in general for each page using\n`Highcharts.setOptions`, or individually for each Chart item through the\n[time](https://api.highcharts.com/highcharts/time) options set.\n\nThe Time object is available from {@link Highcharts.Chart#time},\nwhich refers to `Highcharts.time` if no individual time settings are\napplied.",
						"kind": "class"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 8807
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.Time.constructor",
								"description": "The Time class. Time settings are applied in general for each page using\n`Highcharts.setOptions`, or individually for each Chart item through the\n[time](https://api.highcharts.com/highcharts/time) options set.\n\nThe Time object is available from {@link Highcharts.Chart#time},\nwhich refers to `Highcharts.time` if no individual time settings are\napplied.",
								"kind": "constructor",
								"parameters": {
									"options": {
										"description": "Time options as defined in [chart.options.time](/highcharts/time).",
										"types": [
											"Highcharts.TimeOptions"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 0
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Time.dateFormat",
								"description": "Formats a JavaScript date timestamp (milliseconds since Jan 1st 1970)\ninto a human readable date string. The format is a subset of the formats\nfor PHP's [strftime](http://www.php.net/manual/en/function.strftime.php)\nfunction. Additional formats can be given in the\n{@link Highcharts.dateFormats} hook.",
								"kind": "function",
								"parameters": {
									"format": {
										"description": "The desired format where various time representations are\n       prefixed with %.",
										"isOptional": true,
										"types": [
											"string"
										]
									},
									"timestamp": {
										"description": "The JavaScript timestamp.",
										"types": [
											"number"
										]
									},
									"capitalize": {
										"description": "Upper case first letter in the return.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"string"
									],
									"description": "The formatted date."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 9225
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Time.getTimeTicks",
								"description": "Return an array with time positions distributed on round time values\nright and right after min and max. Used in datetime axes as well as for\ngrouping data on a datetime axis.",
								"kind": "function",
								"parameters": {
									"normalizedInterval": {
										"description": "The interval in axis values (ms) and the count",
										"types": [
											"Highcharts.NormalizedIntervalObject"
										]
									},
									"min": {
										"description": "The minimum in axis values",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"max": {
										"description": "The maximum in axis values",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"startOfWeek": {
										"isOptional": true,
										"types": [
											"number"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.TimeTicksObject"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 9377
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Time.getTimezoneOffset",
								"description": "Get the time zone offset based on the current timezone information as\nset in the global options.",
								"kind": "function",
								"parameters": {
									"timestamp": {
										"description": "The JavaScript timestamp to inspect.",
										"types": [
											"number"
										]
									}
								},
								"return": {
									"types": [
										"number"
									],
									"description": "The timezone offset in minutes compared to UTC."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 9014
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Time.makeTime",
								"description": "Make a time and returns milliseconds. Interprets the inputs as UTC time,\nlocal time or a specific timezone time depending on the current time\nsettings.",
								"kind": "function",
								"parameters": {
									"year": {
										"description": "The year",
										"types": [
											"number"
										]
									},
									"month": {
										"description": "The month. Zero-based, so January is 0.",
										"types": [
											"number"
										]
									},
									"date": {
										"description": "The day of the month",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"hours": {
										"description": "The hour of the day, 0-23.",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"minutes": {
										"description": "The minutes",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"seconds": {
										"description": "The seconds",
										"isOptional": true,
										"types": [
											"number"
										]
									}
								},
								"return": {
									"types": [
										"number"
									],
									"description": "The time in milliseconds since January 1st 1970."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 9109
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Time.resolveDTLFormat",
								"description": "Resolve legacy formats of dateTimeLabelFormats (strings and arrays) into\nan object.",
								"kind": "function",
								"parameters": {
									"f": {
										"description": "General format description",
										"types": [
											"String",
											"Array",
											"Object"
										]
									}
								},
								"return": {
									"types": [
										"Object"
									],
									"description": "The object definition"
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 9365
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.TimeFormatCallbackFunction",
						"description": "Function of an additional date format specifier.",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"timestamp": {
								"description": "The time to format.",
								"types": [
									"number"
								]
							}
						},
						"return": {
							"types": [
								"string"
							],
							"description": "The formatted portion of the date."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 8762
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.TimeTicksInfoObject",
						"description": "Additonal time tick information.",
						"kind": "interface",
						"types": [
							"Highcharts.NormalizedIntervalObject"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 8774
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.TimeTicksInfoObject.higherRanks",
								"description": "",
								"kind": "member",
								"types": [
									"Array.<string>"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 8774
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.TimeTicksInfoObject.totalRange",
								"description": "",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 8774
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.TimeTicksObject",
						"description": "Time ticks.",
						"kind": "interface",
						"types": [
							"Array<number>"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 8787
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.TimeTicksObject.info",
								"description": "",
								"kind": "member",
								"types": [
									"Highcharts.TimeTicksInfoObject"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 8787
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.TitleObject",
						"description": "The chart title. The title has an `update` method that allows modifying the\noptions directly or indirectly via `chart.update`.",
						"kind": "interface",
						"types": [
							"Highcharts.SVGElement"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 26202
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.TitleObject.update",
								"description": "Modify options for the title.",
								"kind": "function",
								"parameters": {
									"titleOptions": {
										"description": "Options to modify.",
										"types": [
											"Highcharts.TitleOptions"
										]
									},
									"redraw": {
										"description": "Whether to redraw the chart after the title is altered. If doing more\n       operations on the chart, it is a good idea to set redraw to false and\n       call {@link Chart#redraw} after.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 26202
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.Tooltip",
						"description": "Tooltip of a chart.",
						"kind": "class"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 21674
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.Tooltip.chart",
								"description": "Chart of the tooltip.",
								"kind": "member",
								"types": [
									"Highcharts.Chart"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 21704
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Tooltip.constructor",
								"description": "Tooltip of a chart.",
								"kind": "constructor",
								"parameters": {
									"chart": {
										"description": "The chart instance.",
										"types": [
											"Highcharts.Chart"
										]
									},
									"options": {
										"description": "Tooltip options.",
										"types": [
											"Highcharts.TooltipOptions"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 0
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Tooltip.destroy",
								"description": "Removes and destroys the tooltip and its elements.",
								"kind": "function",
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 21967
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Tooltip.getLabel",
								"description": "Creates the Tooltip label element if it does not exist, then returns it.",
								"kind": "function",
								"return": {
									"types": [
										"Highcharts.SVGElement"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 21862
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Tooltip.hide",
								"description": "Hides the tooltip with a fade out animation.",
								"kind": "function",
								"parameters": {
									"delay": {
										"description": "The fade out in milliseconds. If no value is provided the value\n       of the tooltip.hideDelay option is used. A value of 0 disables\n       the fade out animation.",
										"isOptional": true,
										"types": [
											"number"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 22046
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Tooltip.isHidden",
								"description": "Tooltips are initially hidden.",
								"kind": "member",
								"types": [
									"boolean"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 21742
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Tooltip.move",
								"description": "Moves the tooltip with a soft animation to a new position.",
								"kind": "function",
								"parameters": {
									"x": {
										"types": [
											"number"
										]
									},
									"y": {
										"types": [
											"number"
										]
									},
									"anchorX": {
										"types": [
											"number"
										]
									},
									"anchorY": {
										"types": [
											"number"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 21989
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Tooltip.options",
								"description": "Used tooltip options.",
								"kind": "member",
								"types": [
									"Highcharts.TooltipOptions"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 21713
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Tooltip.outside",
								"description": "Whether to allow the tooltip to render outside the chart's SVG\nelement box. By default (false), the tooltip is rendered within the\nchart's SVG element, which results in the tooltip being aligned\ninside the chart area.",
								"kind": "member",
								"types": [
									"boolean"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 21771
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Tooltip.refresh",
								"description": "Refresh the tooltip's text and position.",
								"kind": "function",
								"parameters": {
									"pointOrPoints": {
										"description": "Either a point or an array of points.",
										"types": [
											"Highcharts.Point",
											"Array.<Highcharts.Point>"
										]
									},
									"mouseEvent": {
										"description": "Mouse event, that is responsible for the refresh and should be\n       used for the tooltip update.",
										"isOptional": true,
										"types": [
											"global.Event"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 22330
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Tooltip.shared",
								"description": "When the tooltip is shared, the entire plot area will capture mouse\nmovement or touch events.",
								"kind": "member",
								"types": [
									"boolean"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 21761
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Tooltip.split",
								"description": "True, if the tooltip is splitted into one label per series, with the\nheader close to the axis.",
								"kind": "member",
								"types": [
									"boolean"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 21751
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Tooltip.update",
								"description": "Updates the tooltip with the provided tooltip options.",
								"kind": "function",
								"parameters": {
									"options": {
										"description": "The tooltip options to update.",
										"types": [
											"Highcharts.TooltipOptions"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 21952
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.TooltipFormatterContextObject",
						"description": "",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 9638
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.TooltipFormatterContextObject.color",
								"description": "",
								"kind": "member",
								"types": [
									"Highcharts.ColorString"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 9638
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.TooltipFormatterContextObject.colorIndex",
								"description": "",
								"kind": "member",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 9638
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.TooltipFormatterContextObject.key",
								"description": "",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 9638
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.TooltipFormatterContextObject.percentage",
								"description": "",
								"kind": "member",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 9638
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.TooltipFormatterContextObject.point",
								"description": "",
								"kind": "member",
								"types": [
									"Highcharts.Point"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 9638
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.TooltipFormatterContextObject.series",
								"description": "",
								"kind": "member",
								"types": [
									"Highcharts.Series"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 9638
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.TooltipFormatterContextObject.total",
								"description": "",
								"kind": "member",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 9638
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.TooltipFormatterContextObject.x",
								"description": "",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 9638
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.TooltipFormatterContextObject.y",
								"description": "",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 9638
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.addEvent<T>",
						"description": "Add an event listener.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"el": {
								"description": "The element or object to add a listener to. It can be a\n       {@link HTMLDOMElement}, an {@link SVGElement} or any other object.",
								"types": [
									"T"
								]
							},
							"type": {
								"description": "The event type.",
								"types": [
									"string"
								]
							},
							"fn": {
								"description": "The function callback to execute when the event is fired.",
								"types": [
									"Highcharts.EventCallbackFunction.<T>"
								]
							},
							"options": {
								"description": "Options for adding the event.",
								"isOptional": true,
								"types": [
									"Highcharts.EventOptionsObject"
								]
							}
						},
						"return": {
							"types": [
								"function"
							],
							"description": "A callback function to remove the added event."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 2387
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.ajax",
						"description": "Perform an Ajax call.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"attr": {
								"description": "The Ajax settings to use.",
								"types": [
									"Highcharts.AjaxSettings"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/map-parser.src.js",
								"line": 68
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.ajax",
						"description": "Perform an Ajax call.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"attr": {
								"description": "The Ajax settings to use.",
								"types": [
									"Highcharts.AjaxSettings"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/export-data.src.js",
								"line": 69
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.ajax",
						"description": "Perform an Ajax call.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"attr": {
								"description": "The Ajax settings to use.",
								"types": [
									"Highcharts.AjaxSettings"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/data.src.js",
								"line": 69
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.animObject",
						"description": "Get the animation in object form, where a disabled animation is always\nreturned as `{ duration: 0 }`.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"animation": {
								"description": "An animation setting. Can be an object with duration, complete and\n       easing properties, or a boolean to enable or disable.",
								"types": [
									"boolean",
									"Highcharts.AnimationOptionsObject"
								]
							}
						},
						"return": {
							"types": [
								"Highcharts.AnimationOptionsObject"
							],
							"description": "An object with at least a duration property."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 1905
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.animate",
						"description": "The global animate method, which uses Fx to create individual animators.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"el": {
								"description": "The element to animate.",
								"types": [
									"Highcharts.HTMLDOMElement",
									"Highcharts.SVGElement"
								]
							},
							"params": {
								"description": "An object containing key-value pairs of the properties to animate.\n       Supports numeric as pixel-based CSS properties for HTML objects and\n       attributes for SVGElements.",
								"types": [
									"Highcharts.HTMLAttributes",
									"Highcharts.SVGAttributes"
								]
							},
							"opt": {
								"description": "Animation options.",
								"isOptional": true,
								"types": [
									"Highcharts.AnimationOptionsObject"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 2621
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.arrayMax",
						"description": "Non-recursive method to find the lowest member of an array. `Math.max` raises\na maximum call stack size exceeded error in Chrome when trying to apply more\nthan 150.000 points. This method is slightly slower, but safe.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"data": {
								"description": "An array of numbers.",
								"types": [
									"Array"
								]
							}
						},
						"return": {
							"types": [
								"number"
							],
							"description": "The highest number."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 1787
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.arrayMin",
						"description": "Non-recursive method to find the lowest member of an array. `Math.min` raises\na maximum call stack size exceeded error in Chrome when trying to apply more\nthan 150.000 points. This method is slightly slower, but safe.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"data": {
								"description": "An array of numbers.",
								"types": [
									"Array"
								]
							}
						},
						"return": {
							"types": [
								"number"
							],
							"description": "The lowest number."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 1762
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.attr",
						"description": "Set or get an attribute or an object of attributes. To use as a setter, pass\na key and a value, or let the second argument be a collection of keys and\nvalues. To use as a getter, pass only a string as the second argument.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"elem": {
								"description": "The DOM element to receive the attribute(s).",
								"types": [
									"Highcharts.HTMLDOMElement",
									"Highcharts.SVGDOMElement"
								]
							},
							"prop": {
								"description": "The property or an object of key-value pairs.",
								"isOptional": true,
								"types": [
									"string",
									"Highcharts.HTMLAttributes",
									"Highcharts.SVGAttributes"
								]
							},
							"value": {
								"description": "The value if a single property is set.",
								"isOptional": true,
								"types": [
									"string"
								]
							}
						},
						"return": {
							"types": [
								"*"
							],
							"description": "When used as a getter, return the value."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 1149
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.binsNumberFormulas",
						"description": "A dictionary with formulas for calculating number of bins based on the\nbase series",
						"kind": "member"
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/histogram-bellcurve.src.js",
								"line": 193
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.chart",
						"description": "Factory function for basic charts.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"renderTo": {
								"description": "The DOM element to render to, or its id.",
								"isOptional": true,
								"types": [
									"string",
									"Highcharts.HTMLDOMElement"
								]
							},
							"options": {
								"description": "The chart options structure.",
								"types": [
									"Highcharts.Options"
								]
							},
							"callback": {
								"description": "Function to run when the chart has loaded and and all external images\n       are loaded. Defining a\n       [chart.event.load](https://api.highcharts.com/highcharts/chart.events.load)\n       handler is equivalent.",
								"isOptional": true,
								"types": [
									"Highcharts.ChartCallbackFunction"
								]
							}
						},
						"return": {
							"types": [
								"Highcharts.Chart"
							],
							"description": "Returns the Chart object."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 26308
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.charts",
						"description": "An array containing the current chart objects in the page. A chart's\nposition in the array is preserved throughout the page's lifetime. When\na chart is destroyed, the array item becomes `undefined`.",
						"kind": "member",
						"isStatic": true,
						"types": [
							"Array.<Highcharts.Chart>"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 83
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.clearTimeout",
						"description": "Internal clear timeout. The function checks that the `id` was not removed\n(e.g. by `chart.destroy()`). For the details see\n[issue #7901](https://github.com/highcharts/highcharts/issues/7901).",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"id": {
								"description": "Id of a timeout.",
								"types": [
									"number"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 1237
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.correctFloat",
						"description": "Fix JS round off float errors.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"num": {
								"description": "A float number to fix.",
								"types": [
									"number"
								]
							},
							"prec": {
								"description": "The precision.",
								"isOptional": true,
								"types": [
									"number"
								]
							}
						},
						"return": {
							"types": [
								"number"
							],
							"description": "The corrected float number."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 1861
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.createElement",
						"description": "Utility function to create an HTML element with attributes and styles.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"tag": {
								"description": "The HTML tag.",
								"types": [
									"string"
								]
							},
							"attribs": {
								"description": "Attributes as an object of key-value pairs.",
								"isOptional": true,
								"types": [
									"Highcharts.HTMLAttributes"
								]
							},
							"styles": {
								"description": "Styles as an object of key-value pairs.",
								"isOptional": true,
								"types": [
									"Highcharts.CSSObject"
								]
							},
							"parent": {
								"description": "The parent HTML object.",
								"isOptional": true,
								"types": [
									"Highcharts.HTMLDOMElement"
								]
							},
							"nopad": {
								"description": "If true, remove all padding, border and margin.",
								"isOptional": true,
								"types": [
									"boolean"
								]
							}
						},
						"return": {
							"types": [
								"Highcharts.HTMLDOMElement"
							],
							"description": "The created DOM element."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 1323
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.css",
						"description": "Set CSS on a given element.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"el": {
								"description": "An HTML DOM element.",
								"types": [
									"Highcharts.HTMLDOMElement"
								]
							},
							"styles": {
								"description": "Style object with camel case property names.",
								"types": [
									"Highcharts.CSSObject"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 1303
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.data",
						"description": "Creates a data object to parse data for a chart.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"dataOptions": {
								"types": [
									"Highcharts.DataOptions"
								]
							},
							"chartOptions": {
								"isOptional": true,
								"types": [
									"Highcharts.Options"
								]
							},
							"chart": {
								"isOptional": true,
								"types": [
									"Highcharts.Chart"
								]
							}
						},
						"return": {
							"types": [
								"Highcharts.Data"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/map-parser.src.js",
								"line": 2299
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.data",
						"description": "Creates a data object to parse data for a chart.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"dataOptions": {
								"types": [
									"Highcharts.DataOptions"
								]
							},
							"chartOptions": {
								"isOptional": true,
								"types": [
									"Highcharts.Options"
								]
							},
							"chart": {
								"isOptional": true,
								"types": [
									"Highcharts.Chart"
								]
							}
						},
						"return": {
							"types": [
								"Highcharts.Data"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/data.src.js",
								"line": 2300
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.dateFormat",
						"description": "Formats a JavaScript date timestamp (milliseconds since Jan 1st 1970) into a\nhuman readable date string. The format is a subset of the formats for PHP's\n[strftime](http://www.php.net/manual/en/function.strftime.php) function.\nAdditional formats can be given in the {@link Highcharts.dateFormats} hook.\n\nSince v6.0.5, all internal dates are formatted through the\n{@link Highcharts.Chart#time} instance to respect chart-level time settings.\nThe `Highcharts.dateFormat` function only reflects global time settings set\nwith `setOptions`.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"format": {
								"description": "The desired format where various time representations are prefixed\n       with `%`.",
								"types": [
									"string"
								]
							},
							"timestamp": {
								"description": "The JavaScript timestamp.",
								"types": [
									"number"
								]
							},
							"capitalize": {
								"description": "Upper case first letter in the return.",
								"isOptional": true,
								"types": [
									"boolean"
								]
							}
						},
						"return": {
							"types": [
								"string"
							],
							"description": "The formatted date."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 13135
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.dateFormats",
						"description": "A hook for defining additional date format specifiers. New\nspecifiers are defined as key-value pairs by using the\nspecifier as key, and a function which takes the timestamp as\nvalue. This function returns the formatted portion of the\ndate.",
						"kind": "member",
						"isStatic": true,
						"types": [
							"Highcharts.Dictionary.<Highcharts.TimeFormatCallbackFunction>"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 9324
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.datePropsToTimestamps",
						"description": "Recursively converts all Date properties to timestamps.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"object": {
								"description": "any object to convert properties of",
								"types": [
									"Object"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 1478
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.defaultOptions",
						"description": "Global default settings.",
						"kind": "member",
						"isStatic": true,
						"types": [
							"Highcharts.Options"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 9679
							}
						]
					},
					"children": []
				},
				{
					"doclet": {
						"name": "Highcharts.defined",
						"description": "Check if an object is null or undefined.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"obj": {
								"description": "The object to check.",
								"types": [
									"*"
								]
							}
						},
						"return": {
							"types": [
								"boolean"
							],
							"description": "False if the object is null or undefined, otherwise true."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 1134
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.destroyObjectProperties",
						"description": "Utility method that destroys any SVGElement instances that are properties on\nthe given object. It loops all properties and invokes destroy if there is a\ndestroy method. The property is then delete.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"obj": {
								"description": "The object to destroy properties on.",
								"types": [
									"*"
								]
							},
							"except": {
								"description": "Exception, do not destroy this property, only delete it.",
								"isOptional": true,
								"types": [
									"*"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 1812
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.discardElement",
						"description": "Discard a HTML element by moving it to the bin and delete.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"element": {
								"description": "The HTML node to discard.",
								"types": [
									"Highcharts.HTMLDOMElement"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 1839
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.downloadSVGLocal",
						"description": "Get data URL to an image of an SVG and call download on it options object:\n\n- **filename:** Name of resulting downloaded file without extension. Default\n is `chart`.\n\n- **type:** File type of resulting download. Default is `image/png`.\n\n- **scale:** Scaling factor of downloaded image compared to source. Default\n is `1`.\n\n- **libURL:** URL pointing to location of dependency scripts to download on\n demand. Default is the exporting.libURL option of the global Highcharts\n options pointing to our server.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"svg": {
								"types": [
									"string"
								]
							},
							"options": {
								"types": [
									"Highcharts.ExportingOptions"
								]
							},
							"failCallback": {
								"types": [
									"function"
								]
							},
							"successCallback": {
								"types": [
									"function"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/offline-exporting.src.js",
								"line": 326
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.each",
						"description": "Iterate over an array.",
						"kind": "function",
						"isDeprecated": true,
						"isStatic": true,
						"parameters": {
							"arr": {
								"description": "The array to iterate over.",
								"types": [
									"Array.<*>"
								]
							},
							"fn": {
								"description": "The iterator callback. It passes three arguments:\n       - `item`: The array item.\n       - `index`: The item's index in the array.\n       - `arr`: The array that each is being applied to.",
								"types": [
									"function"
								]
							},
							"ctx": {
								"description": "The context.",
								"isOptional": true,
								"types": [
									"*"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 2280
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.erase",
						"description": "Remove the last occurence of an item from an array.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"arr": {
								"description": "The array.",
								"types": [
									"Array"
								]
							},
							"item": {
								"description": "The item to remove.",
								"types": [
									"*"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 1113
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.error",
						"description": "Provide error messages for debugging, with links to online explanation. This\nfunction can be overridden to provide custom error handling.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"code": {
								"description": "The error code. See\n       [errors.xml](https://github.com/highcharts/highcharts/blob/master/errors/errors.xml)\n       for available codes. If it is a string, the error message is printed\n       directly in the console.",
								"types": [
									"number",
									"string"
								]
							},
							"stop": {
								"description": "Whether to throw an error or just log a warning in the console.",
								"isOptional": true,
								"types": [
									"boolean"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 471
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.extend",
						"description": "Utility function to extend an object with the members of another.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"a": {
								"description": "The object to be extended.",
								"types": [
									"Highcharts.Dictionary.<*>"
								]
							},
							"b": {
								"description": "The object to add to the first one.",
								"types": [
									"Highcharts.Dictionary.<*>"
								]
							}
						},
						"return": {
							"types": [
								"Highcharts.Dictionary.<*>"
							],
							"description": "Object a, the original object."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 1253
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.extendClass",
						"description": "Extend a prototyped class by new members.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"parent": {
								"description": "The parent prototype to inherit.",
								"types": [
									"*"
								]
							},
							"members": {
								"description": "A collection of prototype members to add or override compared to the\n       parent prototype.",
								"types": [
									"Highcharts.Dictionary.<*>"
								]
							}
						},
						"return": {
							"types": [
								"*"
							],
							"description": "A new prototype."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 1364
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.find",
						"description": "Return the value of the first element in the array that satisfies the\nprovided testing function.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"arr": {
								"description": "The array to test.",
								"types": [
									"Array"
								]
							},
							"callback": {
								"description": "The callback function. The function receives the item as the first\n       argument. Return `true` if this item satisfies the condition.",
								"types": [
									"function"
								]
							}
						},
						"return": {
							"types": [
								"*"
							],
							"description": "The value of the element."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 2152
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.fireEvent",
						"description": "Fire an event that was registered with {@link Highcharts#addEvent}.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"el": {
								"description": "The object to fire the event on. It can be a {@link HTMLDOMElement},\n       an {@link SVGElement} or any other object.",
								"types": [
									"*"
								]
							},
							"type": {
								"description": "The type of event.",
								"types": [
									"string"
								]
							},
							"eventArguments": {
								"description": "Custom event arguments that are passed on as an argument to the event\n       handler.",
								"isOptional": true,
								"types": [
									"Highcharts.Dictionary.<*>"
								]
							},
							"defaultFunction": {
								"description": "The default function to execute if the other listeners haven't\n       returned false.",
								"isOptional": true,
								"types": [
									"function"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 2533
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.fitToBinLeftClosed",
						"description": "Returns a function for mapping number to the closed (right opened) bins",
						"kind": "function",
						"parameters": {
							"binWidth": {
								"description": "width of the bin",
								"types": [
									"number"
								]
							}
						},
						"return": {
							"types": [
								"function"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/histogram-bellcurve.src.js",
								"line": 213
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.format",
						"description": "Format a string according to a subset of the rules of Python's String.format\nmethod.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"str": {
								"description": "The string to format.",
								"types": [
									"string"
								]
							},
							"ctx": {
								"description": "The context, a collection of key-value pairs where each key is\n       replaced by its value.",
								"types": [
									"*"
								]
							},
							"time": {
								"description": "A `Time` instance that determines the date formatting, for example\n       for applying time zone corrections to the formatted date.",
								"isOptional": true,
								"types": [
									"Highcharts.Time"
								]
							}
						},
						"return": {
							"types": [
								"string"
							],
							"description": "The formatted string."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 1532
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.formatSingle",
						"description": "Format a single variable. Similar to sprintf, without the % prefix.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"format": {
								"description": "The format string.",
								"types": [
									"string"
								]
							},
							"val": {
								"description": "The value.",
								"types": [
									"*"
								]
							},
							"time": {
								"description": "A `Time` instance that determines the date formatting, for example\n       for applying time zone corrections to the formatted date.",
								"isOptional": true,
								"types": [
									"Highcharts.Time"
								]
							}
						},
						"return": {
							"types": [
								"string"
							],
							"description": "The formatted representation of the value."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 1488
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.ganttChart",
						"description": "Factory function for Gantt charts.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"renderTo": {
								"description": "The DOM element to render to, or its id.",
								"isOptional": true,
								"types": [
									"string",
									"Highcharts.HTMLDOMElement"
								]
							},
							"options": {
								"description": "The chart options structure.",
								"types": [
									"Highcharts.Options"
								]
							},
							"callback": {
								"description": "Function to run when the chart has loaded and and all external images\n       are loaded. Defining a\n       [chart.event.load](https://api.highcharts.com/highcharts/chart.events.load)\n       handler is equivalent.",
								"isOptional": true,
								"types": [
									"Highcharts.ChartCallbackFunction"
								]
							}
						},
						"return": {
							"types": [
								"Highcharts.Chart"
							],
							"description": "Returns the Chart object."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/gantt.src.js",
								"line": 6617
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.geojson",
						"description": "Highmaps only. Restructure a GeoJSON object in preparation to be read\ndirectly by the\n{@link https://api.highcharts.com/highmaps/plotOptions.series.mapData|series.mapData}\noption. The GeoJSON will be broken down to fit a specific Highcharts type,\neither `map`, `mapline` or `mappoint`. Meta data in GeoJSON's properties\nobject will be copied directly over to {@link Point.properties} in Highmaps.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"geojson": {
								"description": "The GeoJSON structure to parse, represented as a JavaScript object\n       rather than a JSON string.",
								"types": [
									"object"
								]
							},
							"hType": {
								"description": "The Highmaps series type to prepare for. Setting \"map\" will return\n       GeoJSON polygons and multipolygons. Setting \"mapline\" will return\n       GeoJSON linestrings and multilinestrings. Setting \"mappoint\" will\n       return GeoJSON points and multipoints.",
								"isOptional": true,
								"types": [
									"string"
								]
							}
						},
						"return": {
							"types": [
								"Array.<object>"
							],
							"description": "An object ready for the `mapData` option."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/map.src.js",
								"line": 6288
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.getMagnitude",
						"description": "Get the magnitude of a number.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"number": {
								"description": "The number.",
								"types": [
									"number"
								]
							}
						},
						"return": {
							"types": [
								"number"
							],
							"description": "The magnitude, where 1-9 are magnitude 1, 10-99 magnitude 2 etc."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 1612
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.getOptions",
						"description": "Get the updated default options. Until 3.0.7, merely exposing defaultOptions\nfor outside modules wasn't enough because the setOptions method created a new\nobject.",
						"kind": "function",
						"isStatic": true,
						"return": {
							"types": [
								"Highcharts.Options"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 13107
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.getStyle",
						"description": "Get the computed CSS value for given element and property, only for numerical\nproperties. For width and height, the dimension of the inner box (excluding\npadding) is returned. Used for fitting the chart within the container.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"el": {
								"description": "An HTML element.",
								"types": [
									"Highcharts.HTMLDOMElement"
								]
							},
							"prop": {
								"description": "The property name.",
								"types": [
									"string"
								]
							},
							"toInt": {
								"description": "Parse to integer.",
								"isOptional": true,
								"types": [
									"boolean"
								]
							}
						},
						"return": {
							"types": [
								"number"
							],
							"description": "The numeric value."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 2065
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.grep",
						"description": "Filter an array by a callback.",
						"kind": "function",
						"isDeprecated": true,
						"isStatic": true,
						"parameters": {
							"arr": {
								"description": "The array to filter.",
								"types": [
									"Array.<*>"
								]
							},
							"callback": {
								"description": "The callback function. The function receives the item as the first\n       argument. Return `true` if the item is to be preserved.",
								"types": [
									"function"
								]
							}
						},
						"return": {
							"types": [
								"Array.<*>"
							],
							"description": "A new, filtered array."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 2299
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.htmlencode",
						"description": "HTML encode some characters vulnerable for XSS.",
						"kind": "function",
						"parameters": {
							"html": {
								"description": "The input string",
								"types": [
									"string"
								]
							}
						},
						"return": {
							"types": [
								"string"
							],
							"description": "The excaped string"
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/export-data.src.js",
								"line": 276
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.i18nFormat",
						"description": "i18n formatting function. Extends Highcharts.format() functionality by also\nhandling arrays and plural conditionals. Arrays can be indexed as follows:\n\n- Format: 'This is the first index: {myArray[0]}. The last: {myArray[-1]}.'\n\n- Context: { myArray: [0, 1, 2, 3, 4, 5] }\n\n- Result: 'This is the first index: 0. The last: 5.'\n\n\nThey can also be iterated using the #each() function. This will repeat the\ncontents of the bracket expression for each element. Example:\n\n- Format: 'List contains: {#each(myArray)cm }'\n\n- Context: { myArray: [0, 1, 2] }\n\n- Result: 'List contains: 0cm 1cm 2cm '\n\n\nThe #each() function optionally takes a length parameter. If positive, this\nparameter specifies the max number of elements to iterate through. If\nnegative, the function will subtract the number from the length of the array.\nUse this to stop iterating before the array ends. Example:\n\n- Format: 'List contains: {#each(myArray, -1) }and {myArray[-1]}.'\n\n- Context: { myArray: [0, 1, 2, 3] }\n\n- Result: 'List contains: 0, 1, 2, and 3.'\n\n\nUse the #plural() function to pick a string depending on whether or not a\ncontext object is 1. Arguments are #plural(obj, plural, singular). Example:\n\n- Format: 'Has {numPoints} {#plural(numPoints, points, point}.'\n\n- Context: { numPoints: 5 }\n\n- Result: 'Has 5 points.'\n\n\nOptionally there are additional parameters for dual and none: #plural(obj,\nplural, singular, dual, none). Example:\n\n- Format: 'Has {#plural(numPoints, many points, one point, two points,\n none}.'\n\n- Context: { numPoints: 2 }\n\n- Result: 'Has two points.'\n\n\nThe dual or none parameters will take precedence if they are supplied.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"formatString": {
								"description": "The string to format.",
								"types": [
									"string"
								]
							},
							"context": {
								"description": "Context to apply to the format string.",
								"types": [
									"Highcharts.Dictionary.<*>"
								]
							},
							"time": {
								"description": "A `Time` instance for date formatting, passed on to H.format().",
								"types": [
									"Highcharts.Time"
								]
							}
						},
						"return": {
							"types": [
								"string"
							],
							"description": "The formatted string."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/accessibility.src.js",
								"line": 150
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.inArray",
						"description": "Search for an item in an array.",
						"kind": "function",
						"isDeprecated": true,
						"isStatic": true,
						"parameters": {
							"item": {
								"description": "The item to search for.",
								"types": [
									"*"
								]
							},
							"arr": {
								"description": "The array or node collection to search in.",
								"types": [
									"Array"
								]
							},
							"fromIndex": {
								"description": "The index to start searching from.",
								"isOptional": true,
								"types": [
									"number"
								]
							}
						},
						"return": {
							"types": [
								"number"
							],
							"description": "The index within the array, or -1 if not found."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 2129
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.initCanvasBoost",
						"description": "Initialize the canvas boost.",
						"kind": "function",
						"isStatic": true,
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/boost-canvas.src.js",
								"line": 52
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.isArray",
						"description": "Utility function to check if an item is an array.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"obj": {
								"description": "The item to check.",
								"types": [
									"*"
								]
							}
						},
						"return": {
							"types": [
								"boolean"
							],
							"description": "True if the argument is an array."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 1028
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.isClass",
						"description": "Utility function to check if an Object is an class.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"obj": {
								"description": "The item to check.",
								"types": [
									"*"
								]
							}
						},
						"return": {
							"types": [
								"boolean"
							],
							"description": "True if the argument is an class."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 1077
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.isDOMElement",
						"description": "Utility function to check if an Object is a HTML Element.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"obj": {
								"description": "The item to check.",
								"types": [
									"*"
								]
							}
						},
						"return": {
							"types": [
								"boolean"
							],
							"description": "True if the argument is a HTML Element."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 1062
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.isNumber",
						"description": "Utility function to check if an item is a number and it is finite (not NaN,\nInfinity or -Infinity).",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"n": {
								"description": "The item to check.",
								"types": [
									"*"
								]
							}
						},
						"return": {
							"types": [
								"boolean"
							],
							"description": "True if the item is a finite number"
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 1097
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.isObject",
						"description": "Utility function to check if an item is of type object.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"obj": {
								"description": "The item to check.",
								"types": [
									"*"
								]
							},
							"strict": {
								"description": "Also checks that the object is not an array.",
								"isOptional": true,
								"types": [
									"boolean"
								]
							}
						},
						"return": {
							"types": [
								"boolean"
							],
							"description": "True if the argument is an object."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 1044
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.isString",
						"description": "Utility function to check for string type.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"s": {
								"description": "The item to check.",
								"types": [
									"*"
								]
							}
						},
						"return": {
							"types": [
								"boolean"
							],
							"description": "True if the argument is a string."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 1013
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.keys",
						"description": "Returns an array of a given object's own properties.",
						"kind": "function",
						"isDeprecated": true,
						"isStatic": true,
						"parameters": {
							"obj": {
								"description": "The object of which the properties are to be returned.",
								"types": [
									"*"
								]
							}
						},
						"return": {
							"types": [
								"Array.<string>"
							],
							"description": "An array of strings that represents all the properties."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 2184
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.map",
						"description": "Map an array by a callback.",
						"kind": "function",
						"isDeprecated": true,
						"isStatic": true,
						"parameters": {
							"arr": {
								"description": "The array to map.",
								"types": [
									"Array.<*>"
								]
							},
							"fn": {
								"description": "The callback function. Return the new value for the new array.",
								"types": [
									"function"
								]
							}
						},
						"return": {
							"types": [
								"Array.<*>"
							],
							"description": "A new array item with modified items."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 2316
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.mapChart",
						"description": "The factory function for creating new map charts. Creates a new {@link\nHighcharts.Chart|Chart} object with different default options than the basic\nChart.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"renderTo": {
								"description": "The DOM element to render to, or its id.",
								"isOptional": true,
								"types": [
									"string",
									"Highcharts.HTMLDOMElement"
								]
							},
							"options": {
								"description": "The chart options structure as described in the\n       [options reference](https://api.highcharts.com/highstock).",
								"types": [
									"Highcharts.Options"
								]
							},
							"callback": {
								"description": "A function to execute when the chart object is finished loading and\n       rendering. In most cases the chart is built in one thread, but in\n       Internet Explorer version 8 or less the chart is sometimes\n       initialized before the document is ready, and in these cases the\n       chart object will not be finished synchronously. As a consequence,\n       code that relies on the newly built Chart object should always run in\n       the callback. Defining a\n       [chart.event.load](https://api.highcharts.com/highstock/chart.events.load)\n       handler is equivalent.",
								"isOptional": true,
								"types": [
									"Highcharts.ChartCallbackFunction"
								]
							}
						},
						"return": {
							"types": [
								"Highcharts.Chart"
							],
							"description": "The chart object."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/map.src.js",
								"line": 6816
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.maps",
						"description": "Contains all loaded map data for Highmaps.",
						"kind": "member",
						"isStatic": true,
						"types": [
							"Highcharts.Dictionary.<Highcharts.MapDataObject>"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/map.src.js",
								"line": 6745
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.merge",
						"description": "Utility function to deep merge two or more objects and return a third object.\nIf the first argument is true, the contents of the second object is copied\ninto the first object. The merge function can also be used with a single\nobject argument to create a deep copy of an object.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"extend": {
								"description": "Whether to extend the left-side object (a) or return a whole new\n       object.",
								"types": [
									"boolean"
								]
							},
							"a": {
								"description": "The first object to extend. When only this is given, the function\n       returns a deep copy.",
								"types": [
									"*"
								]
							},
							"n": {
								"description": "An object to merge into the previous one.",
								"isOptional": true,
								"types": [
									"*"
								]
							}
						},
						"return": {
							"types": [
								"*"
							],
							"description": "The merged object. If the first argument is true, the return is the\n        same as the second argument."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 911
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.merge",
						"description": "Utility function to deep merge two or more objects and return a third object.\nThe merge function can also be used with a single object argument to create a\ndeep copy of an object.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"a": {
								"description": "The first object to extend. When only this is given, the function\n       returns a deep copy.",
								"types": [
									"*"
								]
							},
							"n": {
								"description": "An object to merge into the previous one.",
								"isOptional": true,
								"types": [
									"*"
								]
							}
						},
						"return": {
							"types": [
								"*"
							],
							"description": "The merged object. If the first argument is true, the return is the\n        same as the second argument."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 911
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.normalizeTickInterval",
						"description": "Take an interval and normalize it to multiples of round numbers.",
						"kind": "function",
						"isDeprecated": true,
						"isStatic": true,
						"parameters": {
							"interval": {
								"description": "The raw, un-rounded interval.",
								"types": [
									"number"
								]
							},
							"multiples": {
								"description": "Allowed multiples.",
								"isOptional": true,
								"types": [
									"Array"
								]
							},
							"magnitude": {
								"description": "The magnitude of the number.",
								"isOptional": true,
								"types": [
									"number"
								]
							},
							"allowDecimals": {
								"description": "Whether to allow decimals.",
								"isOptional": true,
								"types": [
									"boolean"
								]
							},
							"hasTickAmount": {
								"description": "If it has tickAmount, avoid landing on tick intervals lower than\n       original.",
								"isOptional": true,
								"types": [
									"boolean"
								]
							}
						},
						"return": {
							"types": [
								"number"
							],
							"description": "The normalized interval."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 1627
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.numberFormat",
						"description": "Format a number and return a string based on input settings.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"number": {
								"description": "The input number to format.",
								"types": [
									"number"
								]
							},
							"decimals": {
								"description": "The amount of decimals. A value of -1 preserves the amount in the\n       input number.",
								"types": [
									"number"
								]
							},
							"decimalPoint": {
								"description": "The decimal point, defaults to the one given in the lang options, or\n       a dot.",
								"isOptional": true,
								"types": [
									"string"
								]
							},
							"thousandsSep": {
								"description": "The thousands separator, defaults to the one given in the lang\n       options, or a space character.",
								"isOptional": true,
								"types": [
									"string"
								]
							}
						},
						"return": {
							"types": [
								"string"
							],
							"description": "The formatted number."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 1940
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.objectEach",
						"description": "Iterate over object key pairs in an object.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"obj": {
								"description": "The object to iterate over.",
								"types": [
									"*"
								]
							},
							"fn": {
								"description": "The iterator callback. It passes three arguments:\n       * value - The property value.\n       * key - The property key.\n       * obj - The object that objectEach is being applied to.",
								"types": [
									"Highcharts.ObjectEachCallbackFunction"
								]
							},
							"ctx": {
								"description": "The context.",
								"isOptional": true,
								"types": [
									"*"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 2255
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.offset",
						"description": "Get the element's offset position, corrected for `overflow: auto`.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"el": {
								"description": "The HTML element.",
								"types": [
									"Highcharts.HTMLDOMElement"
								]
							}
						},
						"return": {
							"types": [
								"Highcharts.OffsetObject"
							],
							"description": "An object containing `left` and `top` properties for the position in\n        the page."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 2198
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.pad",
						"description": "Left-pad a string to a given length by adding a character repetetively.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"number": {
								"description": "The input string or number.",
								"types": [
									"number"
								]
							},
							"length": {
								"description": "The desired string length.",
								"types": [
									"number"
								]
							},
							"padder": {
								"description": "The character to pad with.",
								"isOptional": true,
								"types": [
									"string"
								]
							}
						},
						"return": {
							"types": [
								"string"
							],
							"description": "The padded string."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 1386
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.pick",
						"description": "Return the first value that is not null or undefined.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"items": {
								"description": "Variable number of arguments to inspect.",
								"types": [
									"*"
								]
							}
						},
						"return": {
							"types": [
								"*"
							],
							"description": "The value of the first argument that is not null or undefined."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 1279
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.reduce",
						"description": "Reduce an array to a single value.",
						"kind": "function",
						"isDeprecated": true,
						"isStatic": true,
						"parameters": {
							"arr": {
								"description": "The array to reduce.",
								"types": [
									"Array"
								]
							},
							"fn": {
								"description": "The callback function. Return the reduced value. Receives 4\n       arguments: Accumulated/reduced value, current value, current array\n       index, and the array.",
								"types": [
									"function"
								]
							},
							"initialValue": {
								"description": "The initial value of the accumulator.",
								"types": [
									"*"
								]
							}
						},
						"return": {
							"types": [
								"*"
							],
							"description": "The reduced value."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 2332
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.relativeLength",
						"description": "Return a length based on either the integer value, or a percentage of a base.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"value": {
								"description": "A percentage string or a number.",
								"types": [
									"Highcharts.RelativeSize"
								]
							},
							"base": {
								"description": "The full length that represents 100%.",
								"types": [
									"number"
								]
							},
							"offset": {
								"description": "A pixel offset to apply for percentage values. Used internally in\n       axis positioning.",
								"isOptional": true,
								"types": [
									"number"
								]
							}
						},
						"return": {
							"types": [
								"number"
							],
							"description": "The computed length."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 1413
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.removeEvent<T>",
						"description": "Remove an event that was added with {@link Highcharts#addEvent}.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"el": {
								"description": "The element to remove events on.",
								"types": [
									"T"
								]
							},
							"type": {
								"description": "The type of events to remove. If undefined, all events are removed\n       from the element.",
								"isOptional": true,
								"types": [
									"string"
								]
							},
							"fn": {
								"description": "The specific callback to remove. If undefined, all events that match\n       the element and optionally the type are removed.",
								"isOptional": true,
								"types": [
									"Highcharts.EventCallbackFunction.<T>"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 2453
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.seriesType",
						"description": "Factory to create new series prototypes.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"type": {
								"description": "The series type name.",
								"types": [
									"string"
								]
							},
							"parent": {
								"description": "The parent series type name. Use `line` to inherit from the basic\n       {@link Series} object.",
								"types": [
									"string"
								]
							},
							"options": {
								"description": "The additional default options that is merged with the parent's\n       options.",
								"types": [
									"*"
								]
							},
							"props": {
								"description": "The properties (functions and primitives) to set on the new\n       prototype.",
								"types": [
									"*"
								]
							},
							"pointProps": {
								"description": "Members for a series-specific extension of the {@link Point}\n       prototype if needed.",
								"isOptional": true,
								"types": [
									"*"
								]
							}
						},
						"return": {
							"types": [
								"Highcharts.Series"
							],
							"description": "The newly created prototype as extended from {@link Series} or its\n        derivatives."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 2695
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.setAnimation",
						"description": "Set the global animation to either a given value, or fall back to the given\nchart's animation option.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"animation": {
								"description": "The animation object.",
								"types": [
									"boolean",
									"Highcharts.AnimationOptionsObject"
								]
							},
							"chart": {
								"description": "The chart instance.",
								"types": [
									"Highcharts.Chart"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 1881
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.setOptions",
						"description": "Merge the default options with custom options and return the new options\nstructure. Commonly used for defining reusable templates.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"options": {
								"description": "The new custom chart options.",
								"types": [
									"Highcharts.Options"
								]
							}
						},
						"return": {
							"types": [
								"Highcharts.Options"
							],
							"description": "Updated options."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 13078
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.some",
						"description": "Test whether at least one element in the array passes the test implemented by\nthe provided function.",
						"kind": "function",
						"isDeprecated": true,
						"isStatic": true,
						"parameters": {
							"arr": {
								"description": "The array to test",
								"types": [
									"Array.<*>"
								]
							},
							"fn": {
								"description": "The function to run on each item. Return truty to pass the test.\n       Receives arguments `currentValue`, `index` and `array`.",
								"types": [
									"function"
								]
							},
							"ctx": {
								"description": "The context.",
								"types": [
									"*"
								]
							}
						},
						"return": {
							"types": [
								"boolean"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 2353
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.splat",
						"description": "Check if an element is an array, and if not, make it into an array.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"obj": {
								"description": "The object to splat.",
								"types": [
									"*"
								]
							}
						},
						"return": {
							"types": [
								"Array"
							],
							"description": "The produced or original array."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 1196
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.splitPath",
						"description": "Utility for reading SVG paths directly.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"path": {
								"types": [
									"string"
								]
							}
						},
						"return": {
							"types": [
								"Highcharts.SVGPathArray"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/map.src.js",
								"line": 6714
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.stableSort",
						"description": "Sort an object array and keep the order of equal items. The ECMAScript\nstandard does not specify the behaviour when items are equal.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"arr": {
								"description": "The array to sort.",
								"types": [
									"Array"
								]
							},
							"sortFunction": {
								"description": "The function to sort it with, like with regular Array.prototype.sort.",
								"types": [
									"function"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 1729
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.stockChart",
						"description": "Factory function for creating new stock charts. Creates a new\n{@link Highcharts.Chart|Chart} object with different default options than the\nbasic Chart.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"renderTo": {
								"description": "The DOM element to render to, or its id.",
								"isOptional": true,
								"types": [
									"string",
									"Highcharts.HTMLDOMElement"
								]
							},
							"options": {
								"description": "The chart options structure as described in the\n       [options reference](https://api.highcharts.com/highstock).",
								"types": [
									"Highcharts.Options"
								]
							},
							"callback": {
								"description": "A function to execute when the chart object is finished loading and\n       rendering. In most cases the chart is built in one thread, but in\n       Internet Explorer version 8 or less the chart is sometimes\n       initialized before the document is ready, and in these cases the\n       chart object will not be finished synchronously. As a consequence,\n       code that relies on the newly built Chart object should always run in\n       the callback. Defining a\n       [chart.event.load](https://api.highcharts.com/highstock/chart.events.load)\n       handler is equivalent.",
								"isOptional": true,
								"types": [
									"Highcharts.ChartCallbackFunction"
								]
							}
						},
						"return": {
							"types": [
								"Highcharts.Chart"
							],
							"description": "The chart object."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/stock.src.js",
								"line": 9879
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.stop",
						"description": "Stop running animation.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"el": {
								"description": "The SVGElement to stop animation on.",
								"types": [
									"Highcharts.SVGElement"
								]
							},
							"prop": {
								"description": "The property to stop animating. If given, the stop method will stop a\n       single property from animating, while others continue.",
								"isOptional": true,
								"types": [
									"string"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 2224
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.swapXY",
						"description": "When we have vertical scrollbar, rifles and arrow in buttons should be\nrotated. The same method is used in Navigator's handles, to rotate them.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"path": {
								"description": "Path to be rotated.",
								"types": [
									"Array.<(number|string)>"
								]
							},
							"vertical": {
								"description": "If vertical scrollbar, swap x-y values.",
								"types": [
									"boolean"
								]
							}
						},
						"return": {
							"types": [
								"Array.<(number|string)>"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/stock.src.js",
								"line": 4379
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.syncTimeout",
						"description": "Set a timeout if the delay is given, otherwise perform the function\nsynchronously.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"fn": {
								"description": "The function callback.",
								"types": [
									"function"
								]
							},
							"delay": {
								"description": "Delay in milliseconds.",
								"types": [
									"number"
								]
							},
							"context": {
								"description": "The context.",
								"isOptional": true,
								"types": [
									"*"
								]
							}
						},
						"return": {
							"types": [
								"number"
							],
							"description": "An identifier for the timeout that can later be cleared with\n        Highcharts.clearTimeout."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 1211
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.time",
						"description": "Global `Time` object with default options. Since v6.0.5, time settings can be\napplied individually for each chart. If no individual settings apply, this\n`Time` object is shared by all instances.",
						"kind": "member",
						"isStatic": true,
						"types": [
							"Highcharts.Time"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 13125
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.uniqueKey",
						"description": "Get a unique key for using in internal element id's and pointers. The key is\ncomposed of a random hash specific to this Highcharts instance, and a\ncounter.",
						"kind": "function",
						"isStatic": true,
						"return": {
							"types": [
								"string"
							],
							"description": "A unique key."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 2748
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.wrap",
						"description": "Wrap a method with extended functionality, preserving the original function.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"obj": {
								"description": "The context object that the method belongs to. In real cases, this is\n       often a prototype.",
								"types": [
									"*"
								]
							},
							"method": {
								"description": "The name of the method to extend.",
								"types": [
									"string"
								]
							},
							"func": {
								"description": "A wrapper function callback. This function is called with the same\n       arguments as the original function, except that the original function\n       is unshifted and passed as the first argument.",
								"types": [
									"function"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 1437
							}
						]
					}
				}
			]
		},
		{
			"doclet": {
				"name": "external:JQuery",
				"description": "Highcharts-extended JQuery.",
				"kind": "external",
				"isGlobal": true
			},
			"meta": {
				"files": [
					{
						"path": "code/highcharts.src.js",
						"line": 2778
					}
				]
			},
			"children": [
				{
					"doclet": {
						"name": "external:JQuery.highcharts",
						"description": "Helper function to return the chart of the current JQuery selector\nelement.",
						"kind": "function",
						"return": {
							"types": [
								"JQuery"
							],
							"description": "The current JQuery selector."
						},
						"parameters": {
							"className": {
								"description": "Name of the factory class in the Highcharts namespace.",
								"isOptional": true,
								"types": [
									"\"Chart\"",
									"\"Map\"",
									"\"StockChart\"",
									"string"
								]
							},
							"options": {
								"description": "The chart options structure.",
								"isOptional": true,
								"types": [
									"Highcharts.Options"
								]
							},
							"callback": {
								"description": "Function to run when the chart has loaded and and all external\n       images are loaded. Defining a\n       [chart.event.load](https://api.highcharts.com/highcharts/chart.events.load)\n       handler is equivalent.",
								"isOptional": true,
								"types": [
									"Highcharts.ChartCallbackFunction"
								]
							}
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 2784
							}
						]
					}
				}
			]
		}
	]
}