<div style="text-align:left; margin:10px; padding-left:20px; padding-right:20px; padding-top:10px; padding-bottom:10px">
    <h2 style="font-weight:500;">Passing Data From the Controller to the Chart in the View</h2>

    <p class="c1"><span></span></p>
    <p class="c4"><span>The last step is to actually get the data and pass it to the </span>
    <span class="c14 c7">View </span><span>definition of the chart. This is typically done in the </span>
    <span class="c14 c7">Controller </span><span>that is responsible for the </span>
    <span class="c14 c7">View </span><span>using the chart. Most typically, this would involve database query, but for the sake of simplicity, we are using fixed data to demonstrate how this can be done.</span></p><p class="c1"><span></span></p><p class="c4"><span>Just define the Controller for the View and make sure you create a List&lt;AreaSeriesData&gt; with values corresponding to the points you need. If you are using other chart types, e.g. &ldquo;Line&rdquo; instead of &ldquo;Area&rdquo;, the collection becomes List&lt;LineSeriesData&gt;. You can add any number of points to the collection and then set the ViewData for the respective item to the instance of the collection you need. This will later be used by the View and the chart itself to get the data, for example:</span></p><p class="c1"><span></span></p><pre><p class="c4"><span class="c7 c8">...</span></p><p class="c4"><span class="c7 c8">public ActionResult AreaBasic()</span></p><p class="c4"><span class="c7 c8">&nbsp; &nbsp; &nbsp; &nbsp; {</span></p><p class="c4"><span class="c7 c8">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; List&lt;double?&gt; usaValues = new List&lt;double?&gt; {</span></p><p class="c4"><span class="c7 c8">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; null, null, null, null, null, 6, 11, 32, 110, 235, 369, 640,</span></p><p class="c4"><span class="c7 c8">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 1005, 1436, 2063, 3057, 4618, 6444, 9822, 15468, 20434, 24126,</span></p><p class="c4"><span class="c7 c8">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 27387, 29459, 31056, 31982, 32040, 31233, 29224, 27342, 26662,</span></p><p class="c4"><span class="c7 c8">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 26956, 27912, 28999, 28965, 27826, 25579, 25722, 24826, 24605,</span></p><p class="c4"><span class="c7 c8">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 24304, 23464, 23708, 24099, 24357, 24237, 24401, 24344, 23586,</span></p><p class="c4"><span class="c7 c8">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 22380, 21004, 17287, 14747, 13076, 12555, 12144, 11009, 10950,</span></p><p class="c4"><span class="c7 c8">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 10871, 10824, 10577, 10527, 10475, 10421, 10358, 10295, 10104 };</span></p><p class="c4"><span class="c7 c8">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; List&lt;double?&gt; russiaValues = new List&lt;double?&gt; {</span></p><p class="c4"><span class="c7 c8">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; null, null, null, null, null, null, null, null, null, null,</span></p><p class="c4"><span class="c7 c8">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 5, 25, 50, 120, 150, 200, 426, 660, 869, 1060, 1605, 2471, 3322,</span></p><p class="c4"><span class="c7 c8">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 4238, 5221, 6129, 7089, 8339, 9399, 10538, 11643, 13092, 14478,</span></p><p class="c4"><span class="c7 c8">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 15915, 17385, 19055, 21205, 23044, 25393, 27935, 30062, 32049,</span></p><p class="c4"><span class="c7 c8">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 33952, 35804, 37431, 39197, 45000, 43000, 41000, 39000, 37000,</span></p><p class="c4"><span class="c7 c8">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 35000, 33000, 31000, 29000, 27000, 25000, 24000, 23000, 22000,</span></p><p class="c4"><span class="c7 c8">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 21000, 20000, 19000, 18000, 18000, 17000, 16000 };</span></p><p class="c4"><span class="c7 c8">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; List&lt;AreaSeriesData&gt; usaData = new List&lt;AreaSeriesData&gt;();</span></p><p class="c4"><span class="c7 c8">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; List&lt;AreaSeriesData&gt; russiaData = new List&lt;AreaSeriesData&gt;();</span></p><p class="c1"><span class="c7 c8"></span></p><p class="c4"><span class="c7 c8">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; usaValues.ForEach(p =&gt; usaData.Add(new AreaSeriesData { Y = p }));</span></p><p class="c4"><span class="c7 c8">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; russiaValues.ForEach(p =&gt; russiaData.Add(new AreaSeriesData { Y = p }));</span></p><p class="c1"><span class="c7 c8"></span></p><p class="c4"><span class="c7 c8">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ViewData[&quot;usaData&quot;] = usaData;</span></p><p class="c4"><span class="c7 c8">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ViewData[&quot;russiaData&quot;] = russiaData;</span></p><p class="c1"><span class="c7 c8"></span></p><p class="c4"><span class="c7 c8">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return View();</span></p><p class="c4"><span class="c7 c8">&nbsp; &nbsp; &nbsp; &nbsp; }</span></p><p class="c4"><span class="c7 c8">...</span></p></pre><p class="c1"><span></span></p><p class="c4"><span>And this is the chart that is produced by this View and Controller:</span></p><p class="c1"><span></span></p><p class="c4"><span style="overflow: hidden; display: inline-block; margin: 0.00px 0.00px; border: 0.00px solid #000000; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px); width: 601.70px; height: 349.33px;"><img alt="" src="~/Content/images/image02.png" style="width: 601.70px; height: 349.33px; margin-left: 0.00px; margin-top: 0.00px; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px);" title=""></span></p>
</div>