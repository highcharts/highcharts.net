<div class="doc" style="text-align:left; margin:10px; padding-left:20px; padding-right:20px; padding-top:10px; padding-bottom:10px">
    <h2 style="font-weight:500;">Add data</h2>

    <p class="c1"><span></span></p>
    <p class="c4">
        <span>Two steps are required to add data:</span><br />
        <ol>
            <li>Getting data in your chart.</li>
            <li>Define data.</li>
        </ol>
        <span>Let&rsquo;s explore that.</span>
    </p>
    <br />
    <p class="c4">
    <span style="font-weight:500;">1. Getting data in your chart</span><br />
    <span>To add data to the chart, use Series property inside Highcharts object. For example:</span>
    </p>
    <pre>&hellip;<br />&nbsp;@@{var chartOptions = new Highcharts
    {
        Title = new Title
        {
            Text = "US and USSR nuclear stockpiles"
        },
        Subtitle = new Subtitle
        {
            Text = "Source: <a href='http://thebulletin.metapress.com/content/c4120650912x74k7/fulltext.pdf'>thebulletin.metapress.com</a>"
        },

        XAxis = new List<XAxis>
    {
                new XAxis
                {
                    AllowDecimals = false,
                    Labels = new XAxisLabels
                    {
                        Formatter = "formatXAxis"
                    }

                }
            },
        YAxis = new List<YAxis>
    {
                new YAxis
                {
                    Title = new YAxisTitle
                    {
                        Text = "Nuclear weapon states"
                    },
                    Labels = new YAxisLabels
                    {
                        Formatter = "formatYAxis"
                    }
                }
            },
        Tooltip = new Tooltip
        {
            PointFormat = "{series.name} produced <b>{point.y:,.0f}</b><br />warheads in {point.x}"
        },
        PlotOptions = new PlotOptions
        {
            Area = new PlotOptionsArea
            {
                PointStart = 1940,
                Marker = new PlotOptionsAreaMarker
                {
                    Enabled = false,
                    Symbol = "circle",
                    Radius = 2,
                    States = new PlotOptionsAreaMarkerStates
                    {
                        Hover = new PlotOptionsAreaMarkerStatesHover
                        {
                            Enabled = true
                        }
                    }
                }

            }
        },
        Series = new List<Series>
    {
                new AreaSeries
                {
                    Name = "USA",
                    Data = @ViewData["usaData"] as List<AreaSeriesData>

                },
                new AreaSeries
                {
                    Name = "USSR/Russia",
                    Data = @ViewData["russiaData"] as List<AreaSeriesData>
                }
            }
    };


    chartOptions.ID = "chart";
    var renderer = new HighchartsRenderer(chartOptions);
}

@@Html.Raw(renderer.RenderHtml())<br />&hellip;</pre>
    <p class="c4"><span>The data defined in the series comes directly from the Controller, using the ViewData ASP.NET MVC mechanism (you can also use ViewBag or define the data directly in the View).</span></p>

    <p class="c1"><span></span></p>
    <br />
    <p class="c4">
        <span style="font-weight:500;">2. Define data</span><br />
        <span>To define data, you can either pass it from the controller to the chart in the view or use a fixed data in the view.</span>
    </p>
    <p class="c4">
        <span style="font-weight:500;">A. Passing data from the controller to the chart view</span><br />
        <span>This step is to get the data and pass it to the View; this is done in the Controller which is responsible for the View using the chart. This process would involve database query, but for the sake of simplicity, fixed data is used.</span>
    </p>
    <p class="c4">
        <span>Go to your controller file and define the Controller for the View and make sure you create a List&lt;AreaSeriesData&gt; with values corresponding to the points you need. If you are using other chart types, e.g. &ldquo;Line&rdquo; instead of &ldquo;Area&rdquo;, the collection becomes List&lt;LineSeriesData&gt;. You can add any number of points to the collection and then set the ViewData for the respective item to the instance of the collection you need. This will later be used by the View and the chart itself to get the data, for example:</span>
    </p>
    <pre>&hellip;<br />public ActionResult AreaBasic()<br />&nbsp; &nbsp; &nbsp; &nbsp; {<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; List&lt;double?&gt; usaValues = new List&lt;double?&gt; {<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; null, null, null, null, null, 6, 11, 32, 110, 235, 369, 640,<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 1005, 1436, 2063, 3057, 4618, 6444, 9822, 15468, 20434, 24126,<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 27387, 29459, 31056, 31982, 32040, 31233, 29224, 27342, 26662,<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 26956, 27912, 28999, 28965, 27826, 25579, 25722, 24826, 24605,<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 24304, 23464, 23708, 24099, 24357, 24237, 24401, 24344, 23586,<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 22380, 21004, 17287, 14747, 13076, 12555, 12144, 11009, 10950,<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 10871, 10824, 10577, 10527, 10475, 10421, 10358, 10295, 10104 };<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; List&lt;double?&gt; russiaValues = new List&lt;double?&gt; {<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; null, null, null, null, null, null, null, null, null, null,<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 5, 25, 50, 120, 150, 200, 426, 660, 869, 1060, 1605, 2471, 3322,<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 4238, 5221, 6129, 7089, 8339, 9399, 10538, 11643, 13092, 14478,<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 15915, 17385, 19055, 21205, 23044, 25393, 27935, 30062, 32049,<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 33952, 35804, 37431, 39197, 45000, 43000, 41000, 39000, 37000,<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 35000, 33000, 31000, 29000, 27000, 25000, 24000, 23000, 22000,<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 21000, 20000, 19000, 18000, 18000, 17000, 16000 };<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; List&lt;AreaSeriesData&gt; usaData = new List&lt;AreaSeriesData&gt;();<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; List&lt;AreaSeriesData&gt; russiaData = new List&lt;AreaSeriesData&gt;();<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; usaValues.ForEach(p =&gt; usaData.Add(new AreaSeriesData { Y = p }));<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; russiaValues.ForEach(p =&gt; russiaData.Add(new AreaSeriesData { Y = p }));<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ViewData[&quot;usaData&quot;] = usaData;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ViewData[&quot;russiaData&quot;] = russiaData;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return View();<br />&nbsp; &nbsp; &nbsp; &nbsp; }<br />&hellip;</pre>
    <p class="c4"><img alt="" src="~/Content/images/Controller.png" style="width: 897.00px; height: 720.00px; margin-left: 0.00px; margin-top: 0.00px; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px);" title=""></p>
    <p class="c4"><span>The result of this example is:</span></p>
    <div>
        @{Html.RenderAction("Demo1");}
    </div>
    <p class="c4">
        <span style="font-weight:500;">B. Use a fixed data in the view</span><br />
        <span>The method described above is the most common way to define data. However, you can also define data directly in the View, as shown here:</span>
    </p>
    <p class="c4"><img alt="" src="~/Content/images/View2.png" style="width: 804.00px; height: 460.00px; margin-left: 0.00px; margin-top: 0.00px; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px);" title=""></p>
    
    <p class="c1"><span></span></p>
    <p class="c4"><span>In this case, we are creating a column chart with six columns, representing browser market share each column with its own name and value.<br />And this is the chart that is produced by this View:</span></p>
    <div>
        @{Html.RenderPartial("Demo2");}
    </div>
</div>